   1              		.arch armv7e-m
   2              		.fpu fpv4-sp-d16
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 4
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.file	"power.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.file 1 "src/sys/power.c"
  19              		.align	1
  20              		.global	set_voltage_scale
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.type	set_voltage_scale, %function
  25              	set_voltage_scale:
  26              	.LVL0:
  27              	.LFB397:
   1:src/sys/power.c **** #include "power.h"
   2:src/sys/power.c **** #include "devices.h"
   3:src/sys/power.c **** #include "cm4.h"
   4:src/sys/power.c **** 
   5:src/sys/power.c ****  
   6:src/sys/power.c **** void set_voltage_scale(VOS scale) {
  28              		.loc 1 6 35 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
   7:src/sys/power.c ****   enable_PWR();
  33              		.loc 1 7 3 view .LVU1
  34              	.LBB24:
  35              	.LBI24:
  36              		.file 2 "src/sys/devices.h"
   1:src/sys/devices.h **** #ifndef __IO_H
   2:src/sys/devices.h **** #define __IO_H
   3:src/sys/devices.h **** 
   4:src/sys/devices.h **** #include<stdint.h>
   5:src/sys/devices.h **** #include "cm4.h"
   6:src/sys/devices.h **** 
   7:src/sys/devices.h **** #define __reserved(offset) \
   8:src/sys/devices.h ****   uint32_t _reserved_ ## offset
   9:src/sys/devices.h **** 
  10:src/sys/devices.h **** #define __reserved_interval(offset1,offset2) \
  11:src/sys/devices.h ****   uint32_t _reserved_ ## offset1 ## _ ## offset2[((offset2)-(offset1))/4]
  12:src/sys/devices.h **** 
  13:src/sys/devices.h **** /* PM §4.2.10 */ 
  14:src/sys/devices.h **** struct MPU_registers {
  15:src/sys/devices.h ****   uint32_t TYPER;
  16:src/sys/devices.h ****   uint32_t CTRL;
  17:src/sys/devices.h ****   uint32_t RNR;
  18:src/sys/devices.h ****   uint32_t RBAR;
  19:src/sys/devices.h ****   uint32_t RASR;
  20:src/sys/devices.h ****   uint32_t RBAR_A1;
  21:src/sys/devices.h ****   uint32_t RASR_A1;
  22:src/sys/devices.h ****   uint32_t RBAR_A2;
  23:src/sys/devices.h ****   uint32_t RASR_A2;
  24:src/sys/devices.h ****   uint32_t RBAR_A3;
  25:src/sys/devices.h ****   uint32_t RASR_A3;
  26:src/sys/devices.h **** };
  27:src/sys/devices.h **** 
  28:src/sys/devices.h **** /* PM §4.3.11 */ 
  29:src/sys/devices.h **** struct NVIC_registers {
  30:src/sys/devices.h ****   uint32_t ISER[3];
  31:src/sys/devices.h ****   __reserved_interval(0x0c,0x80);
  32:src/sys/devices.h ****   uint32_t ICER[3];
  33:src/sys/devices.h ****   __reserved_interval(0x8c,0x100);
  34:src/sys/devices.h ****   uint32_t ISPR[3];
  35:src/sys/devices.h ****   __reserved_interval(0x10c,0x180);
  36:src/sys/devices.h ****   uint32_t ICPR[3];
  37:src/sys/devices.h ****   __reserved_interval(0x18c,0x200);
  38:src/sys/devices.h ****   uint32_t IABR[3];
  39:src/sys/devices.h ****   __reserved_interval(0x20c,0x300);
  40:src/sys/devices.h ****   uint8_t  IP[81];
  41:src/sys/devices.h ****   uint8_t _reserved_bytes[3];
  42:src/sys/devices.h **** };
  43:src/sys/devices.h **** 
  44:src/sys/devices.h **** /* PM §4.4.19 */ 
  45:src/sys/devices.h **** struct SCB_registers {
  46:src/sys/devices.h ****   uint32_t CPUID;
  47:src/sys/devices.h ****   uint32_t ICSR;
  48:src/sys/devices.h ****   uint32_t VTOR;
  49:src/sys/devices.h ****   uint32_t AIRCR;
  50:src/sys/devices.h ****   uint32_t SCR;
  51:src/sys/devices.h ****   uint32_t CCR;
  52:src/sys/devices.h ****   uint32_t SHPR1;
  53:src/sys/devices.h ****   uint32_t SHPR2;
  54:src/sys/devices.h ****   uint32_t SHPR3;
  55:src/sys/devices.h ****   uint32_t SHCRS;
  56:src/sys/devices.h ****   uint32_t CFSR;
  57:src/sys/devices.h ****   uint32_t HFSR;
  58:src/sys/devices.h ****   uint32_t MMAR;
  59:src/sys/devices.h ****   uint32_t BFAR;
  60:src/sys/devices.h ****   uint32_t AFSR;
  61:src/sys/devices.h **** };
  62:src/sys/devices.h **** 
  63:src/sys/devices.h **** /* PM §4.5.6 */ 
  64:src/sys/devices.h **** struct STK_registers {
  65:src/sys/devices.h ****   uint32_t CTRL;
  66:src/sys/devices.h ****   uint32_t LOAD;
  67:src/sys/devices.h ****   uint32_t VAL;
  68:src/sys/devices.h ****   uint32_t CALIB;
  69:src/sys/devices.h **** };
  70:src/sys/devices.h **** 
  71:src/sys/devices.h **** /* PM §4.6 */ 
  72:src/sys/devices.h **** struct FPU_registers {
  73:src/sys/devices.h ****   __reserved(0x0);
  74:src/sys/devices.h ****   uint32_t CCR;
  75:src/sys/devices.h ****   uint32_t CAR;
  76:src/sys/devices.h ****   uint32_t DSCR;
  77:src/sys/devices.h **** };
  78:src/sys/devices.h **** 
  79:src/sys/devices.h **** 
  80:src/sys/devices.h **** /* RM §3.6.7 */ 
  81:src/sys/devices.h **** struct FLASH_registers {
  82:src/sys/devices.h ****   uint32_t ACR;
  83:src/sys/devices.h ****   uint32_t KEYR;
  84:src/sys/devices.h ****   uint32_t OPTKEYR;
  85:src/sys/devices.h ****   uint32_t SR;
  86:src/sys/devices.h ****   uint32_t CR;
  87:src/sys/devices.h ****   uint32_t OPTCR;  
  88:src/sys/devices.h **** };
  89:src/sys/devices.h **** 
  90:src/sys/devices.h **** /* RM §4.4.4 */
  91:src/sys/devices.h **** struct CRC_registers {
  92:src/sys/devices.h ****   uint32_t DR;
  93:src/sys/devices.h ****   uint32_t ICR;
  94:src/sys/devices.h ****   uint32_t CR;
  95:src/sys/devices.h **** };
  96:src/sys/devices.h **** 
  97:src/sys/devices.h **** /* RM §5.5 */
  98:src/sys/devices.h **** struct PWR_registers {
  99:src/sys/devices.h ****   uint32_t CR;
 100:src/sys/devices.h ****   uint32_t CSR;
 101:src/sys/devices.h **** };
 102:src/sys/devices.h **** 
 103:src/sys/devices.h **** /* RM §6.3.28 */
 104:src/sys/devices.h **** struct RCC_registers {
 105:src/sys/devices.h ****   uint32_t CR;
 106:src/sys/devices.h ****   uint32_t PLLCFGR;
 107:src/sys/devices.h ****   uint32_t CFGR;
 108:src/sys/devices.h ****   uint32_t CIR;
 109:src/sys/devices.h ****   uint32_t AHB1RSTR;
 110:src/sys/devices.h ****   uint32_t AHB2RSTR;
 111:src/sys/devices.h ****   uint32_t AHB3RSTR;
 112:src/sys/devices.h ****   __reserved(0x1c);
 113:src/sys/devices.h ****   uint32_t APB1RSTR;
 114:src/sys/devices.h ****   uint32_t APB2RSTR;
 115:src/sys/devices.h ****   __reserved(0x28);
 116:src/sys/devices.h ****   __reserved(0x2c);
 117:src/sys/devices.h ****   uint32_t AHB1ENR;
 118:src/sys/devices.h ****   uint32_t AHB2ENR;
 119:src/sys/devices.h ****   uint32_t AHB3ENR;
 120:src/sys/devices.h ****   __reserved(0x3c);
 121:src/sys/devices.h ****   uint32_t APB1ENR;
 122:src/sys/devices.h ****   uint32_t APB2ENR;
 123:src/sys/devices.h ****   __reserved(0x48);
 124:src/sys/devices.h ****   __reserved(0x4c);
 125:src/sys/devices.h ****   uint32_t AHB1LPENR;
 126:src/sys/devices.h ****   uint32_t AHB2LPENR;
 127:src/sys/devices.h ****   uint32_t AHB3LPENR;
 128:src/sys/devices.h ****   __reserved(0x5c);
 129:src/sys/devices.h ****   uint32_t APB1LPENR;
 130:src/sys/devices.h ****   uint32_t APB2LPENR;
 131:src/sys/devices.h ****   __reserved(0x68);
 132:src/sys/devices.h ****   __reserved(0x6c);
 133:src/sys/devices.h ****   uint32_t BDCR;
 134:src/sys/devices.h ****   uint32_t CSR;
 135:src/sys/devices.h ****   __reserved(0x78);
 136:src/sys/devices.h ****   __reserved(0x7c);
 137:src/sys/devices.h ****   uint32_t SSCGR;
 138:src/sys/devices.h ****   uint32_t PLLI2SCFGR;
 139:src/sys/devices.h ****   uint32_t PLLSAICFGR;
 140:src/sys/devices.h ****   uint32_t DCKCFGR;
 141:src/sys/devices.h ****   uint32_t CKGATENR;
 142:src/sys/devices.h ****   uint32_t DCKCFGR2;
 143:src/sys/devices.h **** };
 144:src/sys/devices.h **** 
 145:src/sys/devices.h **** /* RM §7.4.11 */
 146:src/sys/devices.h **** struct GPIO_registers {
 147:src/sys/devices.h ****   uint32_t MODER;
 148:src/sys/devices.h ****   uint32_t OTYPER;
 149:src/sys/devices.h ****   uint32_t OSPEEDR;
 150:src/sys/devices.h ****   uint32_t PUPDR;
 151:src/sys/devices.h ****   uint32_t IDR;
 152:src/sys/devices.h ****   uint32_t ODR;
 153:src/sys/devices.h ****   uint32_t BSRR;
 154:src/sys/devices.h ****   uint32_t LCKR;
 155:src/sys/devices.h ****   uint32_t AFRL;
 156:src/sys/devices.h ****   uint32_t AFRH;
 157:src/sys/devices.h **** };
 158:src/sys/devices.h **** 
 159:src/sys/devices.h **** /* RM §8.2.9 */
 160:src/sys/devices.h **** struct SYSCFG_registers {
 161:src/sys/devices.h ****   uint32_t MEMRMP;
 162:src/sys/devices.h ****   uint32_t PMC;
 163:src/sys/devices.h ****   uint32_t EXTICR1;
 164:src/sys/devices.h ****   uint32_t EXTICR2;
 165:src/sys/devices.h ****   uint32_t EXTICR3;
 166:src/sys/devices.h ****   uint32_t EXTICR4;
 167:src/sys/devices.h ****   __reserved(0x18);
 168:src/sys/devices.h ****   __reserved(0x1c);
 169:src/sys/devices.h ****   uint32_t CMPCR;
 170:src/sys/devices.h ****   __reserved(0x24);
 171:src/sys/devices.h ****   __reserved(0x28);
 172:src/sys/devices.h ****   uint32_t CFGR;
 173:src/sys/devices.h **** };
 174:src/sys/devices.h **** 
 175:src/sys/devices.h **** /* RM §9.5.11 */
 176:src/sys/devices.h **** struct DMA_Sx_registers {
 177:src/sys/devices.h ****   uint32_t CR;
 178:src/sys/devices.h ****   uint32_t NDTR;
 179:src/sys/devices.h ****   volatile void* PAR;
 180:src/sys/devices.h ****   volatile void* M0AR;
 181:src/sys/devices.h ****   volatile void* M1AR;
 182:src/sys/devices.h ****   uint32_t FCR;
 183:src/sys/devices.h **** };
 184:src/sys/devices.h **** struct DMA_registers {
 185:src/sys/devices.h ****   uint32_t LISR;
 186:src/sys/devices.h ****   uint32_t HISR;
 187:src/sys/devices.h ****   uint32_t LIFCR;
 188:src/sys/devices.h ****   uint32_t HIFCR;
 189:src/sys/devices.h ****   struct DMA_Sx_registers S[8];
 190:src/sys/devices.h **** };
 191:src/sys/devices.h **** 
 192:src/sys/devices.h **** /* RM §10.3.7 */
 193:src/sys/devices.h **** struct EXTI_registers {
 194:src/sys/devices.h ****   uint32_t IMR;
 195:src/sys/devices.h ****   uint32_t EMR;
 196:src/sys/devices.h ****   uint32_t RTSR;
 197:src/sys/devices.h ****   uint32_t FTSR;
 198:src/sys/devices.h ****   uint32_t SWIER;
 199:src/sys/devices.h ****   uint32_t PR;
 200:src/sys/devices.h **** };
 201:src/sys/devices.h **** 
 202:src/sys/devices.h **** /* RM §11.8 */
 203:src/sys/devices.h **** struct FMC_registers {
 204:src/sys/devices.h ****   uint32_t BCR1;
 205:src/sys/devices.h ****   uint32_t BCR2;
 206:src/sys/devices.h ****   uint32_t BCR3;
 207:src/sys/devices.h ****   uint32_t BCR4;
 208:src/sys/devices.h ****   uint32_t BTR1;
 209:src/sys/devices.h ****   uint32_t BTR2;
 210:src/sys/devices.h ****   uint32_t BTR3;
 211:src/sys/devices.h ****   uint32_t BTR4;
 212:src/sys/devices.h ****   uint32_t BWTR1;
 213:src/sys/devices.h ****   uint32_t BWTR2;
 214:src/sys/devices.h ****   uint32_t BWTR3;
 215:src/sys/devices.h ****   uint32_t BWTR4;
 216:src/sys/devices.h ****   uint32_t PCR;
 217:src/sys/devices.h ****   uint32_t SR;
 218:src/sys/devices.h ****   uint32_t PMEM;
 219:src/sys/devices.h ****   uint32_t PATT;
 220:src/sys/devices.h ****   uint32_t ECCR;
 221:src/sys/devices.h ****   uint32_t SDCR1;
 222:src/sys/devices.h ****   uint32_t SDCR2;
 223:src/sys/devices.h ****   uint32_t SDTR1;
 224:src/sys/devices.h ****   uint32_t SDTR2;
 225:src/sys/devices.h ****   uint32_t SDCMR;
 226:src/sys/devices.h ****   uint32_t SDRTR;
 227:src/sys/devices.h ****   uint32_t SDSR;
 228:src/sys/devices.h **** };
 229:src/sys/devices.h **** 
 230:src/sys/devices.h **** /* RM §12.5.14 */
 231:src/sys/devices.h **** struct QUADSPI_registers {
 232:src/sys/devices.h ****   uint32_t CR;
 233:src/sys/devices.h ****   uint32_t DCR;
 234:src/sys/devices.h ****   uint32_t SR;
 235:src/sys/devices.h ****   uint32_t FCR;
 236:src/sys/devices.h ****   uint32_t DLR;
 237:src/sys/devices.h ****   uint32_t CCR;
 238:src/sys/devices.h ****   uint32_t AR;
 239:src/sys/devices.h ****   uint32_t ABR;
 240:src/sys/devices.h ****   uint32_t DR;
 241:src/sys/devices.h ****   uint32_t PSMKR;
 242:src/sys/devices.h ****   uint32_t PSMAR;
 243:src/sys/devices.h ****   uint32_t PIR;
 244:src/sys/devices.h ****   uint32_t LPTR;
 245:src/sys/devices.h **** };
 246:src/sys/devices.h **** 
 247:src/sys/devices.h **** /* RM §13.13.18 */
 248:src/sys/devices.h **** struct ADCx_registers {
 249:src/sys/devices.h ****   uint32_t SR;
 250:src/sys/devices.h ****   uint32_t CR1;
 251:src/sys/devices.h ****   uint32_t CR2;
 252:src/sys/devices.h ****   uint32_t SMPR1;
 253:src/sys/devices.h ****   uint32_t SMPR2;
 254:src/sys/devices.h ****   uint32_t JOFR1;
 255:src/sys/devices.h ****   uint32_t JOFR2;
 256:src/sys/devices.h ****   uint32_t JOFR3;
 257:src/sys/devices.h ****   uint32_t JOFR4;
 258:src/sys/devices.h ****   uint32_t HTR;
 259:src/sys/devices.h ****   uint32_t LTR;
 260:src/sys/devices.h ****   uint32_t SQR1;
 261:src/sys/devices.h ****   uint32_t SQR2;
 262:src/sys/devices.h ****   uint32_t SQR3;
 263:src/sys/devices.h ****   uint32_t JSQR;
 264:src/sys/devices.h ****   uint32_t JDR1;
 265:src/sys/devices.h ****   uint32_t JDR2;
 266:src/sys/devices.h ****   uint32_t JDR3;
 267:src/sys/devices.h ****   uint32_t JDR4;
 268:src/sys/devices.h ****   uint32_t DR;
 269:src/sys/devices.h **** };
 270:src/sys/devices.h **** 
 271:src/sys/devices.h **** struct ADC_common_registers {
 272:src/sys/devices.h ****   uint32_t CSR;
 273:src/sys/devices.h ****   uint32_t CCR;
 274:src/sys/devices.h ****   uint32_t CDR;
 275:src/sys/devices.h **** };
 276:src/sys/devices.h **** 
 277:src/sys/devices.h **** 
 278:src/sys/devices.h **** /* RM §14.5.15 */
 279:src/sys/devices.h **** struct DAC_registers {
 280:src/sys/devices.h ****   uint32_t CR;
 281:src/sys/devices.h ****   uint32_t SWTRIGR;
 282:src/sys/devices.h ****   uint32_t DHR12R1;
 283:src/sys/devices.h ****   uint32_t DHR12L1;
 284:src/sys/devices.h ****   uint32_t DHR8R1;
 285:src/sys/devices.h ****   uint32_t DHR12R2;
 286:src/sys/devices.h ****   uint32_t DHR12L2;
 287:src/sys/devices.h ****   uint32_t DHR8R2;
 288:src/sys/devices.h ****   uint32_t DHR12RD;
 289:src/sys/devices.h ****   uint32_t DHR12LD;
 290:src/sys/devices.h ****   uint32_t DHR8RD;
 291:src/sys/devices.h ****   uint32_t DOR1;
 292:src/sys/devices.h ****   uint32_t DOR2;
 293:src/sys/devices.h ****   uint32_t SR;
 294:src/sys/devices.h **** };
 295:src/sys/devices.h **** 
 296:src/sys/devices.h **** /* RM §15.8.12 */
 297:src/sys/devices.h **** struct DCMI_registers {
 298:src/sys/devices.h ****   uint32_t CR;
 299:src/sys/devices.h ****   uint32_t SR;
 300:src/sys/devices.h ****   uint32_t RIS;
 301:src/sys/devices.h ****   uint32_t IER;
 302:src/sys/devices.h ****   uint32_t MIS;
 303:src/sys/devices.h ****   uint32_t ICR;
 304:src/sys/devices.h ****   uint32_t ESCR;
 305:src/sys/devices.h ****   uint32_t ESUR;
 306:src/sys/devices.h ****   uint32_t CWSTRT;
 307:src/sys/devices.h ****   uint32_t CWSIZE;
 308:src/sys/devices.h ****   uint32_t DR;
 309:src/sys/devices.h **** };
 310:src/sys/devices.h **** 
 311:src/sys/devices.h **** /* RM §16.4.21 TIM1,8 */
 312:src/sys/devices.h **** /* RM §17.4.21 TIM2,3,4,5 */
 313:src/sys/devices.h **** /* RM §18.4.13 TIM9,12 */
 314:src/sys/devices.h **** /* RM §18.5.1  TIM10,11,13,14 */
 315:src/sys/devices.h **** /* RM §19.4.9  TIM6,7 */
 316:src/sys/devices.h **** struct TIMx_registers {
 317:src/sys/devices.h ****   uint32_t CR1;
 318:src/sys/devices.h ****   uint32_t CR2;
 319:src/sys/devices.h ****   uint32_t SMCR;
 320:src/sys/devices.h ****   uint32_t DIER;
 321:src/sys/devices.h ****   uint32_t SR;
 322:src/sys/devices.h ****   uint32_t EGR;
 323:src/sys/devices.h ****   uint32_t CCMR1;
 324:src/sys/devices.h ****   uint32_t CCMR2;
 325:src/sys/devices.h ****   uint32_t CCER;
 326:src/sys/devices.h ****   uint32_t CNT;
 327:src/sys/devices.h ****   uint32_t PSC;
 328:src/sys/devices.h ****   uint32_t ARR;
 329:src/sys/devices.h ****   uint32_t RCR;
 330:src/sys/devices.h ****   uint32_t CCR1;
 331:src/sys/devices.h ****   uint32_t CCR2;
 332:src/sys/devices.h ****   uint32_t CCR3;
 333:src/sys/devices.h ****   uint32_t CCR4;
 334:src/sys/devices.h ****   uint32_t BDTR;
 335:src/sys/devices.h ****   uint32_t DCR;
 336:src/sys/devices.h ****   uint32_t DMAR;
 337:src/sys/devices.h ****   uint32_t OR;
 338:src/sys/devices.h **** };
 339:src/sys/devices.h **** 
 340:src/sys/devices.h **** /* RM §20.4.5 */
 341:src/sys/devices.h **** struct IWDG_registers {
 342:src/sys/devices.h ****   uint32_t KR;
 343:src/sys/devices.h ****   uint32_t PR;
 344:src/sys/devices.h ****   uint32_t RLR;
 345:src/sys/devices.h ****   uint32_t SR;
 346:src/sys/devices.h **** };
 347:src/sys/devices.h **** 
 348:src/sys/devices.h **** /* RM §21.6.4 */
 349:src/sys/devices.h **** struct WWDG_registers {
 350:src/sys/devices.h ****   uint32_t CR;
 351:src/sys/devices.h ****   uint32_t CFR;
 352:src/sys/devices.h ****   uint32_t SR;
 353:src/sys/devices.h **** };
 354:src/sys/devices.h **** 
 355:src/sys/devices.h **** /* RM §22.6.21 */
 356:src/sys/devices.h **** struct RTC_registers {
 357:src/sys/devices.h ****   uint32_t TR;
 358:src/sys/devices.h ****   uint32_t DR;
 359:src/sys/devices.h ****   uint32_t CR;
 360:src/sys/devices.h ****   uint32_t ISR;
 361:src/sys/devices.h ****   uint32_t PRER;
 362:src/sys/devices.h ****   uint32_t WUTR;
 363:src/sys/devices.h ****   uint32_t CALIBR;
 364:src/sys/devices.h ****   uint32_t ALRMAR;
 365:src/sys/devices.h ****   uint32_t ALRMBR;
 366:src/sys/devices.h ****   uint32_t WPR;
 367:src/sys/devices.h ****   uint32_t SSR;
 368:src/sys/devices.h ****   uint32_t SHIFTR;
 369:src/sys/devices.h ****   uint32_t TSTR;
 370:src/sys/devices.h ****   uint32_t TSSSR;
 371:src/sys/devices.h ****   uint32_t CALR;
 372:src/sys/devices.h ****   uint32_t TAFCR;
 373:src/sys/devices.h ****   uint32_t ALRMASSR;
 374:src/sys/devices.h ****   uint32_t ALRMBSSR;
 375:src/sys/devices.h ****   uint32_t BKPR[20];
 376:src/sys/devices.h **** };
 377:src/sys/devices.h **** 
 378:src/sys/devices.h **** /* RM §23.7.12 */
 379:src/sys/devices.h **** struct FMPI2C_registers {
 380:src/sys/devices.h ****   uint32_t CR1;
 381:src/sys/devices.h ****   uint32_t CR2;
 382:src/sys/devices.h ****   uint32_t OAR1;
 383:src/sys/devices.h ****   uint32_t OAR2;
 384:src/sys/devices.h ****   uint32_t TIMINGR;
 385:src/sys/devices.h ****   uint32_t TIMEOUTR;
 386:src/sys/devices.h ****   uint32_t ISR;
 387:src/sys/devices.h ****   uint32_t ICR;
 388:src/sys/devices.h ****   uint32_t PECR;
 389:src/sys/devices.h ****   uint32_t RXDR;
 390:src/sys/devices.h ****   uint32_t TXDR;
 391:src/sys/devices.h **** };
 392:src/sys/devices.h **** 
 393:src/sys/devices.h **** /* RM §24.6.14 */
 394:src/sys/devices.h **** struct I2C_registers {
 395:src/sys/devices.h ****   uint32_t CR1;
 396:src/sys/devices.h ****   uint32_t CR2;
 397:src/sys/devices.h ****   uint32_t OAR1;
 398:src/sys/devices.h ****   uint32_t OAR2;
 399:src/sys/devices.h ****   uint32_t DR;
 400:src/sys/devices.h ****   uint32_t SR1;
 401:src/sys/devices.h ****   uint32_t SR2;
 402:src/sys/devices.h ****   uint32_t CCR;
 403:src/sys/devices.h ****   uint32_t TRISE;
 404:src/sys/devices.h ****   uint32_t FLTR;
 405:src/sys/devices.h **** };
 406:src/sys/devices.h **** 
 407:src/sys/devices.h **** /* RM §25.6.8 */
 408:src/sys/devices.h **** struct USART_registers {
 409:src/sys/devices.h ****   uint32_t SR;
 410:src/sys/devices.h ****   uint32_t DR;
 411:src/sys/devices.h ****   uint32_t BRR;
 412:src/sys/devices.h ****   uint32_t CR1;
 413:src/sys/devices.h ****   uint32_t CR2;
 414:src/sys/devices.h ****   uint32_t CR3;
 415:src/sys/devices.h ****   uint32_t GTPR;
 416:src/sys/devices.h **** };
 417:src/sys/devices.h **** 
 418:src/sys/devices.h **** /* RM §26.7.10 */
 419:src/sys/devices.h **** struct SPI_I2S_registers {
 420:src/sys/devices.h ****   uint32_t CR1;
 421:src/sys/devices.h ****   uint32_t CR2;
 422:src/sys/devices.h ****   uint32_t SR;
 423:src/sys/devices.h ****   uint32_t DR;
 424:src/sys/devices.h ****   uint32_t CRCPR;
 425:src/sys/devices.h ****   uint32_t RXCRCR;
 426:src/sys/devices.h ****   uint32_t TXCRCR;
 427:src/sys/devices.h ****   uint32_t I2SCFGR;
 428:src/sys/devices.h ****   uint32_t I2SPR;
 429:src/sys/devices.h **** };
 430:src/sys/devices.h **** 
 431:src/sys/devices.h **** /* RM §27.5.10 */
 432:src/sys/devices.h **** struct SPDIFRX_registers {
 433:src/sys/devices.h ****   uint32_t CR;
 434:src/sys/devices.h ****   uint32_t IMR;
 435:src/sys/devices.h ****   uint32_t SR;
 436:src/sys/devices.h ****   uint32_t IFCR;
 437:src/sys/devices.h ****   uint32_t DR;
 438:src/sys/devices.h ****   uint32_t CSR;
 439:src/sys/devices.h ****   uint32_t DIR;
 440:src/sys/devices.h **** };
 441:src/sys/devices.h **** 
 442:src/sys/devices.h **** /* RM §28.5.10 */
 443:src/sys/devices.h **** struct SAI_x_registers {
 444:src/sys/devices.h ****   uint32_t CR1;
 445:src/sys/devices.h ****   uint32_t CR2;
 446:src/sys/devices.h ****   uint32_t FRCR;
 447:src/sys/devices.h ****   uint32_t SLOTR;
 448:src/sys/devices.h ****   uint32_t IM;
 449:src/sys/devices.h ****   uint32_t SR;
 450:src/sys/devices.h ****   uint32_t CLRFR;
 451:src/sys/devices.h ****   uint32_t DR;
 452:src/sys/devices.h **** };
 453:src/sys/devices.h **** 
 454:src/sys/devices.h **** struct SAI_registers {
 455:src/sys/devices.h ****   uint32_t GCR;
 456:src/sys/devices.h ****   struct SAI_x_registers A;
 457:src/sys/devices.h ****   struct SAI_x_registers B;
 458:src/sys/devices.h **** };
 459:src/sys/devices.h **** 
 460:src/sys/devices.h **** /* RM §29.8.16 */
 461:src/sys/devices.h **** struct SDIO_registers {
 462:src/sys/devices.h ****   uint32_t POWER;
 463:src/sys/devices.h ****   uint32_t CLKCR;
 464:src/sys/devices.h ****   uint32_t CMD;
 465:src/sys/devices.h ****   uint32_t RESPCMD;
 466:src/sys/devices.h ****   uint32_t RESP1;
 467:src/sys/devices.h ****   uint32_t RESP2;
 468:src/sys/devices.h ****   uint32_t RESP3;
 469:src/sys/devices.h ****   uint32_t RESP4;
 470:src/sys/devices.h ****   uint32_t DTIMER;
 471:src/sys/devices.h ****   uint32_t DLEN;
 472:src/sys/devices.h ****   uint32_t DCTRL;
 473:src/sys/devices.h ****   uint32_t DCOUNT;
 474:src/sys/devices.h ****   uint32_t STA;
 475:src/sys/devices.h ****   uint32_t ICR;
 476:src/sys/devices.h ****   uint32_t MASK;
 477:src/sys/devices.h ****   __reserved(0x40);
 478:src/sys/devices.h ****   __reserved(0x44);
 479:src/sys/devices.h ****   uint32_t FIFOCNT;
 480:src/sys/devices.h ****   __reserved_interval(0x4c,0x80);
 481:src/sys/devices.h ****   uint32_t FIFO[32];
 482:src/sys/devices.h **** };
 483:src/sys/devices.h ****   
 484:src/sys/devices.h **** /* RM §30.9.5 */
 485:src/sys/devices.h **** struct bxCAN_TxRx_registers {
 486:src/sys/devices.h ****   uint32_t IR;
 487:src/sys/devices.h ****   uint32_t DTR;
 488:src/sys/devices.h ****   uint32_t DLR;
 489:src/sys/devices.h ****   uint32_t DHR;
 490:src/sys/devices.h **** };
 491:src/sys/devices.h **** 
 492:src/sys/devices.h **** struct bxCAN_registers {
 493:src/sys/devices.h ****   uint32_t MCR;
 494:src/sys/devices.h ****   uint32_t MSR;
 495:src/sys/devices.h ****   uint32_t TSR;
 496:src/sys/devices.h ****   uint32_t RF0R;
 497:src/sys/devices.h ****   uint32_t RF1R;
 498:src/sys/devices.h ****   uint32_t IER;
 499:src/sys/devices.h ****   uint32_t ESR;
 500:src/sys/devices.h ****   uint32_t BTR;
 501:src/sys/devices.h ****   __reserved_interval(0x20,0x180);
 502:src/sys/devices.h ****   struct bxCAN_TxRx_registers Tx[3];
 503:src/sys/devices.h ****   struct bxCAN_TxRx_registers Rx[2];
 504:src/sys/devices.h ****   __reserved_interval(0x1d0,0x200);
 505:src/sys/devices.h ****   uint32_t FMR;
 506:src/sys/devices.h ****   uint32_t FM1R;
 507:src/sys/devices.h ****   __reserved(0x208);
 508:src/sys/devices.h ****   uint32_t FS1R;
 509:src/sys/devices.h ****   __reserved(0x210);
 510:src/sys/devices.h ****   uint32_t FFA1R;
 511:src/sys/devices.h ****   __reserved(0x218);
 512:src/sys/devices.h ****   uint32_t FA1R;
 513:src/sys/devices.h ****   __reserved_interval(0x220,0x240);
 514:src/sys/devices.h ****   struct {uint32_t R1; uint32_t R2;} F[28];
 515:src/sys/devices.h **** };
 516:src/sys/devices.h **** 
 517:src/sys/devices.h **** /* RM §32.7.7 */
 518:src/sys/devices.h **** struct OTG_registers {
 519:src/sys/devices.h ****    /* TODO */
 520:src/sys/devices.h **** };
 521:src/sys/devices.h **** 
 522:src/sys/devices.h **** /* RM §32.7.7 */
 523:src/sys/devices.h **** struct HDMI_CEC_registers {
 524:src/sys/devices.h ****   uint32_t CR;
 525:src/sys/devices.h ****   uint32_t CFGR;
 526:src/sys/devices.h ****   uint32_t TXDR;
 527:src/sys/devices.h ****   uint32_t RXDR;
 528:src/sys/devices.h ****   uint32_t ISR;
 529:src/sys/devices.h ****   uint32_t IER;
 530:src/sys/devices.h **** };
 531:src/sys/devices.h **** 
 532:src/sys/devices.h **** /* RM §33.18 */
 533:src/sys/devices.h **** struct DBGMCU_registers {
 534:src/sys/devices.h ****   uint32_t IDCODE;
 535:src/sys/devices.h ****   uint32_t CR;
 536:src/sys/devices.h ****   uint32_t APB1FZ;
 537:src/sys/devices.h ****   uint32_t APB2FZ;
 538:src/sys/devices.h **** };
 539:src/sys/devices.h **** 
 540:src/sys/devices.h **** /* Constant values */
 541:src/sys/devices.h **** 
 542:src/sys/devices.h **** extern const uint16_t Package_data;
 543:src/sys/devices.h **** extern const uint16_t TS_CAL2;
 544:src/sys/devices.h **** extern const uint16_t TS_CAL1;
 545:src/sys/devices.h **** extern const uint16_t VREFIN_CAL;
 546:src/sys/devices.h **** extern const uint16_t Flash_size;
 547:src/sys/devices.h **** extern const uint32_t U_ID[3];
 548:src/sys/devices.h **** 
 549:src/sys/devices.h **** /* Core Devices base addresses */
 550:src/sys/devices.h **** 
 551:src/sys/devices.h **** extern volatile struct DBGMCU_registers DBG;
 552:src/sys/devices.h **** 
 553:src/sys/devices.h **** extern volatile struct FPU_registers FPU;
 554:src/sys/devices.h **** extern volatile uint32_t NVIC_STIR;
 555:src/sys/devices.h **** extern volatile struct MPU_registers MPU;
 556:src/sys/devices.h **** extern volatile uint32_t FPU_CPACR;
 557:src/sys/devices.h **** extern volatile struct SCB_registers SCB;
 558:src/sys/devices.h **** extern volatile struct NVIC_registers NVIC;
 559:src/sys/devices.h **** extern volatile struct STK_registers SysTick;
 560:src/sys/devices.h **** 
 561:src/sys/devices.h **** /* Devices base addresses */
 562:src/sys/devices.h **** 
 563:src/sys/devices.h **** extern volatile struct QUADSPI_registers QUADSPI;
 564:src/sys/devices.h **** 
 565:src/sys/devices.h **** extern volatile struct DCMI_registers DCMI;
 566:src/sys/devices.h **** extern volatile struct OTG_registers USB_OTG_FS;
 567:src/sys/devices.h **** 
 568:src/sys/devices.h **** extern volatile struct OTG_registers USB_OTG_HS;
 569:src/sys/devices.h **** extern volatile struct DMA_registers DMA2;
 570:src/sys/devices.h **** extern volatile struct DMA_registers DMA1;
 571:src/sys/devices.h **** extern uint32_t BKPSRAM[1024];
 572:src/sys/devices.h **** extern volatile struct FLASH_registers FLASH;
 573:src/sys/devices.h **** extern volatile struct RCC_registers RCC;
 574:src/sys/devices.h **** extern volatile struct CRC_registers CRC;
 575:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOH;
 576:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOG;
 577:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOF;
 578:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOE;
 579:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOD;
 580:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOC;
 581:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOB;
 582:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOA;
 583:src/sys/devices.h **** 
 584:src/sys/devices.h **** extern volatile struct SAI_registers SAI2;
 585:src/sys/devices.h **** extern volatile struct SAI_registers SAI1;
 586:src/sys/devices.h **** 
 587:src/sys/devices.h **** extern volatile struct TIMx_registers TIM11;
 588:src/sys/devices.h **** extern volatile struct TIMx_registers TIM10;
 589:src/sys/devices.h **** extern volatile struct TIMx_registers TIM9;
 590:src/sys/devices.h **** extern volatile struct EXTI_registers EXTI;
 591:src/sys/devices.h **** extern volatile struct SYSCFG_registers SYSCFG;
 592:src/sys/devices.h **** extern volatile struct SPI_registers SPI4;
 593:src/sys/devices.h **** extern volatile struct SPI_registers SPI1;
 594:src/sys/devices.h **** extern volatile struct SDIO_registers SDMMC;
 595:src/sys/devices.h **** extern volatile struct ADCx_registers ADC1;
 596:src/sys/devices.h **** extern volatile struct ADCx_registers ADC2;
 597:src/sys/devices.h **** extern volatile struct ADCx_registers ADC3;
 598:src/sys/devices.h **** extern volatile struct ADC_common_registers ADC_common;
 599:src/sys/devices.h **** extern volatile struct USART_registers USART6;
 600:src/sys/devices.h **** extern volatile struct USART_registers USART1;
 601:src/sys/devices.h **** extern volatile struct TIMx_registers TIM8;
 602:src/sys/devices.h **** extern volatile struct TIMx_registers TIM1;
 603:src/sys/devices.h **** 
 604:src/sys/devices.h **** extern volatile struct DAC_registers DAC;
 605:src/sys/devices.h **** extern volatile struct PWR_registers PWR;
 606:src/sys/devices.h **** extern volatile struct HDMI_CEC_registers HDMI_CEC;
 607:src/sys/devices.h **** extern volatile struct bxCAN_registers CAN2;
 608:src/sys/devices.h **** extern volatile struct bxCAN_registers CAN1;
 609:src/sys/devices.h **** extern volatile struct FMPI2C_registers FMPI2C1;
 610:src/sys/devices.h **** extern volatile struct I2C_registers I2C3;
 611:src/sys/devices.h **** extern volatile struct I2C_registers I2C2;
 612:src/sys/devices.h **** extern volatile struct I2C_registers I2C1;
 613:src/sys/devices.h **** extern volatile struct USART_registers UART5;
 614:src/sys/devices.h **** extern volatile struct USART_registers UART4;
 615:src/sys/devices.h **** extern volatile struct USART_registers USART3;
 616:src/sys/devices.h **** extern volatile struct USART_registers USART2;
 617:src/sys/devices.h **** extern volatile struct SPDIF_RX_registers SPDIF_RX;
 618:src/sys/devices.h **** extern volatile struct SPI_I2S_registers SPI3_I2S3;
 619:src/sys/devices.h **** extern volatile struct SPI_I2S_registers SPI2_I2S2;
 620:src/sys/devices.h **** extern volatile struct IWDG_registers IWDG;
 621:src/sys/devices.h **** extern volatile struct WWDG_registers WWDG;
 622:src/sys/devices.h **** extern volatile struct RTC_registers RTC_BKP;
 623:src/sys/devices.h **** extern volatile struct TIMx_registers TIM14;
 624:src/sys/devices.h **** extern volatile struct TIMx_registers TIM13;
 625:src/sys/devices.h **** extern volatile struct TIMx_registers TIM12;
 626:src/sys/devices.h **** extern volatile struct TIMx_registers TIM7;
 627:src/sys/devices.h **** extern volatile struct TIMx_registers TIM6;
 628:src/sys/devices.h **** extern volatile struct TIMx_registers TIM5;
 629:src/sys/devices.h **** extern volatile struct TIMx_registers TIM4;
 630:src/sys/devices.h **** extern volatile struct TIMx_registers TIM3;
 631:src/sys/devices.h **** extern volatile struct TIMx_registers TIM2;
 632:src/sys/devices.h **** 
 633:src/sys/devices.h **** #define __set_bit(_w,_i) ((_w)|=(1<<(_i)))
 634:src/sys/devices.h **** #define __clr_bit(_w,_i) ((_w) &= ~(1<<(_i)))
 635:src/sys/devices.h **** #define __really_inline__ static inline __attribute__((always_inline)) 
 636:src/sys/devices.h **** #define __sync __DSB
 637:src/sys/devices.h **** 
 638:src/sys/devices.h **** #define __declare_device_control(name,bus,bus_bit) \
 639:src/sys/devices.h ****   void __really_inline__ enable_##name() { \
 640:src/sys/devices.h ****     __set_bit(RCC.bus##ENR,bus_bit); __sync(); } \
 641:src/sys/devices.h ****   void __really_inline__ low_power_enable_##name() { \
 642:src/sys/devices.h ****     __set_bit(RCC.bus##LPENR,bus_bit); __sync(); } \
 643:src/sys/devices.h ****   void __really_inline__ disable_##name() { \
 644:src/sys/devices.h ****     __clr_bit(RCC.bus##ENR,bus_bit); __sync(); } \
 645:src/sys/devices.h ****   void __really_inline__ low_power_disable_## name() { \
 646:src/sys/devices.h ****     __clr_bit(RCC.bus##LPENR,bus_bit); __sync(); } \
 647:src/sys/devices.h ****   void __really_inline__ reset_##name() { \
 648:src/sys/devices.h ****     __set_bit(RCC.bus##RSTR,bus_bit); __sync(); } \
 649:src/sys/devices.h **** \
 650:src/sys/devices.h **** 
 651:src/sys/devices.h **** /* __declare_device_control(FMC,AHB3,0) FMC not available in LQFP64 package */
 652:src/sys/devices.h **** __declare_device_control(QUADSPI,AHB3,1)
 653:src/sys/devices.h **** 
 654:src/sys/devices.h **** __declare_device_control(DCMI,AHB2,0)
 655:src/sys/devices.h **** __declare_device_control(USB_OTG_FS,AHB2,7)
 656:src/sys/devices.h **** 
 657:src/sys/devices.h **** __declare_device_control(USB_OTG_HS,AHB1,29)
 658:src/sys/devices.h **** __declare_device_control(DMA2,AHB1,22)
 659:src/sys/devices.h **** __declare_device_control(DMA1,AHB1,21)
 660:src/sys/devices.h **** __declare_device_control(CRC,AHB1,12)
 661:src/sys/devices.h **** __declare_device_control(GPIOH,AHB1,7)
 662:src/sys/devices.h **** __declare_device_control(GPIOG,AHB1,6)
 663:src/sys/devices.h **** __declare_device_control(GPIOF,AHB1,5)
 664:src/sys/devices.h **** __declare_device_control(GPIOE,AHB1,4)
 665:src/sys/devices.h **** __declare_device_control(GPIOD,AHB1,3)
 666:src/sys/devices.h **** __declare_device_control(GPIOC,AHB1,2)
 667:src/sys/devices.h **** __declare_device_control(GPIOB,AHB1,1)
 668:src/sys/devices.h **** __declare_device_control(GPIOA,AHB1,0)
 669:src/sys/devices.h **** 
 670:src/sys/devices.h **** __declare_device_control(SAI2,APB2,23)
 671:src/sys/devices.h **** __declare_device_control(SAI1,APB2,22)
 672:src/sys/devices.h **** 
 673:src/sys/devices.h **** __declare_device_control(TIM11,APB2,18)
 674:src/sys/devices.h **** __declare_device_control(TIM10,APB2,17)
 675:src/sys/devices.h **** __declare_device_control(TIM9,APB2,16)
 676:src/sys/devices.h **** __declare_device_control(SYSCFG,APB2,14)
 677:src/sys/devices.h **** __declare_device_control(SPI4,APB2,13)
 678:src/sys/devices.h **** __declare_device_control(SPI1,APB2,12)
 679:src/sys/devices.h **** __declare_device_control(SDMMC,APB2,11)
 680:src/sys/devices.h **** __declare_device_control(ADC,APB2,8)
 681:src/sys/devices.h **** __declare_device_control(ADC1,APB2,8)
 682:src/sys/devices.h **** __declare_device_control(ADC2,APB2,8)
 683:src/sys/devices.h **** __declare_device_control(ADC3,APB2,8)
 684:src/sys/devices.h **** __declare_device_control(USART6,APB2,5)
 685:src/sys/devices.h **** __declare_device_control(USART1,APB2,4)
 686:src/sys/devices.h **** __declare_device_control(TIM8,APB2,1)
 687:src/sys/devices.h **** __declare_device_control(TIM1,APB2,0)
 688:src/sys/devices.h **** 
 689:src/sys/devices.h **** __declare_device_control(DAC,APB1,29)
 690:src/sys/devices.h **** __declare_device_control(PWR,APB1,28)
  37              		.loc 2 690 1 view .LVU2
  38              	.LBB25:
  39              		.loc 2 690 1 view .LVU3
  40 0000 074A     		ldr	r2, .L2
  41 0002 136C     		ldr	r3, [r2, #64]
  42 0004 43F08053 		orr	r3, r3, #268435456
  43 0008 1364     		str	r3, [r2, #64]
  44              		.loc 2 690 1 view .LVU4
  45              	.LBB26:
  46              	.LBI26:
  47              		.file 3 "src/sys/cmsis_gcc.h"
   1:src/sys/cmsis_gcc.h **** /**************************************************************************//**
   2:src/sys/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:src/sys/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:src/sys/cmsis_gcc.h ****  * @version  V4.30
   5:src/sys/cmsis_gcc.h ****  * @date     20. October 2015
   6:src/sys/cmsis_gcc.h ****  ******************************************************************************/
   7:src/sys/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:src/sys/cmsis_gcc.h **** 
   9:src/sys/cmsis_gcc.h ****    All rights reserved.
  10:src/sys/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:src/sys/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:src/sys/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:src/sys/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:src/sys/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:src/sys/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:src/sys/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:src/sys/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:src/sys/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:src/sys/cmsis_gcc.h ****      specific prior written permission.
  20:src/sys/cmsis_gcc.h ****    *
  21:src/sys/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:src/sys/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:src/sys/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:src/sys/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:src/sys/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:src/sys/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:src/sys/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:src/sys/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:src/sys/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:src/sys/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:src/sys/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:src/sys/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:src/sys/cmsis_gcc.h **** 
  34:src/sys/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  35:src/sys/cmsis_gcc.h **** #define __CMSIS_GCC_H
  36:src/sys/cmsis_gcc.h **** 
  37:src/sys/cmsis_gcc.h **** /* ignore some GCC warnings */
  38:src/sys/cmsis_gcc.h **** #if defined ( __GNUC__ )
  39:src/sys/cmsis_gcc.h **** #pragma GCC diagnostic push
  40:src/sys/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  41:src/sys/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  42:src/sys/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  43:src/sys/cmsis_gcc.h **** #endif
  44:src/sys/cmsis_gcc.h **** 
  45:src/sys/cmsis_gcc.h **** 
  46:src/sys/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  47:src/sys/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  48:src/sys/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  49:src/sys/cmsis_gcc.h ****   @{
  50:src/sys/cmsis_gcc.h ****  */
  51:src/sys/cmsis_gcc.h **** 
  52:src/sys/cmsis_gcc.h **** /**
  53:src/sys/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  54:src/sys/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  55:src/sys/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  56:src/sys/cmsis_gcc.h ****  */
  57:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  58:src/sys/cmsis_gcc.h **** {
  59:src/sys/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  60:src/sys/cmsis_gcc.h **** }
  61:src/sys/cmsis_gcc.h **** 
  62:src/sys/cmsis_gcc.h **** 
  63:src/sys/cmsis_gcc.h **** /**
  64:src/sys/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  65:src/sys/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  66:src/sys/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  67:src/sys/cmsis_gcc.h ****  */
  68:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  69:src/sys/cmsis_gcc.h **** {
  70:src/sys/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  71:src/sys/cmsis_gcc.h **** }
  72:src/sys/cmsis_gcc.h **** 
  73:src/sys/cmsis_gcc.h **** 
  74:src/sys/cmsis_gcc.h **** /**
  75:src/sys/cmsis_gcc.h ****   \brief   Get Control Register
  76:src/sys/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  77:src/sys/cmsis_gcc.h ****   \return               Control Register value
  78:src/sys/cmsis_gcc.h ****  */
  79:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  80:src/sys/cmsis_gcc.h **** {
  81:src/sys/cmsis_gcc.h ****   uint32_t result;
  82:src/sys/cmsis_gcc.h **** 
  83:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  84:src/sys/cmsis_gcc.h ****   return(result);
  85:src/sys/cmsis_gcc.h **** }
  86:src/sys/cmsis_gcc.h **** 
  87:src/sys/cmsis_gcc.h **** 
  88:src/sys/cmsis_gcc.h **** /**
  89:src/sys/cmsis_gcc.h ****   \brief   Set Control Register
  90:src/sys/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  91:src/sys/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  92:src/sys/cmsis_gcc.h ****  */
  93:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  94:src/sys/cmsis_gcc.h **** {
  95:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  96:src/sys/cmsis_gcc.h **** }
  97:src/sys/cmsis_gcc.h **** 
  98:src/sys/cmsis_gcc.h **** 
  99:src/sys/cmsis_gcc.h **** /**
 100:src/sys/cmsis_gcc.h ****   \brief   Get IPSR Register
 101:src/sys/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 102:src/sys/cmsis_gcc.h ****   \return               IPSR Register value
 103:src/sys/cmsis_gcc.h ****  */
 104:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 105:src/sys/cmsis_gcc.h **** {
 106:src/sys/cmsis_gcc.h ****   uint32_t result;
 107:src/sys/cmsis_gcc.h **** 
 108:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 109:src/sys/cmsis_gcc.h ****   return(result);
 110:src/sys/cmsis_gcc.h **** }
 111:src/sys/cmsis_gcc.h **** 
 112:src/sys/cmsis_gcc.h **** 
 113:src/sys/cmsis_gcc.h **** /**
 114:src/sys/cmsis_gcc.h ****   \brief   Get APSR Register
 115:src/sys/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 116:src/sys/cmsis_gcc.h ****   \return               APSR Register value
 117:src/sys/cmsis_gcc.h ****  */
 118:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 119:src/sys/cmsis_gcc.h **** {
 120:src/sys/cmsis_gcc.h ****   uint32_t result;
 121:src/sys/cmsis_gcc.h **** 
 122:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 123:src/sys/cmsis_gcc.h ****   return(result);
 124:src/sys/cmsis_gcc.h **** }
 125:src/sys/cmsis_gcc.h **** 
 126:src/sys/cmsis_gcc.h **** 
 127:src/sys/cmsis_gcc.h **** /**
 128:src/sys/cmsis_gcc.h ****   \brief   Get xPSR Register
 129:src/sys/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 130:src/sys/cmsis_gcc.h **** 
 131:src/sys/cmsis_gcc.h ****     \return               xPSR Register value
 132:src/sys/cmsis_gcc.h ****  */
 133:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 134:src/sys/cmsis_gcc.h **** {
 135:src/sys/cmsis_gcc.h ****   uint32_t result;
 136:src/sys/cmsis_gcc.h **** 
 137:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 138:src/sys/cmsis_gcc.h ****   return(result);
 139:src/sys/cmsis_gcc.h **** }
 140:src/sys/cmsis_gcc.h **** 
 141:src/sys/cmsis_gcc.h **** 
 142:src/sys/cmsis_gcc.h **** /**
 143:src/sys/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 144:src/sys/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 145:src/sys/cmsis_gcc.h ****   \return               PSP Register value
 146:src/sys/cmsis_gcc.h ****  */
 147:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 148:src/sys/cmsis_gcc.h **** {
 149:src/sys/cmsis_gcc.h ****   register uint32_t result;
 150:src/sys/cmsis_gcc.h **** 
 151:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 152:src/sys/cmsis_gcc.h ****   return(result);
 153:src/sys/cmsis_gcc.h **** }
 154:src/sys/cmsis_gcc.h **** 
 155:src/sys/cmsis_gcc.h **** 
 156:src/sys/cmsis_gcc.h **** /**
 157:src/sys/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 158:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 159:src/sys/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 160:src/sys/cmsis_gcc.h ****  */
 161:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 162:src/sys/cmsis_gcc.h **** {
 163:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 164:src/sys/cmsis_gcc.h **** }
 165:src/sys/cmsis_gcc.h **** 
 166:src/sys/cmsis_gcc.h **** 
 167:src/sys/cmsis_gcc.h **** /**
 168:src/sys/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 169:src/sys/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 170:src/sys/cmsis_gcc.h ****   \return               MSP Register value
 171:src/sys/cmsis_gcc.h ****  */
 172:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 173:src/sys/cmsis_gcc.h **** {
 174:src/sys/cmsis_gcc.h ****   register uint32_t result;
 175:src/sys/cmsis_gcc.h **** 
 176:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 177:src/sys/cmsis_gcc.h ****   return(result);
 178:src/sys/cmsis_gcc.h **** }
 179:src/sys/cmsis_gcc.h **** 
 180:src/sys/cmsis_gcc.h **** 
 181:src/sys/cmsis_gcc.h **** /**
 182:src/sys/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 183:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 184:src/sys/cmsis_gcc.h **** 
 185:src/sys/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 186:src/sys/cmsis_gcc.h ****  */
 187:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 188:src/sys/cmsis_gcc.h **** {
 189:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 190:src/sys/cmsis_gcc.h **** }
 191:src/sys/cmsis_gcc.h **** 
 192:src/sys/cmsis_gcc.h **** 
 193:src/sys/cmsis_gcc.h **** /**
 194:src/sys/cmsis_gcc.h ****   \brief   Get Priority Mask
 195:src/sys/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 196:src/sys/cmsis_gcc.h ****   \return               Priority Mask value
 197:src/sys/cmsis_gcc.h ****  */
 198:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 199:src/sys/cmsis_gcc.h **** {
 200:src/sys/cmsis_gcc.h ****   uint32_t result;
 201:src/sys/cmsis_gcc.h **** 
 202:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 203:src/sys/cmsis_gcc.h ****   return(result);
 204:src/sys/cmsis_gcc.h **** }
 205:src/sys/cmsis_gcc.h **** 
 206:src/sys/cmsis_gcc.h **** 
 207:src/sys/cmsis_gcc.h **** /**
 208:src/sys/cmsis_gcc.h ****   \brief   Set Priority Mask
 209:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 210:src/sys/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 211:src/sys/cmsis_gcc.h ****  */
 212:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 213:src/sys/cmsis_gcc.h **** {
 214:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 215:src/sys/cmsis_gcc.h **** }
 216:src/sys/cmsis_gcc.h **** 
 217:src/sys/cmsis_gcc.h **** 
 218:src/sys/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 219:src/sys/cmsis_gcc.h **** 
 220:src/sys/cmsis_gcc.h **** /**
 221:src/sys/cmsis_gcc.h ****   \brief   Enable FIQ
 222:src/sys/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 223:src/sys/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 224:src/sys/cmsis_gcc.h ****  */
 225:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 226:src/sys/cmsis_gcc.h **** {
 227:src/sys/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 228:src/sys/cmsis_gcc.h **** }
 229:src/sys/cmsis_gcc.h **** 
 230:src/sys/cmsis_gcc.h **** 
 231:src/sys/cmsis_gcc.h **** /**
 232:src/sys/cmsis_gcc.h ****   \brief   Disable FIQ
 233:src/sys/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 234:src/sys/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 235:src/sys/cmsis_gcc.h ****  */
 236:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 237:src/sys/cmsis_gcc.h **** {
 238:src/sys/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 239:src/sys/cmsis_gcc.h **** }
 240:src/sys/cmsis_gcc.h **** 
 241:src/sys/cmsis_gcc.h **** 
 242:src/sys/cmsis_gcc.h **** /**
 243:src/sys/cmsis_gcc.h ****   \brief   Get Base Priority
 244:src/sys/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 245:src/sys/cmsis_gcc.h ****   \return               Base Priority register value
 246:src/sys/cmsis_gcc.h ****  */
 247:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 248:src/sys/cmsis_gcc.h **** {
 249:src/sys/cmsis_gcc.h ****   uint32_t result;
 250:src/sys/cmsis_gcc.h **** 
 251:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 252:src/sys/cmsis_gcc.h ****   return(result);
 253:src/sys/cmsis_gcc.h **** }
 254:src/sys/cmsis_gcc.h **** 
 255:src/sys/cmsis_gcc.h **** 
 256:src/sys/cmsis_gcc.h **** /**
 257:src/sys/cmsis_gcc.h ****   \brief   Set Base Priority
 258:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 259:src/sys/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 260:src/sys/cmsis_gcc.h ****  */
 261:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 262:src/sys/cmsis_gcc.h **** {
 263:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 264:src/sys/cmsis_gcc.h **** }
 265:src/sys/cmsis_gcc.h **** 
 266:src/sys/cmsis_gcc.h **** 
 267:src/sys/cmsis_gcc.h **** /**
 268:src/sys/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 269:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 270:src/sys/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 271:src/sys/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 272:src/sys/cmsis_gcc.h ****  */
 273:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 274:src/sys/cmsis_gcc.h **** {
 275:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 276:src/sys/cmsis_gcc.h **** }
 277:src/sys/cmsis_gcc.h **** 
 278:src/sys/cmsis_gcc.h **** 
 279:src/sys/cmsis_gcc.h **** /**
 280:src/sys/cmsis_gcc.h ****   \brief   Get Fault Mask
 281:src/sys/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 282:src/sys/cmsis_gcc.h ****   \return               Fault Mask register value
 283:src/sys/cmsis_gcc.h ****  */
 284:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 285:src/sys/cmsis_gcc.h **** {
 286:src/sys/cmsis_gcc.h ****   uint32_t result;
 287:src/sys/cmsis_gcc.h **** 
 288:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 289:src/sys/cmsis_gcc.h ****   return(result);
 290:src/sys/cmsis_gcc.h **** }
 291:src/sys/cmsis_gcc.h **** 
 292:src/sys/cmsis_gcc.h **** 
 293:src/sys/cmsis_gcc.h **** /**
 294:src/sys/cmsis_gcc.h ****   \brief   Set Fault Mask
 295:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 296:src/sys/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 297:src/sys/cmsis_gcc.h ****  */
 298:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 299:src/sys/cmsis_gcc.h **** {
 300:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 301:src/sys/cmsis_gcc.h **** }
 302:src/sys/cmsis_gcc.h **** 
 303:src/sys/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 304:src/sys/cmsis_gcc.h **** 
 305:src/sys/cmsis_gcc.h **** 
 306:src/sys/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 307:src/sys/cmsis_gcc.h **** 
 308:src/sys/cmsis_gcc.h **** /**
 309:src/sys/cmsis_gcc.h ****   \brief   Get FPSCR
 310:src/sys/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 311:src/sys/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 312:src/sys/cmsis_gcc.h ****  */
 313:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 314:src/sys/cmsis_gcc.h **** {
 315:src/sys/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 316:src/sys/cmsis_gcc.h ****   uint32_t result;
 317:src/sys/cmsis_gcc.h **** 
 318:src/sys/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 319:src/sys/cmsis_gcc.h ****   __ASM volatile ("");
 320:src/sys/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 321:src/sys/cmsis_gcc.h ****   __ASM volatile ("");
 322:src/sys/cmsis_gcc.h ****   return(result);
 323:src/sys/cmsis_gcc.h **** #else
 324:src/sys/cmsis_gcc.h ****    return(0);
 325:src/sys/cmsis_gcc.h **** #endif
 326:src/sys/cmsis_gcc.h **** }
 327:src/sys/cmsis_gcc.h **** 
 328:src/sys/cmsis_gcc.h **** 
 329:src/sys/cmsis_gcc.h **** /**
 330:src/sys/cmsis_gcc.h ****   \brief   Set FPSCR
 331:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 332:src/sys/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 333:src/sys/cmsis_gcc.h ****  */
 334:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 335:src/sys/cmsis_gcc.h **** {
 336:src/sys/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 337:src/sys/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 338:src/sys/cmsis_gcc.h ****   __ASM volatile ("");
 339:src/sys/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 340:src/sys/cmsis_gcc.h ****   __ASM volatile ("");
 341:src/sys/cmsis_gcc.h **** #endif
 342:src/sys/cmsis_gcc.h **** }
 343:src/sys/cmsis_gcc.h **** 
 344:src/sys/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 345:src/sys/cmsis_gcc.h **** 
 346:src/sys/cmsis_gcc.h **** 
 347:src/sys/cmsis_gcc.h **** 
 348:src/sys/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 349:src/sys/cmsis_gcc.h **** 
 350:src/sys/cmsis_gcc.h **** 
 351:src/sys/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 352:src/sys/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 353:src/sys/cmsis_gcc.h ****   Access to dedicated instructions
 354:src/sys/cmsis_gcc.h ****   @{
 355:src/sys/cmsis_gcc.h **** */
 356:src/sys/cmsis_gcc.h **** 
 357:src/sys/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 358:src/sys/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 359:src/sys/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 360:src/sys/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 361:src/sys/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 362:src/sys/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 363:src/sys/cmsis_gcc.h **** #else
 364:src/sys/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 365:src/sys/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 366:src/sys/cmsis_gcc.h **** #endif
 367:src/sys/cmsis_gcc.h **** 
 368:src/sys/cmsis_gcc.h **** /**
 369:src/sys/cmsis_gcc.h ****   \brief   No Operation
 370:src/sys/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 371:src/sys/cmsis_gcc.h ****  */
 372:src/sys/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 373:src/sys/cmsis_gcc.h **** {
 374:src/sys/cmsis_gcc.h ****   __ASM volatile ("nop");
 375:src/sys/cmsis_gcc.h **** }
 376:src/sys/cmsis_gcc.h **** 
 377:src/sys/cmsis_gcc.h **** 
 378:src/sys/cmsis_gcc.h **** /**
 379:src/sys/cmsis_gcc.h ****   \brief   Wait For Interrupt
 380:src/sys/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 381:src/sys/cmsis_gcc.h ****  */
 382:src/sys/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 383:src/sys/cmsis_gcc.h **** {
 384:src/sys/cmsis_gcc.h ****   __ASM volatile ("wfi");
 385:src/sys/cmsis_gcc.h **** }
 386:src/sys/cmsis_gcc.h **** 
 387:src/sys/cmsis_gcc.h **** 
 388:src/sys/cmsis_gcc.h **** /**
 389:src/sys/cmsis_gcc.h ****   \brief   Wait For Event
 390:src/sys/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 391:src/sys/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 392:src/sys/cmsis_gcc.h ****  */
 393:src/sys/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 394:src/sys/cmsis_gcc.h **** {
 395:src/sys/cmsis_gcc.h ****   __ASM volatile ("wfe");
 396:src/sys/cmsis_gcc.h **** }
 397:src/sys/cmsis_gcc.h **** 
 398:src/sys/cmsis_gcc.h **** 
 399:src/sys/cmsis_gcc.h **** /**
 400:src/sys/cmsis_gcc.h ****   \brief   Send Event
 401:src/sys/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 402:src/sys/cmsis_gcc.h ****  */
 403:src/sys/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 404:src/sys/cmsis_gcc.h **** {
 405:src/sys/cmsis_gcc.h ****   __ASM volatile ("sev");
 406:src/sys/cmsis_gcc.h **** }
 407:src/sys/cmsis_gcc.h **** 
 408:src/sys/cmsis_gcc.h **** 
 409:src/sys/cmsis_gcc.h **** /**
 410:src/sys/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 411:src/sys/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 412:src/sys/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 413:src/sys/cmsis_gcc.h ****            after the instruction has been completed.
 414:src/sys/cmsis_gcc.h ****  */
 415:src/sys/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 416:src/sys/cmsis_gcc.h **** {
 417:src/sys/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 418:src/sys/cmsis_gcc.h **** }
 419:src/sys/cmsis_gcc.h **** 
 420:src/sys/cmsis_gcc.h **** 
 421:src/sys/cmsis_gcc.h **** /**
 422:src/sys/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 423:src/sys/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 424:src/sys/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 425:src/sys/cmsis_gcc.h ****  */
 426:src/sys/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
  48              		.loc 3 426 53 view .LVU5
  49              	.LBB27:
 427:src/sys/cmsis_gcc.h **** {
 428:src/sys/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
  50              		.loc 3 428 3 view .LVU6
  51              		.syntax unified
  52              	@ 428 "src/sys/cmsis_gcc.h" 1
  53 000a BFF34F8F 		dsb 0xF
  54              	@ 0 "" 2
  55              		.thumb
  56              		.syntax unified
  57              	.LBE27:
  58              	.LBE26:
  59              	.LBE25:
  60              	.LBE24:
   8:src/sys/power.c ****   PWR.CR = (PWR.CR & ~(3<<14)) |((scale&0x3)<<14);
  61              		.loc 1 8 3 view .LVU7
  62              		.loc 1 8 16 is_stmt 0 view .LVU8
  63 000e 054A     		ldr	r2, .L2+4
  64 0010 1368     		ldr	r3, [r2]
  65              		.loc 1 8 32 view .LVU9
  66 0012 60F38F33 		bfi	r3, r0, #14, #2
  67              		.loc 1 8 10 view .LVU10
  68 0016 1360     		str	r3, [r2]
   9:src/sys/power.c ****   __DSB();
  69              		.loc 1 9 3 is_stmt 1 view .LVU11
  70              	.LBB28:
  71              	.LBI28:
 426:src/sys/cmsis_gcc.h **** {
  72              		.loc 3 426 53 view .LVU12
  73              	.LBB29:
  74              		.loc 3 428 3 view .LVU13
  75              		.syntax unified
  76              	@ 428 "src/sys/cmsis_gcc.h" 1
  77 0018 BFF34F8F 		dsb 0xF
  78              	@ 0 "" 2
  79              		.thumb
  80              		.syntax unified
  81              	.LBE29:
  82              	.LBE28:
  10:src/sys/power.c **** }
  83              		.loc 1 10 1 is_stmt 0 view .LVU14
  84 001c 7047     		bx	lr
  85              	.L3:
  86 001e 00BF     		.align	2
  87              	.L2:
  88 0020 00000000 		.word	RCC
  89 0024 00000000 		.word	PWR
  90              		.cfi_endproc
  91              	.LFE397:
  92              		.size	set_voltage_scale, .-set_voltage_scale
  93              		.align	1
  94              		.global	get_voltage_scale
  95              		.syntax unified
  96              		.thumb
  97              		.thumb_func
  98              		.type	get_voltage_scale, %function
  99              	get_voltage_scale:
 100              	.LFB398:
  11:src/sys/power.c **** 
  12:src/sys/power.c **** VOS get_voltage_scale() {
 101              		.loc 1 12 25 is_stmt 1 view -0
 102              		.cfi_startproc
 103              		@ args = 0, pretend = 0, frame = 0
 104              		@ frame_needed = 0, uses_anonymous_args = 0
 105              		@ link register save eliminated.
  13:src/sys/power.c ****   enable_PWR();
 106              		.loc 1 13 3 view .LVU16
 107              	.LBB30:
 108              	.LBI30:
 109              		.loc 2 690 1 view .LVU17
 110              	.LBB31:
 111              		.loc 2 690 1 view .LVU18
 112 0028 054A     		ldr	r2, .L5
 113 002a 136C     		ldr	r3, [r2, #64]
 114 002c 43F08053 		orr	r3, r3, #268435456
 115 0030 1364     		str	r3, [r2, #64]
 116              		.loc 2 690 1 view .LVU19
 117              	.LBB32:
 118              	.LBI32:
 426:src/sys/cmsis_gcc.h **** {
 119              		.loc 3 426 53 view .LVU20
 120              	.LBB33:
 121              		.loc 3 428 3 view .LVU21
 122              		.syntax unified
 123              	@ 428 "src/sys/cmsis_gcc.h" 1
 124 0032 BFF34F8F 		dsb 0xF
 125              	@ 0 "" 2
 126              		.thumb
 127              		.syntax unified
 128              	.LBE33:
 129              	.LBE32:
 130              	.LBE31:
 131              	.LBE30:
  14:src/sys/power.c ****   return ((PWR.CR>>14)&0x3);
 132              		.loc 1 14 3 view .LVU22
 133              		.loc 1 14 15 is_stmt 0 view .LVU23
 134 0036 034B     		ldr	r3, .L5+4
 135 0038 1868     		ldr	r0, [r3]
  15:src/sys/power.c **** }
 136              		.loc 1 15 1 view .LVU24
 137 003a C0F38130 		ubfx	r0, r0, #14, #2
 138 003e 7047     		bx	lr
 139              	.L6:
 140              		.align	2
 141              	.L5:
 142 0040 00000000 		.word	RCC
 143 0044 00000000 		.word	PWR
 144              		.cfi_endproc
 145              	.LFE398:
 146              		.size	get_voltage_scale, .-get_voltage_scale
 147              		.align	1
 148              		.global	start_Overdrive
 149              		.syntax unified
 150              		.thumb
 151              		.thumb_func
 152              		.type	start_Overdrive, %function
 153              	start_Overdrive:
 154              	.LFB399:
  16:src/sys/power.c **** 
  17:src/sys/power.c **** void start_Overdrive() {
 155              		.loc 1 17 24 is_stmt 1 view -0
 156              		.cfi_startproc
 157              		@ args = 0, pretend = 0, frame = 0
 158              		@ frame_needed = 0, uses_anonymous_args = 0
 159              		@ link register save eliminated.
  18:src/sys/power.c ****   enable_PWR();
 160              		.loc 1 18 3 view .LVU26
 161              	.LBB34:
 162              	.LBI34:
 163              		.loc 2 690 1 view .LVU27
 164              	.LBB35:
 165              		.loc 2 690 1 view .LVU28
 166 0048 0B4A     		ldr	r2, .L14
 167 004a 136C     		ldr	r3, [r2, #64]
 168 004c 43F08053 		orr	r3, r3, #268435456
 169 0050 1364     		str	r3, [r2, #64]
 170              		.loc 2 690 1 view .LVU29
 171              	.LBB36:
 172              	.LBI36:
 426:src/sys/cmsis_gcc.h **** {
 173              		.loc 3 426 53 view .LVU30
 174              	.LBB37:
 175              		.loc 3 428 3 view .LVU31
 176              		.syntax unified
 177              	@ 428 "src/sys/cmsis_gcc.h" 1
 178 0052 BFF34F8F 		dsb 0xF
 179              	@ 0 "" 2
 180              		.thumb
 181              		.syntax unified
 182              	.LBE37:
 183              	.LBE36:
 184              	.LBE35:
 185              	.LBE34:
  19:src/sys/power.c ****   /* Start overdrive */
  20:src/sys/power.c ****   PWR.CR |= (1<<16);
 186              		.loc 1 20 3 view .LVU32
 187              		.loc 1 20 6 is_stmt 0 view .LVU33
 188 0056 094B     		ldr	r3, .L14+4
 189 0058 1A68     		ldr	r2, [r3]
 190              		.loc 1 20 10 view .LVU34
 191 005a 42F48032 		orr	r2, r2, #65536
 192 005e 1A60     		str	r2, [r3]
  21:src/sys/power.c ****   while ((PWR.CSR&(1<<16))==0);
 193              		.loc 1 21 3 is_stmt 1 view .LVU35
 194              	.L8:
 195              		.loc 1 21 27 discriminator 1 view .LVU36
 196              		.loc 1 21 14 is_stmt 0 discriminator 1 view .LVU37
 197 0060 5A68     		ldr	r2, [r3, #4]
 198              		.loc 1 21 27 discriminator 1 view .LVU38
 199 0062 D103     		lsls	r1, r2, #15
 200 0064 FCD5     		bpl	.L8
  22:src/sys/power.c ****   /* Switch to overdrive */
  23:src/sys/power.c ****   PWR.CR |= (1<<17);
 201              		.loc 1 23 3 is_stmt 1 view .LVU39
 202              		.loc 1 23 6 is_stmt 0 view .LVU40
 203 0066 1A68     		ldr	r2, [r3]
 204              		.loc 1 23 10 view .LVU41
 205 0068 42F40032 		orr	r2, r2, #131072
 206 006c 1A60     		str	r2, [r3]
  24:src/sys/power.c ****   while ((PWR.CSR&(1<<17))==0);
 207              		.loc 1 24 3 is_stmt 1 view .LVU42
 208              	.L9:
 209              		.loc 1 24 27 discriminator 1 view .LVU43
 210              		.loc 1 24 14 is_stmt 0 discriminator 1 view .LVU44
 211 006e 5A68     		ldr	r2, [r3, #4]
 212              		.loc 1 24 27 discriminator 1 view .LVU45
 213 0070 9203     		lsls	r2, r2, #14
 214 0072 FCD5     		bpl	.L9
  25:src/sys/power.c **** }
 215              		.loc 1 25 1 view .LVU46
 216 0074 7047     		bx	lr
 217              	.L15:
 218 0076 00BF     		.align	2
 219              	.L14:
 220 0078 00000000 		.word	RCC
 221 007c 00000000 		.word	PWR
 222              		.cfi_endproc
 223              	.LFE399:
 224              		.size	start_Overdrive, .-start_Overdrive
 225              		.align	1
 226              		.global	stop_Overdrive
 227              		.syntax unified
 228              		.thumb
 229              		.thumb_func
 230              		.type	stop_Overdrive, %function
 231              	stop_Overdrive:
 232              	.LFB400:
  26:src/sys/power.c **** 
  27:src/sys/power.c **** void stop_Overdrive() {
 233              		.loc 1 27 23 is_stmt 1 view -0
 234              		.cfi_startproc
 235              		@ args = 0, pretend = 0, frame = 0
 236              		@ frame_needed = 0, uses_anonymous_args = 0
 237              		@ link register save eliminated.
  28:src/sys/power.c ****   enable_PWR();
 238              		.loc 1 28 3 view .LVU48
 239              	.LBB38:
 240              	.LBI38:
 241              		.loc 2 690 1 view .LVU49
 242              	.LBB39:
 243              		.loc 2 690 1 view .LVU50
 244 0080 074A     		ldr	r2, .L17
 245 0082 136C     		ldr	r3, [r2, #64]
 246 0084 43F08053 		orr	r3, r3, #268435456
 247 0088 1364     		str	r3, [r2, #64]
 248              		.loc 2 690 1 view .LVU51
 249              	.LBB40:
 250              	.LBI40:
 426:src/sys/cmsis_gcc.h **** {
 251              		.loc 3 426 53 view .LVU52
 252              	.LBB41:
 253              		.loc 3 428 3 view .LVU53
 254              		.syntax unified
 255              	@ 428 "src/sys/cmsis_gcc.h" 1
 256 008a BFF34F8F 		dsb 0xF
 257              	@ 0 "" 2
 258              		.thumb
 259              		.syntax unified
 260              	.LBE41:
 261              	.LBE40:
 262              	.LBE39:
 263              	.LBE38:
  29:src/sys/power.c ****   /* Stop overdrive */
  30:src/sys/power.c ****   PWR.CR &= ~((1<<16)|(1<<17));
 264              		.loc 1 30 3 view .LVU54
 265              		.loc 1 30 6 is_stmt 0 view .LVU55
 266 008e 054A     		ldr	r2, .L17+4
 267 0090 1368     		ldr	r3, [r2]
 268              		.loc 1 30 10 view .LVU56
 269 0092 23F44033 		bic	r3, r3, #196608
 270 0096 1360     		str	r3, [r2]
  31:src/sys/power.c ****   __DSB();
 271              		.loc 1 31 3 is_stmt 1 view .LVU57
 272              	.LBB42:
 273              	.LBI42:
 426:src/sys/cmsis_gcc.h **** {
 274              		.loc 3 426 53 view .LVU58
 275              	.LBB43:
 276              		.loc 3 428 3 view .LVU59
 277              		.syntax unified
 278              	@ 428 "src/sys/cmsis_gcc.h" 1
 279 0098 BFF34F8F 		dsb 0xF
 280              	@ 0 "" 2
 281              		.thumb
 282              		.syntax unified
 283              	.LBE43:
 284              	.LBE42:
  32:src/sys/power.c **** }
 285              		.loc 1 32 1 is_stmt 0 view .LVU60
 286 009c 7047     		bx	lr
 287              	.L18:
 288 009e 00BF     		.align	2
 289              	.L17:
 290 00a0 00000000 		.word	RCC
 291 00a4 00000000 		.word	PWR
 292              		.cfi_endproc
 293              	.LFE400:
 294              		.size	stop_Overdrive, .-stop_Overdrive
 295              	.Letext0:
 296              		.file 4 "src/sys/power.h"
 297              		.file 5 "/usr/lib/gcc/arm-none-eabi/13.2.1/include/stdint.h"
 298              		.section	.debug_info,"",%progbits
 299              	.Ldebug_info0:
 300 0000 F7030000 		.4byte	0x3f7
 301 0004 0500     		.2byte	0x5
 302 0006 01       		.byte	0x1
 303 0007 04       		.byte	0x4
 304 0008 00000000 		.4byte	.Ldebug_abbrev0
 305 000c 0D       		.uleb128 0xd
 306 000d 78010000 		.4byte	.LASF54
 307 0011 0C       		.byte	0xc
 308 0012 85000000 		.4byte	.LASF55
 309 0016 62020000 		.4byte	.LASF56
 310 001a 00000000 		.4byte	.Ltext0
 311 001e A8000000 		.4byte	.Letext0-.Ltext0
 312 0022 00000000 		.4byte	.Ldebug_line0
 313 0026 0E       		.uleb128 0xe
 314 0027 07       		.byte	0x7
 315 0028 01       		.byte	0x1
 316 0029 47000000 		.4byte	0x47
 317 002d 04       		.byte	0x4
 318 002e 02       		.byte	0x2
 319 002f 0E       		.byte	0xe
 320 0030 47000000 		.4byte	0x47
 321 0034 05       		.uleb128 0x5
 322 0035 19000000 		.4byte	.LASF0
 323 0039 03       		.byte	0x3
 324 003a 05       		.uleb128 0x5
 325 003b 20000000 		.4byte	.LASF1
 326 003f 02       		.byte	0x2
 327 0040 05       		.uleb128 0x5
 328 0041 27000000 		.4byte	.LASF2
 329 0045 01       		.byte	0x1
 330 0046 00       		.byte	0
 331 0047 02       		.uleb128 0x2
 332 0048 01       		.byte	0x1
 333 0049 08       		.byte	0x8
 334 004a 11010000 		.4byte	.LASF3
 335 004e 0F       		.uleb128 0xf
 336 004f 564F5300 		.ascii	"VOS\000"
 337 0053 04       		.byte	0x4
 338 0054 02       		.byte	0x2
 339 0055 2B       		.byte	0x2b
 340 0056 26000000 		.4byte	0x26
 341 005a 02       		.uleb128 0x2
 342 005b 01       		.byte	0x1
 343 005c 06       		.byte	0x6
 344 005d 2E000000 		.4byte	.LASF4
 345 0061 02       		.uleb128 0x2
 346 0062 02       		.byte	0x2
 347 0063 05       		.byte	0x5
 348 0064 3A000000 		.4byte	.LASF5
 349 0068 02       		.uleb128 0x2
 350 0069 04       		.byte	0x4
 351 006a 05       		.byte	0x5
 352 006b F6000000 		.4byte	.LASF6
 353 006f 02       		.uleb128 0x2
 354 0070 08       		.byte	0x8
 355 0071 05       		.byte	0x5
 356 0072 D8000000 		.4byte	.LASF7
 357 0076 02       		.uleb128 0x2
 358 0077 02       		.byte	0x2
 359 0078 07       		.byte	0x7
 360 0079 40020000 		.4byte	.LASF8
 361 007d 10       		.uleb128 0x10
 362 007e 53010000 		.4byte	.LASF9
 363 0082 05       		.byte	0x5
 364 0083 34       		.byte	0x34
 365 0084 19       		.byte	0x19
 366 0085 89000000 		.4byte	0x89
 367 0089 02       		.uleb128 0x2
 368 008a 04       		.byte	0x4
 369 008b 07       		.byte	0x7
 370 008c C3020000 		.4byte	.LASF10
 371 0090 02       		.uleb128 0x2
 372 0091 08       		.byte	0x8
 373 0092 07       		.byte	0x7
 374 0093 3C010000 		.4byte	.LASF11
 375 0097 11       		.uleb128 0x11
 376 0098 04       		.byte	0x4
 377 0099 05       		.byte	0x5
 378 009a 696E7400 		.ascii	"int\000"
 379 009e 02       		.uleb128 0x2
 380 009f 04       		.byte	0x4
 381 00a0 07       		.byte	0x7
 382 00a1 62010000 		.4byte	.LASF12
 383 00a5 06       		.uleb128 0x6
 384 00a6 D5020000 		.4byte	.LASF13
 385 00aa 08       		.byte	0x8
 386 00ab 62       		.byte	0x62
 387 00ac C6000000 		.4byte	0xc6
 388 00b0 03       		.uleb128 0x3
 389 00b1 435200   		.ascii	"CR\000"
 390 00b4 63       		.byte	0x63
 391 00b5 7D000000 		.4byte	0x7d
 392 00b9 00       		.byte	0
 393 00ba 03       		.uleb128 0x3
 394 00bb 43535200 		.ascii	"CSR\000"
 395 00bf 64       		.byte	0x64
 396 00c0 7D000000 		.4byte	0x7d
 397 00c4 04       		.byte	0x4
 398 00c5 00       		.byte	0
 399 00c6 07       		.uleb128 0x7
 400 00c7 A5000000 		.4byte	0xa5
 401 00cb 06       		.uleb128 0x6
 402 00cc 11020000 		.4byte	.LASF14
 403 00d0 98       		.byte	0x98
 404 00d1 68       		.byte	0x68
 405 00d2 9B020000 		.4byte	0x29b
 406 00d6 03       		.uleb128 0x3
 407 00d7 435200   		.ascii	"CR\000"
 408 00da 69       		.byte	0x69
 409 00db 7D000000 		.4byte	0x7d
 410 00df 00       		.byte	0
 411 00e0 01       		.uleb128 0x1
 412 00e1 1F020000 		.4byte	.LASF15
 413 00e5 6A       		.byte	0x6a
 414 00e6 0C       		.byte	0xc
 415 00e7 7D000000 		.4byte	0x7d
 416 00eb 04       		.byte	0x4
 417 00ec 01       		.uleb128 0x1
 418 00ed 95000000 		.4byte	.LASF16
 419 00f1 6B       		.byte	0x6b
 420 00f2 0C       		.byte	0xc
 421 00f3 7D000000 		.4byte	0x7d
 422 00f7 08       		.byte	0x8
 423 00f8 03       		.uleb128 0x3
 424 00f9 43495200 		.ascii	"CIR\000"
 425 00fd 6C       		.byte	0x6c
 426 00fe 7D000000 		.4byte	0x7d
 427 0102 0C       		.byte	0xc
 428 0103 01       		.uleb128 0x1
 429 0104 14030000 		.4byte	.LASF17
 430 0108 6D       		.byte	0x6d
 431 0109 0C       		.byte	0xc
 432 010a 7D000000 		.4byte	0x7d
 433 010e 10       		.byte	0x10
 434 010f 01       		.uleb128 0x1
 435 0110 6F010000 		.4byte	.LASF18
 436 0114 6E       		.byte	0x6e
 437 0115 0C       		.byte	0xc
 438 0116 7D000000 		.4byte	0x7d
 439 011a 14       		.byte	0x14
 440 011b 01       		.uleb128 0x1
 441 011c 2C030000 		.4byte	.LASF19
 442 0120 6F       		.byte	0x6f
 443 0121 0C       		.byte	0xc
 444 0122 7D000000 		.4byte	0x7d
 445 0126 18       		.byte	0x18
 446 0127 01       		.uleb128 0x1
 447 0128 53020000 		.4byte	.LASF20
 448 012c 70       		.byte	0x70
 449 012d 03       		.byte	0x3
 450 012e 7D000000 		.4byte	0x7d
 451 0132 1C       		.byte	0x1c
 452 0133 01       		.uleb128 0x1
 453 0134 6C000000 		.4byte	.LASF21
 454 0138 71       		.byte	0x71
 455 0139 0C       		.byte	0xc
 456 013a 7D000000 		.4byte	0x7d
 457 013e 20       		.byte	0x20
 458 013f 01       		.uleb128 0x1
 459 0140 08010000 		.4byte	.LASF22
 460 0144 72       		.byte	0x72
 461 0145 0C       		.byte	0xc
 462 0146 7D000000 		.4byte	0x7d
 463 014a 24       		.byte	0x24
 464 014b 01       		.uleb128 0x1
 465 014c 1D030000 		.4byte	.LASF23
 466 0150 73       		.byte	0x73
 467 0151 03       		.byte	0x3
 468 0152 7D000000 		.4byte	0x7d
 469 0156 28       		.byte	0x28
 470 0157 01       		.uleb128 0x1
 471 0158 5C030000 		.4byte	.LASF24
 472 015c 74       		.byte	0x74
 473 015d 03       		.byte	0x3
 474 015e 7D000000 		.4byte	0x7d
 475 0162 2C       		.byte	0x2c
 476 0163 01       		.uleb128 0x1
 477 0164 F2020000 		.4byte	.LASF25
 478 0168 75       		.byte	0x75
 479 0169 0C       		.byte	0xc
 480 016a 7D000000 		.4byte	0x7d
 481 016e 30       		.byte	0x30
 482 016f 01       		.uleb128 0x1
 483 0170 C8000000 		.4byte	.LASF26
 484 0174 76       		.byte	0x76
 485 0175 0C       		.byte	0xc
 486 0176 7D000000 		.4byte	0x7d
 487 017a 34       		.byte	0x34
 488 017b 01       		.uleb128 0x1
 489 017c D0000000 		.4byte	.LASF27
 490 0180 77       		.byte	0x77
 491 0181 0C       		.byte	0xc
 492 0182 7D000000 		.4byte	0x7d
 493 0186 38       		.byte	0x38
 494 0187 01       		.uleb128 0x1
 495 0188 9A000000 		.4byte	.LASF28
 496 018c 78       		.byte	0x78
 497 018d 03       		.byte	0x3
 498 018e 7D000000 		.4byte	0x7d
 499 0192 3C       		.byte	0x3c
 500 0193 01       		.uleb128 0x1
 501 0194 A9000000 		.4byte	.LASF29
 502 0198 79       		.byte	0x79
 503 0199 0C       		.byte	0xc
 504 019a 7D000000 		.4byte	0x7d
 505 019e 40       		.byte	0x40
 506 019f 01       		.uleb128 0x1
 507 01a0 2E010000 		.4byte	.LASF30
 508 01a4 7A       		.byte	0x7a
 509 01a5 0C       		.byte	0xc
 510 01a6 7D000000 		.4byte	0x7d
 511 01aa 44       		.byte	0x44
 512 01ab 01       		.uleb128 0x1
 513 01ac 27020000 		.4byte	.LASF31
 514 01b0 7B       		.byte	0x7b
 515 01b1 03       		.byte	0x3
 516 01b2 7D000000 		.4byte	0x7d
 517 01b6 48       		.byte	0x48
 518 01b7 01       		.uleb128 0x1
 519 01b8 1F010000 		.4byte	.LASF32
 520 01bc 7C       		.byte	0x7c
 521 01bd 03       		.byte	0x3
 522 01be 7D000000 		.4byte	0x7d
 523 01c2 4C       		.byte	0x4c
 524 01c3 01       		.uleb128 0x1
 525 01c4 00000000 		.4byte	.LASF33
 526 01c8 7D       		.byte	0x7d
 527 01c9 0C       		.byte	0xc
 528 01ca 7D000000 		.4byte	0x7d
 529 01ce 50       		.byte	0x50
 530 01cf 01       		.uleb128 0x1
 531 01d0 AA020000 		.4byte	.LASF34
 532 01d4 7E       		.byte	0x7e
 533 01d5 0C       		.byte	0xc
 534 01d6 7D000000 		.4byte	0x7d
 535 01da 54       		.byte	0x54
 536 01db 01       		.uleb128 0x1
 537 01dc 7B000000 		.4byte	.LASF35
 538 01e0 7F       		.byte	0x7f
 539 01e1 0C       		.byte	0xc
 540 01e2 7D000000 		.4byte	0x7d
 541 01e6 58       		.byte	0x58
 542 01e7 01       		.uleb128 0x1
 543 01e8 E3020000 		.4byte	.LASF36
 544 01ec 80       		.byte	0x80
 545 01ed 03       		.byte	0x3
 546 01ee 7D000000 		.4byte	0x7d
 547 01f2 5C       		.byte	0x5c
 548 01f3 01       		.uleb128 0x1
 549 01f4 36020000 		.4byte	.LASF37
 550 01f8 81       		.byte	0x81
 551 01f9 0C       		.byte	0xc
 552 01fa 7D000000 		.4byte	0x7d
 553 01fe 60       		.byte	0x60
 554 01ff 01       		.uleb128 0x1
 555 0200 52030000 		.4byte	.LASF38
 556 0204 82       		.byte	0x82
 557 0205 0C       		.byte	0xc
 558 0206 7D000000 		.4byte	0x7d
 559 020a 64       		.byte	0x64
 560 020b 01       		.uleb128 0x1
 561 020c 05030000 		.4byte	.LASF39
 562 0210 83       		.byte	0x83
 563 0211 03       		.byte	0x3
 564 0212 7D000000 		.4byte	0x7d
 565 0216 68       		.byte	0x68
 566 0217 01       		.uleb128 0x1
 567 0218 0A000000 		.4byte	.LASF40
 568 021c 84       		.byte	0x84
 569 021d 03       		.byte	0x3
 570 021e 7D000000 		.4byte	0x7d
 571 0222 6C       		.byte	0x6c
 572 0223 01       		.uleb128 0x1
 573 0224 44000000 		.4byte	.LASF41
 574 0228 85       		.byte	0x85
 575 0229 0C       		.byte	0xc
 576 022a 7D000000 		.4byte	0x7d
 577 022e 70       		.byte	0x70
 578 022f 03       		.uleb128 0x3
 579 0230 43535200 		.ascii	"CSR\000"
 580 0234 86       		.byte	0x86
 581 0235 7D000000 		.4byte	0x7d
 582 0239 74       		.byte	0x74
 583 023a 01       		.uleb128 0x1
 584 023b 52000000 		.4byte	.LASF42
 585 023f 87       		.byte	0x87
 586 0240 03       		.byte	0x3
 587 0241 7D000000 		.4byte	0x7d
 588 0245 78       		.byte	0x78
 589 0246 01       		.uleb128 0x1
 590 0247 B9000000 		.4byte	.LASF43
 591 024b 88       		.byte	0x88
 592 024c 03       		.byte	0x3
 593 024d 7D000000 		.4byte	0x7d
 594 0251 7C       		.byte	0x7c
 595 0252 01       		.uleb128 0x1
 596 0253 75000000 		.4byte	.LASF44
 597 0257 89       		.byte	0x89
 598 0258 0C       		.byte	0xc
 599 0259 7D000000 		.4byte	0x7d
 600 025d 80       		.byte	0x80
 601 025e 01       		.uleb128 0x1
 602 025f 61000000 		.4byte	.LASF45
 603 0263 8A       		.byte	0x8a
 604 0264 0C       		.byte	0xc
 605 0265 7D000000 		.4byte	0x7d
 606 0269 84       		.byte	0x84
 607 026a 01       		.uleb128 0x1
 608 026b 35030000 		.4byte	.LASF46
 609 026f 8B       		.byte	0x8b
 610 0270 0C       		.byte	0xc
 611 0271 7D000000 		.4byte	0x7d
 612 0275 88       		.byte	0x88
 613 0276 01       		.uleb128 0x1
 614 0277 B1000000 		.4byte	.LASF47
 615 027b 8C       		.byte	0x8c
 616 027c 0C       		.byte	0xc
 617 027d 7D000000 		.4byte	0x7d
 618 0281 8C       		.byte	0x8c
 619 0282 01       		.uleb128 0x1
 620 0283 49000000 		.4byte	.LASF48
 621 0287 8D       		.byte	0x8d
 622 0288 0C       		.byte	0xc
 623 0289 7D000000 		.4byte	0x7d
 624 028d 90       		.byte	0x90
 625 028e 01       		.uleb128 0x1
 626 028f FF000000 		.4byte	.LASF49
 627 0293 8E       		.byte	0x8e
 628 0294 0C       		.byte	0xc
 629 0295 7D000000 		.4byte	0x7d
 630 0299 94       		.byte	0x94
 631 029a 00       		.byte	0
 632 029b 07       		.uleb128 0x7
 633 029c CB000000 		.4byte	0xcb
 634 02a0 08       		.uleb128 0x8
 635 02a1 52434300 		.ascii	"RCC\000"
 636 02a5 3D02     		.2byte	0x23d
 637 02a7 9B020000 		.4byte	0x29b
 638 02ab 08       		.uleb128 0x8
 639 02ac 50575200 		.ascii	"PWR\000"
 640 02b0 5D02     		.2byte	0x25d
 641 02b2 C6000000 		.4byte	0xc6
 642 02b6 09       		.uleb128 0x9
 643 02b7 B4020000 		.4byte	.LASF50
 644 02bb 1B       		.byte	0x1b
 645 02bc 80000000 		.4byte	.LFB400
 646 02c0 28000000 		.4byte	.LFE400-.LFB400
 647 02c4 01       		.uleb128 0x1
 648 02c5 9C       		.byte	0x9c
 649 02c6 08030000 		.4byte	0x308
 650 02ca 0A       		.uleb128 0xa
 651 02cb E6030000 		.4byte	0x3e6
 652 02cf 80000000 		.4byte	.LBI38
 653 02d3 02       		.byte	.LVU49
 654 02d4 80000000 		.4byte	.LBB38
 655 02d8 0E000000 		.4byte	.LBE38-.LBB38
 656 02dc 1C       		.byte	0x1c
 657 02dd F4020000 		.4byte	0x2f4
 658 02e1 04       		.uleb128 0x4
 659 02e2 F0030000 		.4byte	0x3f0
 660 02e6 8A000000 		.4byte	.LBI40
 661 02ea 01       		.byte	.LVU52
 662 02eb 8A000000 		.4byte	.LBB40
 663 02ef 04000000 		.4byte	.LBE40-.LBB40
 664 02f3 00       		.byte	0
 665 02f4 0B       		.uleb128 0xb
 666 02f5 F0030000 		.4byte	0x3f0
 667 02f9 98000000 		.4byte	.LBI42
 668 02fd 01       		.byte	.LVU58
 669 02fe 98000000 		.4byte	.LBB42
 670 0302 04000000 		.4byte	.LBE42-.LBB42
 671 0306 1F       		.byte	0x1f
 672 0307 00       		.byte	0
 673 0308 09       		.uleb128 0x9
 674 0309 E6000000 		.4byte	.LASF51
 675 030d 11       		.byte	0x11
 676 030e 48000000 		.4byte	.LFB399
 677 0312 38000000 		.4byte	.LFE399-.LFB399
 678 0316 01       		.uleb128 0x1
 679 0317 9C       		.byte	0x9c
 680 0318 43030000 		.4byte	0x343
 681 031c 0C       		.uleb128 0xc
 682 031d E6030000 		.4byte	0x3e6
 683 0321 48000000 		.4byte	.LBI34
 684 0325 02       		.byte	.LVU27
 685 0326 48000000 		.4byte	.LBB34
 686 032a 0E000000 		.4byte	.LBE34-.LBB34
 687 032e 12       		.byte	0x12
 688 032f 04       		.uleb128 0x4
 689 0330 F0030000 		.4byte	0x3f0
 690 0334 52000000 		.4byte	.LBI36
 691 0338 01       		.byte	.LVU30
 692 0339 52000000 		.4byte	.LBB36
 693 033d 04000000 		.4byte	.LBE36-.LBB36
 694 0341 00       		.byte	0
 695 0342 00       		.byte	0
 696 0343 12       		.uleb128 0x12
 697 0344 40030000 		.4byte	.LASF52
 698 0348 01       		.byte	0x1
 699 0349 0C       		.byte	0xc
 700 034a 05       		.byte	0x5
 701 034b 4E000000 		.4byte	0x4e
 702 034f 28000000 		.4byte	.LFB398
 703 0353 20000000 		.4byte	.LFE398-.LFB398
 704 0357 01       		.uleb128 0x1
 705 0358 9C       		.byte	0x9c
 706 0359 84030000 		.4byte	0x384
 707 035d 0C       		.uleb128 0xc
 708 035e E6030000 		.4byte	0x3e6
 709 0362 28000000 		.4byte	.LBI30
 710 0366 02       		.byte	.LVU17
 711 0367 28000000 		.4byte	.LBB30
 712 036b 0E000000 		.4byte	.LBE30-.LBB30
 713 036f 0D       		.byte	0xd
 714 0370 04       		.uleb128 0x4
 715 0371 F0030000 		.4byte	0x3f0
 716 0375 32000000 		.4byte	.LBI32
 717 0379 01       		.byte	.LVU20
 718 037a 32000000 		.4byte	.LBB32
 719 037e 04000000 		.4byte	.LBE32-.LBB32
 720 0382 00       		.byte	0
 721 0383 00       		.byte	0
 722 0384 13       		.uleb128 0x13
 723 0385 6B030000 		.4byte	.LASF53
 724 0389 01       		.byte	0x1
 725 038a 06       		.byte	0x6
 726 038b 06       		.byte	0x6
 727 038c 00000000 		.4byte	.LFB397
 728 0390 28000000 		.4byte	.LFE397-.LFB397
 729 0394 01       		.uleb128 0x1
 730 0395 9C       		.byte	0x9c
 731 0396 E6030000 		.4byte	0x3e6
 732 039a 14       		.uleb128 0x14
 733 039b 5C010000 		.4byte	.LASF57
 734 039f 01       		.byte	0x1
 735 03a0 06       		.byte	0x6
 736 03a1 1C       		.byte	0x1c
 737 03a2 4E000000 		.4byte	0x4e
 738 03a6 01       		.uleb128 0x1
 739 03a7 50       		.byte	0x50
 740 03a8 0A       		.uleb128 0xa
 741 03a9 E6030000 		.4byte	0x3e6
 742 03ad 00000000 		.4byte	.LBI24
 743 03b1 02       		.byte	.LVU2
 744 03b2 00000000 		.4byte	.LBB24
 745 03b6 0E000000 		.4byte	.LBE24-.LBB24
 746 03ba 07       		.byte	0x7
 747 03bb D2030000 		.4byte	0x3d2
 748 03bf 04       		.uleb128 0x4
 749 03c0 F0030000 		.4byte	0x3f0
 750 03c4 0A000000 		.4byte	.LBI26
 751 03c8 01       		.byte	.LVU5
 752 03c9 0A000000 		.4byte	.LBB26
 753 03cd 04000000 		.4byte	.LBE26-.LBB26
 754 03d1 00       		.byte	0
 755 03d2 0B       		.uleb128 0xb
 756 03d3 F0030000 		.4byte	0x3f0
 757 03d7 18000000 		.4byte	.LBI28
 758 03db 01       		.byte	.LVU12
 759 03dc 18000000 		.4byte	.LBB28
 760 03e0 04000000 		.4byte	.LBE28-.LBB28
 761 03e4 09       		.byte	0x9
 762 03e5 00       		.byte	0
 763 03e6 15       		.uleb128 0x15
 764 03e7 FA020000 		.4byte	.LASF58
 765 03eb 02       		.byte	0x2
 766 03ec B202     		.2byte	0x2b2
 767 03ee 01       		.byte	0x1
 768 03ef 03       		.byte	0x3
 769 03f0 16       		.uleb128 0x16
 770 03f1 36010000 		.4byte	.LASF59
 771 03f5 03       		.byte	0x3
 772 03f6 AA01     		.2byte	0x1aa
 773 03f8 35       		.byte	0x35
 774 03f9 03       		.byte	0x3
 775 03fa 00       		.byte	0
 776              		.section	.debug_abbrev,"",%progbits
 777              	.Ldebug_abbrev0:
 778 0000 01       		.uleb128 0x1
 779 0001 0D       		.uleb128 0xd
 780 0002 00       		.byte	0
 781 0003 03       		.uleb128 0x3
 782 0004 0E       		.uleb128 0xe
 783 0005 3A       		.uleb128 0x3a
 784 0006 21       		.uleb128 0x21
 785 0007 02       		.sleb128 2
 786 0008 3B       		.uleb128 0x3b
 787 0009 0B       		.uleb128 0xb
 788 000a 39       		.uleb128 0x39
 789 000b 0B       		.uleb128 0xb
 790 000c 49       		.uleb128 0x49
 791 000d 13       		.uleb128 0x13
 792 000e 38       		.uleb128 0x38
 793 000f 0B       		.uleb128 0xb
 794 0010 00       		.byte	0
 795 0011 00       		.byte	0
 796 0012 02       		.uleb128 0x2
 797 0013 24       		.uleb128 0x24
 798 0014 00       		.byte	0
 799 0015 0B       		.uleb128 0xb
 800 0016 0B       		.uleb128 0xb
 801 0017 3E       		.uleb128 0x3e
 802 0018 0B       		.uleb128 0xb
 803 0019 03       		.uleb128 0x3
 804 001a 0E       		.uleb128 0xe
 805 001b 00       		.byte	0
 806 001c 00       		.byte	0
 807 001d 03       		.uleb128 0x3
 808 001e 0D       		.uleb128 0xd
 809 001f 00       		.byte	0
 810 0020 03       		.uleb128 0x3
 811 0021 08       		.uleb128 0x8
 812 0022 3A       		.uleb128 0x3a
 813 0023 21       		.uleb128 0x21
 814 0024 02       		.sleb128 2
 815 0025 3B       		.uleb128 0x3b
 816 0026 0B       		.uleb128 0xb
 817 0027 39       		.uleb128 0x39
 818 0028 21       		.uleb128 0x21
 819 0029 0C       		.sleb128 12
 820 002a 49       		.uleb128 0x49
 821 002b 13       		.uleb128 0x13
 822 002c 38       		.uleb128 0x38
 823 002d 0B       		.uleb128 0xb
 824 002e 00       		.byte	0
 825 002f 00       		.byte	0
 826 0030 04       		.uleb128 0x4
 827 0031 1D       		.uleb128 0x1d
 828 0032 00       		.byte	0
 829 0033 31       		.uleb128 0x31
 830 0034 13       		.uleb128 0x13
 831 0035 52       		.uleb128 0x52
 832 0036 01       		.uleb128 0x1
 833 0037 B842     		.uleb128 0x2138
 834 0039 0B       		.uleb128 0xb
 835 003a 11       		.uleb128 0x11
 836 003b 01       		.uleb128 0x1
 837 003c 12       		.uleb128 0x12
 838 003d 06       		.uleb128 0x6
 839 003e 58       		.uleb128 0x58
 840 003f 21       		.uleb128 0x21
 841 0040 02       		.sleb128 2
 842 0041 59       		.uleb128 0x59
 843 0042 21       		.uleb128 0x21
 844 0043 B205     		.sleb128 690
 845 0045 57       		.uleb128 0x57
 846 0046 21       		.uleb128 0x21
 847 0047 01       		.sleb128 1
 848 0048 00       		.byte	0
 849 0049 00       		.byte	0
 850 004a 05       		.uleb128 0x5
 851 004b 28       		.uleb128 0x28
 852 004c 00       		.byte	0
 853 004d 03       		.uleb128 0x3
 854 004e 0E       		.uleb128 0xe
 855 004f 1C       		.uleb128 0x1c
 856 0050 0B       		.uleb128 0xb
 857 0051 00       		.byte	0
 858 0052 00       		.byte	0
 859 0053 06       		.uleb128 0x6
 860 0054 13       		.uleb128 0x13
 861 0055 01       		.byte	0x1
 862 0056 03       		.uleb128 0x3
 863 0057 0E       		.uleb128 0xe
 864 0058 0B       		.uleb128 0xb
 865 0059 0B       		.uleb128 0xb
 866 005a 3A       		.uleb128 0x3a
 867 005b 21       		.uleb128 0x21
 868 005c 02       		.sleb128 2
 869 005d 3B       		.uleb128 0x3b
 870 005e 0B       		.uleb128 0xb
 871 005f 39       		.uleb128 0x39
 872 0060 21       		.uleb128 0x21
 873 0061 08       		.sleb128 8
 874 0062 01       		.uleb128 0x1
 875 0063 13       		.uleb128 0x13
 876 0064 00       		.byte	0
 877 0065 00       		.byte	0
 878 0066 07       		.uleb128 0x7
 879 0067 35       		.uleb128 0x35
 880 0068 00       		.byte	0
 881 0069 49       		.uleb128 0x49
 882 006a 13       		.uleb128 0x13
 883 006b 00       		.byte	0
 884 006c 00       		.byte	0
 885 006d 08       		.uleb128 0x8
 886 006e 34       		.uleb128 0x34
 887 006f 00       		.byte	0
 888 0070 03       		.uleb128 0x3
 889 0071 08       		.uleb128 0x8
 890 0072 3A       		.uleb128 0x3a
 891 0073 21       		.uleb128 0x21
 892 0074 02       		.sleb128 2
 893 0075 3B       		.uleb128 0x3b
 894 0076 05       		.uleb128 0x5
 895 0077 39       		.uleb128 0x39
 896 0078 21       		.uleb128 0x21
 897 0079 26       		.sleb128 38
 898 007a 49       		.uleb128 0x49
 899 007b 13       		.uleb128 0x13
 900 007c 3F       		.uleb128 0x3f
 901 007d 19       		.uleb128 0x19
 902 007e 3C       		.uleb128 0x3c
 903 007f 19       		.uleb128 0x19
 904 0080 00       		.byte	0
 905 0081 00       		.byte	0
 906 0082 09       		.uleb128 0x9
 907 0083 2E       		.uleb128 0x2e
 908 0084 01       		.byte	0x1
 909 0085 3F       		.uleb128 0x3f
 910 0086 19       		.uleb128 0x19
 911 0087 03       		.uleb128 0x3
 912 0088 0E       		.uleb128 0xe
 913 0089 3A       		.uleb128 0x3a
 914 008a 21       		.uleb128 0x21
 915 008b 01       		.sleb128 1
 916 008c 3B       		.uleb128 0x3b
 917 008d 0B       		.uleb128 0xb
 918 008e 39       		.uleb128 0x39
 919 008f 21       		.uleb128 0x21
 920 0090 06       		.sleb128 6
 921 0091 11       		.uleb128 0x11
 922 0092 01       		.uleb128 0x1
 923 0093 12       		.uleb128 0x12
 924 0094 06       		.uleb128 0x6
 925 0095 40       		.uleb128 0x40
 926 0096 18       		.uleb128 0x18
 927 0097 7A       		.uleb128 0x7a
 928 0098 19       		.uleb128 0x19
 929 0099 01       		.uleb128 0x1
 930 009a 13       		.uleb128 0x13
 931 009b 00       		.byte	0
 932 009c 00       		.byte	0
 933 009d 0A       		.uleb128 0xa
 934 009e 1D       		.uleb128 0x1d
 935 009f 01       		.byte	0x1
 936 00a0 31       		.uleb128 0x31
 937 00a1 13       		.uleb128 0x13
 938 00a2 52       		.uleb128 0x52
 939 00a3 01       		.uleb128 0x1
 940 00a4 B842     		.uleb128 0x2138
 941 00a6 0B       		.uleb128 0xb
 942 00a7 11       		.uleb128 0x11
 943 00a8 01       		.uleb128 0x1
 944 00a9 12       		.uleb128 0x12
 945 00aa 06       		.uleb128 0x6
 946 00ab 58       		.uleb128 0x58
 947 00ac 21       		.uleb128 0x21
 948 00ad 01       		.sleb128 1
 949 00ae 59       		.uleb128 0x59
 950 00af 0B       		.uleb128 0xb
 951 00b0 57       		.uleb128 0x57
 952 00b1 21       		.uleb128 0x21
 953 00b2 03       		.sleb128 3
 954 00b3 01       		.uleb128 0x1
 955 00b4 13       		.uleb128 0x13
 956 00b5 00       		.byte	0
 957 00b6 00       		.byte	0
 958 00b7 0B       		.uleb128 0xb
 959 00b8 1D       		.uleb128 0x1d
 960 00b9 00       		.byte	0
 961 00ba 31       		.uleb128 0x31
 962 00bb 13       		.uleb128 0x13
 963 00bc 52       		.uleb128 0x52
 964 00bd 01       		.uleb128 0x1
 965 00be B842     		.uleb128 0x2138
 966 00c0 0B       		.uleb128 0xb
 967 00c1 11       		.uleb128 0x11
 968 00c2 01       		.uleb128 0x1
 969 00c3 12       		.uleb128 0x12
 970 00c4 06       		.uleb128 0x6
 971 00c5 58       		.uleb128 0x58
 972 00c6 21       		.uleb128 0x21
 973 00c7 01       		.sleb128 1
 974 00c8 59       		.uleb128 0x59
 975 00c9 0B       		.uleb128 0xb
 976 00ca 57       		.uleb128 0x57
 977 00cb 21       		.uleb128 0x21
 978 00cc 03       		.sleb128 3
 979 00cd 00       		.byte	0
 980 00ce 00       		.byte	0
 981 00cf 0C       		.uleb128 0xc
 982 00d0 1D       		.uleb128 0x1d
 983 00d1 01       		.byte	0x1
 984 00d2 31       		.uleb128 0x31
 985 00d3 13       		.uleb128 0x13
 986 00d4 52       		.uleb128 0x52
 987 00d5 01       		.uleb128 0x1
 988 00d6 B842     		.uleb128 0x2138
 989 00d8 0B       		.uleb128 0xb
 990 00d9 11       		.uleb128 0x11
 991 00da 01       		.uleb128 0x1
 992 00db 12       		.uleb128 0x12
 993 00dc 06       		.uleb128 0x6
 994 00dd 58       		.uleb128 0x58
 995 00de 21       		.uleb128 0x21
 996 00df 01       		.sleb128 1
 997 00e0 59       		.uleb128 0x59
 998 00e1 0B       		.uleb128 0xb
 999 00e2 57       		.uleb128 0x57
 1000 00e3 21       		.uleb128 0x21
 1001 00e4 03       		.sleb128 3
 1002 00e5 00       		.byte	0
 1003 00e6 00       		.byte	0
 1004 00e7 0D       		.uleb128 0xd
 1005 00e8 11       		.uleb128 0x11
 1006 00e9 01       		.byte	0x1
 1007 00ea 25       		.uleb128 0x25
 1008 00eb 0E       		.uleb128 0xe
 1009 00ec 13       		.uleb128 0x13
 1010 00ed 0B       		.uleb128 0xb
 1011 00ee 03       		.uleb128 0x3
 1012 00ef 0E       		.uleb128 0xe
 1013 00f0 1B       		.uleb128 0x1b
 1014 00f1 0E       		.uleb128 0xe
 1015 00f2 11       		.uleb128 0x11
 1016 00f3 01       		.uleb128 0x1
 1017 00f4 12       		.uleb128 0x12
 1018 00f5 06       		.uleb128 0x6
 1019 00f6 10       		.uleb128 0x10
 1020 00f7 17       		.uleb128 0x17
 1021 00f8 00       		.byte	0
 1022 00f9 00       		.byte	0
 1023 00fa 0E       		.uleb128 0xe
 1024 00fb 04       		.uleb128 0x4
 1025 00fc 01       		.byte	0x1
 1026 00fd 3E       		.uleb128 0x3e
 1027 00fe 0B       		.uleb128 0xb
 1028 00ff 0B       		.uleb128 0xb
 1029 0100 0B       		.uleb128 0xb
 1030 0101 49       		.uleb128 0x49
 1031 0102 13       		.uleb128 0x13
 1032 0103 3A       		.uleb128 0x3a
 1033 0104 0B       		.uleb128 0xb
 1034 0105 3B       		.uleb128 0x3b
 1035 0106 0B       		.uleb128 0xb
 1036 0107 39       		.uleb128 0x39
 1037 0108 0B       		.uleb128 0xb
 1038 0109 01       		.uleb128 0x1
 1039 010a 13       		.uleb128 0x13
 1040 010b 00       		.byte	0
 1041 010c 00       		.byte	0
 1042 010d 0F       		.uleb128 0xf
 1043 010e 16       		.uleb128 0x16
 1044 010f 00       		.byte	0
 1045 0110 03       		.uleb128 0x3
 1046 0111 08       		.uleb128 0x8
 1047 0112 3A       		.uleb128 0x3a
 1048 0113 0B       		.uleb128 0xb
 1049 0114 3B       		.uleb128 0x3b
 1050 0115 0B       		.uleb128 0xb
 1051 0116 39       		.uleb128 0x39
 1052 0117 0B       		.uleb128 0xb
 1053 0118 49       		.uleb128 0x49
 1054 0119 13       		.uleb128 0x13
 1055 011a 00       		.byte	0
 1056 011b 00       		.byte	0
 1057 011c 10       		.uleb128 0x10
 1058 011d 16       		.uleb128 0x16
 1059 011e 00       		.byte	0
 1060 011f 03       		.uleb128 0x3
 1061 0120 0E       		.uleb128 0xe
 1062 0121 3A       		.uleb128 0x3a
 1063 0122 0B       		.uleb128 0xb
 1064 0123 3B       		.uleb128 0x3b
 1065 0124 0B       		.uleb128 0xb
 1066 0125 39       		.uleb128 0x39
 1067 0126 0B       		.uleb128 0xb
 1068 0127 49       		.uleb128 0x49
 1069 0128 13       		.uleb128 0x13
 1070 0129 00       		.byte	0
 1071 012a 00       		.byte	0
 1072 012b 11       		.uleb128 0x11
 1073 012c 24       		.uleb128 0x24
 1074 012d 00       		.byte	0
 1075 012e 0B       		.uleb128 0xb
 1076 012f 0B       		.uleb128 0xb
 1077 0130 3E       		.uleb128 0x3e
 1078 0131 0B       		.uleb128 0xb
 1079 0132 03       		.uleb128 0x3
 1080 0133 08       		.uleb128 0x8
 1081 0134 00       		.byte	0
 1082 0135 00       		.byte	0
 1083 0136 12       		.uleb128 0x12
 1084 0137 2E       		.uleb128 0x2e
 1085 0138 01       		.byte	0x1
 1086 0139 3F       		.uleb128 0x3f
 1087 013a 19       		.uleb128 0x19
 1088 013b 03       		.uleb128 0x3
 1089 013c 0E       		.uleb128 0xe
 1090 013d 3A       		.uleb128 0x3a
 1091 013e 0B       		.uleb128 0xb
 1092 013f 3B       		.uleb128 0x3b
 1093 0140 0B       		.uleb128 0xb
 1094 0141 39       		.uleb128 0x39
 1095 0142 0B       		.uleb128 0xb
 1096 0143 49       		.uleb128 0x49
 1097 0144 13       		.uleb128 0x13
 1098 0145 11       		.uleb128 0x11
 1099 0146 01       		.uleb128 0x1
 1100 0147 12       		.uleb128 0x12
 1101 0148 06       		.uleb128 0x6
 1102 0149 40       		.uleb128 0x40
 1103 014a 18       		.uleb128 0x18
 1104 014b 7A       		.uleb128 0x7a
 1105 014c 19       		.uleb128 0x19
 1106 014d 01       		.uleb128 0x1
 1107 014e 13       		.uleb128 0x13
 1108 014f 00       		.byte	0
 1109 0150 00       		.byte	0
 1110 0151 13       		.uleb128 0x13
 1111 0152 2E       		.uleb128 0x2e
 1112 0153 01       		.byte	0x1
 1113 0154 3F       		.uleb128 0x3f
 1114 0155 19       		.uleb128 0x19
 1115 0156 03       		.uleb128 0x3
 1116 0157 0E       		.uleb128 0xe
 1117 0158 3A       		.uleb128 0x3a
 1118 0159 0B       		.uleb128 0xb
 1119 015a 3B       		.uleb128 0x3b
 1120 015b 0B       		.uleb128 0xb
 1121 015c 39       		.uleb128 0x39
 1122 015d 0B       		.uleb128 0xb
 1123 015e 27       		.uleb128 0x27
 1124 015f 19       		.uleb128 0x19
 1125 0160 11       		.uleb128 0x11
 1126 0161 01       		.uleb128 0x1
 1127 0162 12       		.uleb128 0x12
 1128 0163 06       		.uleb128 0x6
 1129 0164 40       		.uleb128 0x40
 1130 0165 18       		.uleb128 0x18
 1131 0166 7A       		.uleb128 0x7a
 1132 0167 19       		.uleb128 0x19
 1133 0168 01       		.uleb128 0x1
 1134 0169 13       		.uleb128 0x13
 1135 016a 00       		.byte	0
 1136 016b 00       		.byte	0
 1137 016c 14       		.uleb128 0x14
 1138 016d 05       		.uleb128 0x5
 1139 016e 00       		.byte	0
 1140 016f 03       		.uleb128 0x3
 1141 0170 0E       		.uleb128 0xe
 1142 0171 3A       		.uleb128 0x3a
 1143 0172 0B       		.uleb128 0xb
 1144 0173 3B       		.uleb128 0x3b
 1145 0174 0B       		.uleb128 0xb
 1146 0175 39       		.uleb128 0x39
 1147 0176 0B       		.uleb128 0xb
 1148 0177 49       		.uleb128 0x49
 1149 0178 13       		.uleb128 0x13
 1150 0179 02       		.uleb128 0x2
 1151 017a 18       		.uleb128 0x18
 1152 017b 00       		.byte	0
 1153 017c 00       		.byte	0
 1154 017d 15       		.uleb128 0x15
 1155 017e 2E       		.uleb128 0x2e
 1156 017f 00       		.byte	0
 1157 0180 03       		.uleb128 0x3
 1158 0181 0E       		.uleb128 0xe
 1159 0182 3A       		.uleb128 0x3a
 1160 0183 0B       		.uleb128 0xb
 1161 0184 3B       		.uleb128 0x3b
 1162 0185 05       		.uleb128 0x5
 1163 0186 39       		.uleb128 0x39
 1164 0187 0B       		.uleb128 0xb
 1165 0188 20       		.uleb128 0x20
 1166 0189 0B       		.uleb128 0xb
 1167 018a 00       		.byte	0
 1168 018b 00       		.byte	0
 1169 018c 16       		.uleb128 0x16
 1170 018d 2E       		.uleb128 0x2e
 1171 018e 00       		.byte	0
 1172 018f 03       		.uleb128 0x3
 1173 0190 0E       		.uleb128 0xe
 1174 0191 3A       		.uleb128 0x3a
 1175 0192 0B       		.uleb128 0xb
 1176 0193 3B       		.uleb128 0x3b
 1177 0194 05       		.uleb128 0x5
 1178 0195 39       		.uleb128 0x39
 1179 0196 0B       		.uleb128 0xb
 1180 0197 27       		.uleb128 0x27
 1181 0198 19       		.uleb128 0x19
 1182 0199 20       		.uleb128 0x20
 1183 019a 0B       		.uleb128 0xb
 1184 019b 00       		.byte	0
 1185 019c 00       		.byte	0
 1186 019d 00       		.byte	0
 1187              		.section	.debug_aranges,"",%progbits
 1188 0000 1C000000 		.4byte	0x1c
 1189 0004 0200     		.2byte	0x2
 1190 0006 00000000 		.4byte	.Ldebug_info0
 1191 000a 04       		.byte	0x4
 1192 000b 00       		.byte	0
 1193 000c 0000     		.2byte	0
 1194 000e 0000     		.2byte	0
 1195 0010 00000000 		.4byte	.Ltext0
 1196 0014 A8000000 		.4byte	.Letext0-.Ltext0
 1197 0018 00000000 		.4byte	0
 1198 001c 00000000 		.4byte	0
 1199              		.section	.debug_line,"",%progbits
 1200              	.Ldebug_line0:
 1201 0000 C2010000 		.section	.debug_str,"MS",%progbits,1
 1201      03008300 
 1201      00000201 
 1201      FB0E0D00 
 1201      01010101 
 1202              	.LASF33:
 1203 0000 41484231 		.ascii	"AHB1LPENR\000"
 1203      4C50454E 
 1203      5200
 1204              	.LASF40:
 1205 000a 5F726573 		.ascii	"_reserved_0x6c\000"
 1205      65727665 
 1205      645F3078 
 1205      366300
 1206              	.LASF0:
 1207 0019 7363616C 		.ascii	"scale1\000"
 1207      653100
 1208              	.LASF1:
 1209 0020 7363616C 		.ascii	"scale2\000"
 1209      653200
 1210              	.LASF2:
 1211 0027 7363616C 		.ascii	"scale3\000"
 1211      653300
 1212              	.LASF4:
 1213 002e 7369676E 		.ascii	"signed char\000"
 1213      65642063 
 1213      68617200 
 1214              	.LASF5:
 1215 003a 73686F72 		.ascii	"short int\000"
 1215      7420696E 
 1215      7400
 1216              	.LASF41:
 1217 0044 42444352 		.ascii	"BDCR\000"
 1217      00
 1218              	.LASF48:
 1219 0049 434B4741 		.ascii	"CKGATENR\000"
 1219      54454E52 
 1219      00
 1220              	.LASF42:
 1221 0052 5F726573 		.ascii	"_reserved_0x78\000"
 1221      65727665 
 1221      645F3078 
 1221      373800
 1222              	.LASF45:
 1223 0061 504C4C49 		.ascii	"PLLI2SCFGR\000"
 1223      32534346 
 1223      475200
 1224              	.LASF21:
 1225 006c 41504231 		.ascii	"APB1RSTR\000"
 1225      52535452 
 1225      00
 1226              	.LASF44:
 1227 0075 53534347 		.ascii	"SSCGR\000"
 1227      5200
 1228              	.LASF35:
 1229 007b 41484233 		.ascii	"AHB3LPENR\000"
 1229      4C50454E 
 1229      5200
 1230              	.LASF55:
 1231 0085 7372632F 		.ascii	"src/sys/power.c\000"
 1231      7379732F 
 1231      706F7765 
 1231      722E6300 
 1232              	.LASF16:
 1233 0095 43464752 		.ascii	"CFGR\000"
 1233      00
 1234              	.LASF28:
 1235 009a 5F726573 		.ascii	"_reserved_0x3c\000"
 1235      65727665 
 1235      645F3078 
 1235      336300
 1236              	.LASF29:
 1237 00a9 41504231 		.ascii	"APB1ENR\000"
 1237      454E5200 
 1238              	.LASF47:
 1239 00b1 44434B43 		.ascii	"DCKCFGR\000"
 1239      46475200 
 1240              	.LASF43:
 1241 00b9 5F726573 		.ascii	"_reserved_0x7c\000"
 1241      65727665 
 1241      645F3078 
 1241      376300
 1242              	.LASF26:
 1243 00c8 41484232 		.ascii	"AHB2ENR\000"
 1243      454E5200 
 1244              	.LASF27:
 1245 00d0 41484233 		.ascii	"AHB3ENR\000"
 1245      454E5200 
 1246              	.LASF7:
 1247 00d8 6C6F6E67 		.ascii	"long long int\000"
 1247      206C6F6E 
 1247      6720696E 
 1247      7400
 1248              	.LASF51:
 1249 00e6 73746172 		.ascii	"start_Overdrive\000"
 1249      745F4F76 
 1249      65726472 
 1249      69766500 
 1250              	.LASF6:
 1251 00f6 6C6F6E67 		.ascii	"long int\000"
 1251      20696E74 
 1251      00
 1252              	.LASF49:
 1253 00ff 44434B43 		.ascii	"DCKCFGR2\000"
 1253      46475232 
 1253      00
 1254              	.LASF22:
 1255 0108 41504232 		.ascii	"APB2RSTR\000"
 1255      52535452 
 1255      00
 1256              	.LASF3:
 1257 0111 756E7369 		.ascii	"unsigned char\000"
 1257      676E6564 
 1257      20636861 
 1257      7200
 1258              	.LASF32:
 1259 011f 5F726573 		.ascii	"_reserved_0x4c\000"
 1259      65727665 
 1259      645F3078 
 1259      346300
 1260              	.LASF30:
 1261 012e 41504232 		.ascii	"APB2ENR\000"
 1261      454E5200 
 1262              	.LASF59:
 1263 0136 5F5F4453 		.ascii	"__DSB\000"
 1263      4200
 1264              	.LASF11:
 1265 013c 6C6F6E67 		.ascii	"long long unsigned int\000"
 1265      206C6F6E 
 1265      6720756E 
 1265      7369676E 
 1265      65642069 
 1266              	.LASF9:
 1267 0153 75696E74 		.ascii	"uint32_t\000"
 1267      33325F74 
 1267      00
 1268              	.LASF57:
 1269 015c 7363616C 		.ascii	"scale\000"
 1269      6500
 1270              	.LASF12:
 1271 0162 756E7369 		.ascii	"unsigned int\000"
 1271      676E6564 
 1271      20696E74 
 1271      00
 1272              	.LASF18:
 1273 016f 41484232 		.ascii	"AHB2RSTR\000"
 1273      52535452 
 1273      00
 1274              	.LASF54:
 1275 0178 474E5520 		.ascii	"GNU C99 13.2.1 20231009 -mtune=cortex-m4 -mthumb -m"
 1275      43393920 
 1275      31332E32 
 1275      2E312032 
 1275      30323331 
 1276 01ab 666C6F61 		.ascii	"float-abi=hard -mfpu=fpv4-sp-d16 -march=armv7e-m+fp"
 1276      742D6162 
 1276      693D6861 
 1276      7264202D 
 1276      6D667075 
 1277 01de 202D6720 		.ascii	" -g -O0 -Os -std=gnu99 -fsingle-precision-constant\000"
 1277      2D4F3020 
 1277      2D4F7320 
 1277      2D737464 
 1277      3D676E75 
 1278              	.LASF14:
 1279 0211 5243435F 		.ascii	"RCC_registers\000"
 1279      72656769 
 1279      73746572 
 1279      7300
 1280              	.LASF15:
 1281 021f 504C4C43 		.ascii	"PLLCFGR\000"
 1281      46475200 
 1282              	.LASF31:
 1283 0227 5F726573 		.ascii	"_reserved_0x48\000"
 1283      65727665 
 1283      645F3078 
 1283      343800
 1284              	.LASF37:
 1285 0236 41504231 		.ascii	"APB1LPENR\000"
 1285      4C50454E 
 1285      5200
 1286              	.LASF8:
 1287 0240 73686F72 		.ascii	"short unsigned int\000"
 1287      7420756E 
 1287      7369676E 
 1287      65642069 
 1287      6E7400
 1288              	.LASF20:
 1289 0253 5F726573 		.ascii	"_reserved_0x1c\000"
 1289      65727665 
 1289      645F3078 
 1289      316300
 1290              	.LASF56:
 1291 0262 2F686F6D 		.ascii	"/home/xoum/Documents/IESE3/C/TP7/TP7_potentiom\303\250"
 1291      652F786F 
 1291      756D2F44 
 1291      6F63756D 
 1291      656E7473 
 1292 0292 7472655F 		.ascii	"tre_plus_led (copier 1)\000"
 1292      706C7573 
 1292      5F6C6564 
 1292      2028636F 
 1292      70696572 
 1293              	.LASF34:
 1294 02aa 41484232 		.ascii	"AHB2LPENR\000"
 1294      4C50454E 
 1294      5200
 1295              	.LASF50:
 1296 02b4 73746F70 		.ascii	"stop_Overdrive\000"
 1296      5F4F7665 
 1296      72647269 
 1296      766500
 1297              	.LASF10:
 1298 02c3 6C6F6E67 		.ascii	"long unsigned int\000"
 1298      20756E73 
 1298      69676E65 
 1298      6420696E 
 1298      7400
 1299              	.LASF13:
 1300 02d5 5057525F 		.ascii	"PWR_registers\000"
 1300      72656769 
 1300      73746572 
 1300      7300
 1301              	.LASF36:
 1302 02e3 5F726573 		.ascii	"_reserved_0x5c\000"
 1302      65727665 
 1302      645F3078 
 1302      356300
 1303              	.LASF25:
 1304 02f2 41484231 		.ascii	"AHB1ENR\000"
 1304      454E5200 
 1305              	.LASF58:
 1306 02fa 656E6162 		.ascii	"enable_PWR\000"
 1306      6C655F50 
 1306      575200
 1307              	.LASF39:
 1308 0305 5F726573 		.ascii	"_reserved_0x68\000"
 1308      65727665 
 1308      645F3078 
 1308      363800
 1309              	.LASF17:
 1310 0314 41484231 		.ascii	"AHB1RSTR\000"
 1310      52535452 
 1310      00
 1311              	.LASF23:
 1312 031d 5F726573 		.ascii	"_reserved_0x28\000"
 1312      65727665 
 1312      645F3078 
 1312      323800
 1313              	.LASF19:
 1314 032c 41484233 		.ascii	"AHB3RSTR\000"
 1314      52535452 
 1314      00
 1315              	.LASF46:
 1316 0335 504C4C53 		.ascii	"PLLSAICFGR\000"
 1316      41494346 
 1316      475200
 1317              	.LASF52:
 1318 0340 6765745F 		.ascii	"get_voltage_scale\000"
 1318      766F6C74 
 1318      6167655F 
 1318      7363616C 
 1318      6500
 1319              	.LASF38:
 1320 0352 41504232 		.ascii	"APB2LPENR\000"
 1320      4C50454E 
 1320      5200
 1321              	.LASF24:
 1322 035c 5F726573 		.ascii	"_reserved_0x2c\000"
 1322      65727665 
 1322      645F3078 
 1322      326300
 1323              	.LASF53:
 1324 036b 7365745F 		.ascii	"set_voltage_scale\000"
 1324      766F6C74 
 1324      6167655F 
 1324      7363616C 
 1324      6500
 1325              		.ident	"GCC: (15:13.2.rel1-2) 13.2.1 20231009"
DEFINED SYMBOLS
                            *ABS*:00000000 power.c
     /tmp/ccIFXrn6.s:19     .text:00000000 $t
     /tmp/ccIFXrn6.s:25     .text:00000000 set_voltage_scale
     /tmp/ccIFXrn6.s:88     .text:00000020 $d
     /tmp/ccIFXrn6.s:93     .text:00000028 $t
     /tmp/ccIFXrn6.s:99     .text:00000028 get_voltage_scale
     /tmp/ccIFXrn6.s:142    .text:00000040 $d
     /tmp/ccIFXrn6.s:147    .text:00000048 $t
     /tmp/ccIFXrn6.s:153    .text:00000048 start_Overdrive
     /tmp/ccIFXrn6.s:220    .text:00000078 $d
     /tmp/ccIFXrn6.s:225    .text:00000080 $t
     /tmp/ccIFXrn6.s:231    .text:00000080 stop_Overdrive
     /tmp/ccIFXrn6.s:290    .text:000000a0 $d

UNDEFINED SYMBOLS
RCC
PWR
