   1              		.arch armv7e-m
   2              		.fpu fpv4-sp-d16
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 4
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.file	"clock.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.file 1 "src/sys/clock.c"
  19              		.align	1
  20              		.global	start_PLL
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.type	start_PLL, %function
  25              	start_PLL:
  26              	.LVL0:
  27              	.LFB397:
   1:src/sys/clock.c **** #include"clock.h"
   2:src/sys/clock.c **** #include"devices.h"
   3:src/sys/clock.c **** #include "cm4.h"
   4:src/sys/clock.c **** 
   5:src/sys/clock.c **** void start_PLL(PLLSRC SRC,
   6:src/sys/clock.c **** 		 int32_t M,int32_t N,int32_t P,int32_t Q,int32_t R) { 
  28              		.loc 1 6 55 view -0
  29              		.cfi_startproc
  30              		@ args = 8, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
   7:src/sys/clock.c ****   /* setup parameters */
   8:src/sys/clock.c ****   RCC.PLLCFGR = 
  32              		.loc 1 8 3 view .LVU1
   6:src/sys/clock.c ****   /* setup parameters */
  33              		.loc 1 6 55 is_stmt 0 view .LVU2
  34 0000 30B5     		push	{r4, r5, lr}
  35              		.cfi_def_cfa_offset 12
  36              		.cfi_offset 4, -12
  37              		.cfi_offset 5, -8
  38              		.cfi_offset 14, -4
   9:src/sys/clock.c ****     (M<<0)    | (N<<6)  | ((P/2-1)<<16) |
  10:src/sys/clock.c ****     (SRC<<22) | (Q<<24) | (R<<28) ;
  39              		.loc 1 10 29 view .LVU3
  40 0002 049C     		ldr	r4, [sp, #16]
  41              		.loc 1 10 25 view .LVU4
  42 0004 039D     		ldr	r5, [sp, #12]
  43              		.loc 1 10 29 view .LVU5
  44 0006 2407     		lsls	r4, r4, #28
  45              		.loc 1 10 25 view .LVU6
  46 0008 44EA0564 		orr	r4, r4, r5, lsl #24
  47 000c 0C43     		orrs	r4, r4, r1
   9:src/sys/clock.c ****     (M<<0)    | (N<<6)  | ((P/2-1)<<16) |
  48              		.loc 1 9 30 view .LVU7
  49 000e 03EBD373 		add	r3, r3, r3, lsr #31
  50              	.LVL1:
  51              		.loc 1 10 25 view .LVU8
  52 0012 44EA8054 		orr	r4, r4, r0, lsl #22
   9:src/sys/clock.c ****     (M<<0)    | (N<<6)  | ((P/2-1)<<16) |
  53              		.loc 1 9 30 view .LVU9
  54 0016 5B10     		asrs	r3, r3, #1
  55              		.loc 1 10 25 view .LVU10
  56 0018 44EA8214 		orr	r4, r4, r2, lsl #6
   9:src/sys/clock.c ****     (M<<0)    | (N<<6)  | ((P/2-1)<<16) |
  57              		.loc 1 9 32 view .LVU11
  58 001c 013B     		subs	r3, r3, #1
  59              		.loc 1 10 25 view .LVU12
  60 001e 44EA0344 		orr	r4, r4, r3, lsl #16
   8:src/sys/clock.c ****     (M<<0)    | (N<<6)  | ((P/2-1)<<16) |
  61              		.loc 1 8 15 view .LVU13
  62 0022 054B     		ldr	r3, .L5
  63 0024 5C60     		str	r4, [r3, #4]
  11:src/sys/clock.c ****   
  12:src/sys/clock.c ****   /* Switch on PLL : PLLON=1; */ 
  13:src/sys/clock.c ****   RCC.CR |= 1<<24;
  64              		.loc 1 13 3 is_stmt 1 view .LVU14
  65              		.loc 1 13 6 is_stmt 0 view .LVU15
  66 0026 1A68     		ldr	r2, [r3]
  67              	.LVL2:
  68              		.loc 1 13 10 view .LVU16
  69 0028 42F08072 		orr	r2, r2, #16777216
  70 002c 1A60     		str	r2, [r3]
  14:src/sys/clock.c ****   
  15:src/sys/clock.c ****   /* wait for PLLRDY==1; */
  16:src/sys/clock.c ****   while ((RCC.CR&(1<<25))==0);
  71              		.loc 1 16 3 is_stmt 1 view .LVU17
  72              	.L2:
  73              		.loc 1 16 26 discriminator 1 view .LVU18
  74              		.loc 1 16 14 is_stmt 0 discriminator 1 view .LVU19
  75 002e 1A68     		ldr	r2, [r3]
  76              		.loc 1 16 26 discriminator 1 view .LVU20
  77 0030 9201     		lsls	r2, r2, #6
  78 0032 FCD5     		bpl	.L2
  17:src/sys/clock.c **** }  
  79              		.loc 1 17 1 view .LVU21
  80 0034 30BD     		pop	{r4, r5, pc}
  81              	.LVL3:
  82              	.L6:
  83              		.loc 1 17 1 view .LVU22
  84 0036 00BF     		.align	2
  85              	.L5:
  86 0038 00000000 		.word	RCC
  87              		.cfi_endproc
  88              	.LFE397:
  89              		.size	start_PLL, .-start_PLL
  90              		.align	1
  91              		.global	stop_PLL
  92              		.syntax unified
  93              		.thumb
  94              		.thumb_func
  95              		.type	stop_PLL, %function
  96              	stop_PLL:
  97              	.LFB398:
  18:src/sys/clock.c **** 
  19:src/sys/clock.c **** void stop_PLL() {
  98              		.loc 1 19 17 is_stmt 1 view -0
  99              		.cfi_startproc
 100              		@ args = 0, pretend = 0, frame = 0
 101              		@ frame_needed = 0, uses_anonymous_args = 0
 102              		@ link register save eliminated.
  20:src/sys/clock.c ****   /* Switch off PLL : PLLON=0; */ 
  21:src/sys/clock.c ****   RCC.CR &= ~(1<<24);
 103              		.loc 1 21 3 view .LVU24
 104              		.loc 1 21 6 is_stmt 0 view .LVU25
 105 003c 034A     		ldr	r2, .L8
 106 003e 1368     		ldr	r3, [r2]
 107              		.loc 1 21 10 view .LVU26
 108 0040 23F08073 		bic	r3, r3, #16777216
 109 0044 1360     		str	r3, [r2]
  22:src/sys/clock.c ****   __DSB();
 110              		.loc 1 22 3 is_stmt 1 view .LVU27
 111              	.LBB16:
 112              	.LBI16:
 113              		.file 2 "src/sys/cmsis_gcc.h"
   1:src/sys/cmsis_gcc.h **** /**************************************************************************//**
   2:src/sys/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:src/sys/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:src/sys/cmsis_gcc.h ****  * @version  V4.30
   5:src/sys/cmsis_gcc.h ****  * @date     20. October 2015
   6:src/sys/cmsis_gcc.h ****  ******************************************************************************/
   7:src/sys/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:src/sys/cmsis_gcc.h **** 
   9:src/sys/cmsis_gcc.h ****    All rights reserved.
  10:src/sys/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:src/sys/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:src/sys/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:src/sys/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:src/sys/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:src/sys/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:src/sys/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:src/sys/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:src/sys/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:src/sys/cmsis_gcc.h ****      specific prior written permission.
  20:src/sys/cmsis_gcc.h ****    *
  21:src/sys/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:src/sys/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:src/sys/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:src/sys/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:src/sys/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:src/sys/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:src/sys/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:src/sys/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:src/sys/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:src/sys/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:src/sys/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:src/sys/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:src/sys/cmsis_gcc.h **** 
  34:src/sys/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  35:src/sys/cmsis_gcc.h **** #define __CMSIS_GCC_H
  36:src/sys/cmsis_gcc.h **** 
  37:src/sys/cmsis_gcc.h **** /* ignore some GCC warnings */
  38:src/sys/cmsis_gcc.h **** #if defined ( __GNUC__ )
  39:src/sys/cmsis_gcc.h **** #pragma GCC diagnostic push
  40:src/sys/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  41:src/sys/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  42:src/sys/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  43:src/sys/cmsis_gcc.h **** #endif
  44:src/sys/cmsis_gcc.h **** 
  45:src/sys/cmsis_gcc.h **** 
  46:src/sys/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  47:src/sys/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  48:src/sys/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  49:src/sys/cmsis_gcc.h ****   @{
  50:src/sys/cmsis_gcc.h ****  */
  51:src/sys/cmsis_gcc.h **** 
  52:src/sys/cmsis_gcc.h **** /**
  53:src/sys/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  54:src/sys/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  55:src/sys/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  56:src/sys/cmsis_gcc.h ****  */
  57:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  58:src/sys/cmsis_gcc.h **** {
  59:src/sys/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  60:src/sys/cmsis_gcc.h **** }
  61:src/sys/cmsis_gcc.h **** 
  62:src/sys/cmsis_gcc.h **** 
  63:src/sys/cmsis_gcc.h **** /**
  64:src/sys/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  65:src/sys/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  66:src/sys/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  67:src/sys/cmsis_gcc.h ****  */
  68:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  69:src/sys/cmsis_gcc.h **** {
  70:src/sys/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  71:src/sys/cmsis_gcc.h **** }
  72:src/sys/cmsis_gcc.h **** 
  73:src/sys/cmsis_gcc.h **** 
  74:src/sys/cmsis_gcc.h **** /**
  75:src/sys/cmsis_gcc.h ****   \brief   Get Control Register
  76:src/sys/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  77:src/sys/cmsis_gcc.h ****   \return               Control Register value
  78:src/sys/cmsis_gcc.h ****  */
  79:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  80:src/sys/cmsis_gcc.h **** {
  81:src/sys/cmsis_gcc.h ****   uint32_t result;
  82:src/sys/cmsis_gcc.h **** 
  83:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  84:src/sys/cmsis_gcc.h ****   return(result);
  85:src/sys/cmsis_gcc.h **** }
  86:src/sys/cmsis_gcc.h **** 
  87:src/sys/cmsis_gcc.h **** 
  88:src/sys/cmsis_gcc.h **** /**
  89:src/sys/cmsis_gcc.h ****   \brief   Set Control Register
  90:src/sys/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  91:src/sys/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  92:src/sys/cmsis_gcc.h ****  */
  93:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  94:src/sys/cmsis_gcc.h **** {
  95:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  96:src/sys/cmsis_gcc.h **** }
  97:src/sys/cmsis_gcc.h **** 
  98:src/sys/cmsis_gcc.h **** 
  99:src/sys/cmsis_gcc.h **** /**
 100:src/sys/cmsis_gcc.h ****   \brief   Get IPSR Register
 101:src/sys/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 102:src/sys/cmsis_gcc.h ****   \return               IPSR Register value
 103:src/sys/cmsis_gcc.h ****  */
 104:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 105:src/sys/cmsis_gcc.h **** {
 106:src/sys/cmsis_gcc.h ****   uint32_t result;
 107:src/sys/cmsis_gcc.h **** 
 108:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 109:src/sys/cmsis_gcc.h ****   return(result);
 110:src/sys/cmsis_gcc.h **** }
 111:src/sys/cmsis_gcc.h **** 
 112:src/sys/cmsis_gcc.h **** 
 113:src/sys/cmsis_gcc.h **** /**
 114:src/sys/cmsis_gcc.h ****   \brief   Get APSR Register
 115:src/sys/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 116:src/sys/cmsis_gcc.h ****   \return               APSR Register value
 117:src/sys/cmsis_gcc.h ****  */
 118:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 119:src/sys/cmsis_gcc.h **** {
 120:src/sys/cmsis_gcc.h ****   uint32_t result;
 121:src/sys/cmsis_gcc.h **** 
 122:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 123:src/sys/cmsis_gcc.h ****   return(result);
 124:src/sys/cmsis_gcc.h **** }
 125:src/sys/cmsis_gcc.h **** 
 126:src/sys/cmsis_gcc.h **** 
 127:src/sys/cmsis_gcc.h **** /**
 128:src/sys/cmsis_gcc.h ****   \brief   Get xPSR Register
 129:src/sys/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 130:src/sys/cmsis_gcc.h **** 
 131:src/sys/cmsis_gcc.h ****     \return               xPSR Register value
 132:src/sys/cmsis_gcc.h ****  */
 133:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 134:src/sys/cmsis_gcc.h **** {
 135:src/sys/cmsis_gcc.h ****   uint32_t result;
 136:src/sys/cmsis_gcc.h **** 
 137:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 138:src/sys/cmsis_gcc.h ****   return(result);
 139:src/sys/cmsis_gcc.h **** }
 140:src/sys/cmsis_gcc.h **** 
 141:src/sys/cmsis_gcc.h **** 
 142:src/sys/cmsis_gcc.h **** /**
 143:src/sys/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 144:src/sys/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 145:src/sys/cmsis_gcc.h ****   \return               PSP Register value
 146:src/sys/cmsis_gcc.h ****  */
 147:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 148:src/sys/cmsis_gcc.h **** {
 149:src/sys/cmsis_gcc.h ****   register uint32_t result;
 150:src/sys/cmsis_gcc.h **** 
 151:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 152:src/sys/cmsis_gcc.h ****   return(result);
 153:src/sys/cmsis_gcc.h **** }
 154:src/sys/cmsis_gcc.h **** 
 155:src/sys/cmsis_gcc.h **** 
 156:src/sys/cmsis_gcc.h **** /**
 157:src/sys/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 158:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 159:src/sys/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 160:src/sys/cmsis_gcc.h ****  */
 161:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 162:src/sys/cmsis_gcc.h **** {
 163:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 164:src/sys/cmsis_gcc.h **** }
 165:src/sys/cmsis_gcc.h **** 
 166:src/sys/cmsis_gcc.h **** 
 167:src/sys/cmsis_gcc.h **** /**
 168:src/sys/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 169:src/sys/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 170:src/sys/cmsis_gcc.h ****   \return               MSP Register value
 171:src/sys/cmsis_gcc.h ****  */
 172:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 173:src/sys/cmsis_gcc.h **** {
 174:src/sys/cmsis_gcc.h ****   register uint32_t result;
 175:src/sys/cmsis_gcc.h **** 
 176:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 177:src/sys/cmsis_gcc.h ****   return(result);
 178:src/sys/cmsis_gcc.h **** }
 179:src/sys/cmsis_gcc.h **** 
 180:src/sys/cmsis_gcc.h **** 
 181:src/sys/cmsis_gcc.h **** /**
 182:src/sys/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 183:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 184:src/sys/cmsis_gcc.h **** 
 185:src/sys/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 186:src/sys/cmsis_gcc.h ****  */
 187:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 188:src/sys/cmsis_gcc.h **** {
 189:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 190:src/sys/cmsis_gcc.h **** }
 191:src/sys/cmsis_gcc.h **** 
 192:src/sys/cmsis_gcc.h **** 
 193:src/sys/cmsis_gcc.h **** /**
 194:src/sys/cmsis_gcc.h ****   \brief   Get Priority Mask
 195:src/sys/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 196:src/sys/cmsis_gcc.h ****   \return               Priority Mask value
 197:src/sys/cmsis_gcc.h ****  */
 198:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 199:src/sys/cmsis_gcc.h **** {
 200:src/sys/cmsis_gcc.h ****   uint32_t result;
 201:src/sys/cmsis_gcc.h **** 
 202:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 203:src/sys/cmsis_gcc.h ****   return(result);
 204:src/sys/cmsis_gcc.h **** }
 205:src/sys/cmsis_gcc.h **** 
 206:src/sys/cmsis_gcc.h **** 
 207:src/sys/cmsis_gcc.h **** /**
 208:src/sys/cmsis_gcc.h ****   \brief   Set Priority Mask
 209:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 210:src/sys/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 211:src/sys/cmsis_gcc.h ****  */
 212:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 213:src/sys/cmsis_gcc.h **** {
 214:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 215:src/sys/cmsis_gcc.h **** }
 216:src/sys/cmsis_gcc.h **** 
 217:src/sys/cmsis_gcc.h **** 
 218:src/sys/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 219:src/sys/cmsis_gcc.h **** 
 220:src/sys/cmsis_gcc.h **** /**
 221:src/sys/cmsis_gcc.h ****   \brief   Enable FIQ
 222:src/sys/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 223:src/sys/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 224:src/sys/cmsis_gcc.h ****  */
 225:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 226:src/sys/cmsis_gcc.h **** {
 227:src/sys/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 228:src/sys/cmsis_gcc.h **** }
 229:src/sys/cmsis_gcc.h **** 
 230:src/sys/cmsis_gcc.h **** 
 231:src/sys/cmsis_gcc.h **** /**
 232:src/sys/cmsis_gcc.h ****   \brief   Disable FIQ
 233:src/sys/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 234:src/sys/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 235:src/sys/cmsis_gcc.h ****  */
 236:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 237:src/sys/cmsis_gcc.h **** {
 238:src/sys/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 239:src/sys/cmsis_gcc.h **** }
 240:src/sys/cmsis_gcc.h **** 
 241:src/sys/cmsis_gcc.h **** 
 242:src/sys/cmsis_gcc.h **** /**
 243:src/sys/cmsis_gcc.h ****   \brief   Get Base Priority
 244:src/sys/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 245:src/sys/cmsis_gcc.h ****   \return               Base Priority register value
 246:src/sys/cmsis_gcc.h ****  */
 247:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 248:src/sys/cmsis_gcc.h **** {
 249:src/sys/cmsis_gcc.h ****   uint32_t result;
 250:src/sys/cmsis_gcc.h **** 
 251:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 252:src/sys/cmsis_gcc.h ****   return(result);
 253:src/sys/cmsis_gcc.h **** }
 254:src/sys/cmsis_gcc.h **** 
 255:src/sys/cmsis_gcc.h **** 
 256:src/sys/cmsis_gcc.h **** /**
 257:src/sys/cmsis_gcc.h ****   \brief   Set Base Priority
 258:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 259:src/sys/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 260:src/sys/cmsis_gcc.h ****  */
 261:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 262:src/sys/cmsis_gcc.h **** {
 263:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 264:src/sys/cmsis_gcc.h **** }
 265:src/sys/cmsis_gcc.h **** 
 266:src/sys/cmsis_gcc.h **** 
 267:src/sys/cmsis_gcc.h **** /**
 268:src/sys/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 269:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 270:src/sys/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 271:src/sys/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 272:src/sys/cmsis_gcc.h ****  */
 273:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 274:src/sys/cmsis_gcc.h **** {
 275:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 276:src/sys/cmsis_gcc.h **** }
 277:src/sys/cmsis_gcc.h **** 
 278:src/sys/cmsis_gcc.h **** 
 279:src/sys/cmsis_gcc.h **** /**
 280:src/sys/cmsis_gcc.h ****   \brief   Get Fault Mask
 281:src/sys/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 282:src/sys/cmsis_gcc.h ****   \return               Fault Mask register value
 283:src/sys/cmsis_gcc.h ****  */
 284:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 285:src/sys/cmsis_gcc.h **** {
 286:src/sys/cmsis_gcc.h ****   uint32_t result;
 287:src/sys/cmsis_gcc.h **** 
 288:src/sys/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 289:src/sys/cmsis_gcc.h ****   return(result);
 290:src/sys/cmsis_gcc.h **** }
 291:src/sys/cmsis_gcc.h **** 
 292:src/sys/cmsis_gcc.h **** 
 293:src/sys/cmsis_gcc.h **** /**
 294:src/sys/cmsis_gcc.h ****   \brief   Set Fault Mask
 295:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 296:src/sys/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 297:src/sys/cmsis_gcc.h ****  */
 298:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 299:src/sys/cmsis_gcc.h **** {
 300:src/sys/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 301:src/sys/cmsis_gcc.h **** }
 302:src/sys/cmsis_gcc.h **** 
 303:src/sys/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 304:src/sys/cmsis_gcc.h **** 
 305:src/sys/cmsis_gcc.h **** 
 306:src/sys/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 307:src/sys/cmsis_gcc.h **** 
 308:src/sys/cmsis_gcc.h **** /**
 309:src/sys/cmsis_gcc.h ****   \brief   Get FPSCR
 310:src/sys/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 311:src/sys/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 312:src/sys/cmsis_gcc.h ****  */
 313:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 314:src/sys/cmsis_gcc.h **** {
 315:src/sys/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 316:src/sys/cmsis_gcc.h ****   uint32_t result;
 317:src/sys/cmsis_gcc.h **** 
 318:src/sys/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 319:src/sys/cmsis_gcc.h ****   __ASM volatile ("");
 320:src/sys/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 321:src/sys/cmsis_gcc.h ****   __ASM volatile ("");
 322:src/sys/cmsis_gcc.h ****   return(result);
 323:src/sys/cmsis_gcc.h **** #else
 324:src/sys/cmsis_gcc.h ****    return(0);
 325:src/sys/cmsis_gcc.h **** #endif
 326:src/sys/cmsis_gcc.h **** }
 327:src/sys/cmsis_gcc.h **** 
 328:src/sys/cmsis_gcc.h **** 
 329:src/sys/cmsis_gcc.h **** /**
 330:src/sys/cmsis_gcc.h ****   \brief   Set FPSCR
 331:src/sys/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 332:src/sys/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 333:src/sys/cmsis_gcc.h ****  */
 334:src/sys/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 335:src/sys/cmsis_gcc.h **** {
 336:src/sys/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 337:src/sys/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 338:src/sys/cmsis_gcc.h ****   __ASM volatile ("");
 339:src/sys/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 340:src/sys/cmsis_gcc.h ****   __ASM volatile ("");
 341:src/sys/cmsis_gcc.h **** #endif
 342:src/sys/cmsis_gcc.h **** }
 343:src/sys/cmsis_gcc.h **** 
 344:src/sys/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 345:src/sys/cmsis_gcc.h **** 
 346:src/sys/cmsis_gcc.h **** 
 347:src/sys/cmsis_gcc.h **** 
 348:src/sys/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 349:src/sys/cmsis_gcc.h **** 
 350:src/sys/cmsis_gcc.h **** 
 351:src/sys/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 352:src/sys/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 353:src/sys/cmsis_gcc.h ****   Access to dedicated instructions
 354:src/sys/cmsis_gcc.h ****   @{
 355:src/sys/cmsis_gcc.h **** */
 356:src/sys/cmsis_gcc.h **** 
 357:src/sys/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 358:src/sys/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 359:src/sys/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 360:src/sys/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 361:src/sys/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 362:src/sys/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 363:src/sys/cmsis_gcc.h **** #else
 364:src/sys/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 365:src/sys/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 366:src/sys/cmsis_gcc.h **** #endif
 367:src/sys/cmsis_gcc.h **** 
 368:src/sys/cmsis_gcc.h **** /**
 369:src/sys/cmsis_gcc.h ****   \brief   No Operation
 370:src/sys/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 371:src/sys/cmsis_gcc.h ****  */
 372:src/sys/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 373:src/sys/cmsis_gcc.h **** {
 374:src/sys/cmsis_gcc.h ****   __ASM volatile ("nop");
 375:src/sys/cmsis_gcc.h **** }
 376:src/sys/cmsis_gcc.h **** 
 377:src/sys/cmsis_gcc.h **** 
 378:src/sys/cmsis_gcc.h **** /**
 379:src/sys/cmsis_gcc.h ****   \brief   Wait For Interrupt
 380:src/sys/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 381:src/sys/cmsis_gcc.h ****  */
 382:src/sys/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 383:src/sys/cmsis_gcc.h **** {
 384:src/sys/cmsis_gcc.h ****   __ASM volatile ("wfi");
 385:src/sys/cmsis_gcc.h **** }
 386:src/sys/cmsis_gcc.h **** 
 387:src/sys/cmsis_gcc.h **** 
 388:src/sys/cmsis_gcc.h **** /**
 389:src/sys/cmsis_gcc.h ****   \brief   Wait For Event
 390:src/sys/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 391:src/sys/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 392:src/sys/cmsis_gcc.h ****  */
 393:src/sys/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 394:src/sys/cmsis_gcc.h **** {
 395:src/sys/cmsis_gcc.h ****   __ASM volatile ("wfe");
 396:src/sys/cmsis_gcc.h **** }
 397:src/sys/cmsis_gcc.h **** 
 398:src/sys/cmsis_gcc.h **** 
 399:src/sys/cmsis_gcc.h **** /**
 400:src/sys/cmsis_gcc.h ****   \brief   Send Event
 401:src/sys/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 402:src/sys/cmsis_gcc.h ****  */
 403:src/sys/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 404:src/sys/cmsis_gcc.h **** {
 405:src/sys/cmsis_gcc.h ****   __ASM volatile ("sev");
 406:src/sys/cmsis_gcc.h **** }
 407:src/sys/cmsis_gcc.h **** 
 408:src/sys/cmsis_gcc.h **** 
 409:src/sys/cmsis_gcc.h **** /**
 410:src/sys/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 411:src/sys/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 412:src/sys/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 413:src/sys/cmsis_gcc.h ****            after the instruction has been completed.
 414:src/sys/cmsis_gcc.h ****  */
 415:src/sys/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 416:src/sys/cmsis_gcc.h **** {
 417:src/sys/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 418:src/sys/cmsis_gcc.h **** }
 419:src/sys/cmsis_gcc.h **** 
 420:src/sys/cmsis_gcc.h **** 
 421:src/sys/cmsis_gcc.h **** /**
 422:src/sys/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 423:src/sys/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 424:src/sys/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 425:src/sys/cmsis_gcc.h ****  */
 426:src/sys/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 114              		.loc 2 426 53 view .LVU28
 115              	.LBB17:
 427:src/sys/cmsis_gcc.h **** {
 428:src/sys/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 116              		.loc 2 428 3 view .LVU29
 117              		.syntax unified
 118              	@ 428 "src/sys/cmsis_gcc.h" 1
 119 0046 BFF34F8F 		dsb 0xF
 120              	@ 0 "" 2
 121              		.thumb
 122              		.syntax unified
 123              	.LBE17:
 124              	.LBE16:
  23:src/sys/clock.c **** }  
 125              		.loc 1 23 1 is_stmt 0 view .LVU30
 126 004a 7047     		bx	lr
 127              	.L9:
 128              		.align	2
 129              	.L8:
 130 004c 00000000 		.word	RCC
 131              		.cfi_endproc
 132              	.LFE398:
 133              		.size	stop_PLL, .-stop_PLL
 134              		.align	1
 135              		.global	set_SYSCLK
 136              		.syntax unified
 137              		.thumb
 138              		.thumb_func
 139              		.type	set_SYSCLK, %function
 140              	set_SYSCLK:
 141              	.LVL4:
 142              	.LFB399:
  24:src/sys/clock.c **** 
  25:src/sys/clock.c **** void set_SYSCLK(SW SRC) {
 143              		.loc 1 25 25 is_stmt 1 view -0
 144              		.cfi_startproc
 145              		@ args = 0, pretend = 0, frame = 0
 146              		@ frame_needed = 0, uses_anonymous_args = 0
 147              		@ link register save eliminated.
  26:src/sys/clock.c ****   RCC.CFGR = (RCC.CFGR & ~(0x3<<0)) | ((SRC & 0x3)<<0);
 148              		.loc 1 26 3 view .LVU32
 149              		.loc 1 26 18 is_stmt 0 view .LVU33
 150 0050 054A     		ldr	r2, .L13
 151 0052 9368     		ldr	r3, [r2, #8]
 152              		.loc 1 26 37 view .LVU34
 153 0054 60F30103 		bfi	r3, r0, #0, #2
 154              		.loc 1 26 12 view .LVU35
 155 0058 9360     		str	r3, [r2, #8]
  27:src/sys/clock.c ****   while (((RCC.CFGR>>2) & 3)!=SRC);
 156              		.loc 1 27 3 is_stmt 1 view .LVU36
 157              	.L11:
 158              		.loc 1 27 29 discriminator 1 view .LVU37
 159              		.loc 1 27 15 is_stmt 0 discriminator 1 view .LVU38
 160 005a 9368     		ldr	r3, [r2, #8]
 161              		.loc 1 27 25 discriminator 1 view .LVU39
 162 005c C3F38103 		ubfx	r3, r3, #2, #2
 163              		.loc 1 27 29 discriminator 1 view .LVU40
 164 0060 8342     		cmp	r3, r0
 165 0062 FAD1     		bne	.L11
  28:src/sys/clock.c **** }
 166              		.loc 1 28 1 view .LVU41
 167 0064 7047     		bx	lr
 168              	.L14:
 169 0066 00BF     		.align	2
 170              	.L13:
 171 0068 00000000 		.word	RCC
 172              		.cfi_endproc
 173              	.LFE399:
 174              		.size	set_SYSCLK, .-set_SYSCLK
 175              		.align	1
 176              		.global	set_bus_clock_dividers_exp
 177              		.syntax unified
 178              		.thumb
 179              		.thumb_func
 180              		.type	set_bus_clock_dividers_exp, %function
 181              	set_bus_clock_dividers_exp:
 182              	.LVL5:
 183              	.LFB400:
  29:src/sys/clock.c **** 
  30:src/sys/clock.c **** void set_bus_clock_dividers_exp(uint32_t HPRE__exp,
  31:src/sys/clock.c **** 				  uint32_t PPRE1_exp,
  32:src/sys/clock.c **** 				  uint32_t PPRE2_exp) {
 184              		.loc 1 32 27 is_stmt 1 view -0
 185              		.cfi_startproc
 186              		@ args = 0, pretend = 0, frame = 0
 187              		@ frame_needed = 0, uses_anonymous_args = 0
  33:src/sys/clock.c ****   uint32_t HPRE =(HPRE__exp==0?0:(0x8|((HPRE__exp-1) & 0x7)));
 188              		.loc 1 33 3 view .LVU43
  32:src/sys/clock.c ****   uint32_t HPRE =(HPRE__exp==0?0:(0x8|((HPRE__exp-1) & 0x7)));
 189              		.loc 1 32 27 is_stmt 0 view .LVU44
 190 006c 10B5     		push	{r4, lr}
 191              		.cfi_def_cfa_offset 8
 192              		.cfi_offset 4, -8
 193              		.cfi_offset 14, -4
 194              		.loc 1 33 33 view .LVU45
 195 006e 20B1     		cbz	r0, .L16
 196              		.loc 1 33 50 discriminator 1 view .LVU46
 197 0070 0138     		subs	r0, r0, #1
 198              	.LVL6:
 199              		.loc 1 33 54 discriminator 1 view .LVU47
 200 0072 00F00700 		and	r0, r0, #7
 201              	.LVL7:
 202              		.loc 1 33 33 discriminator 1 view .LVU48
 203 0076 40F00800 		orr	r0, r0, #8
 204              	.L16:
 205              	.LVL8:
  34:src/sys/clock.c ****   uint32_t PPRE1=(PPRE1_exp==0?0:(0x4|((PPRE1_exp-1) & 0x3)));
 206              		.loc 1 34 3 is_stmt 1 view .LVU49
 207              		.loc 1 34 33 is_stmt 0 view .LVU50
 208 007a 21B1     		cbz	r1, .L17
 209              		.loc 1 34 50 discriminator 1 view .LVU51
 210 007c 0139     		subs	r1, r1, #1
 211              	.LVL9:
 212              		.loc 1 34 54 discriminator 1 view .LVU52
 213 007e 01F00301 		and	r1, r1, #3
 214              	.LVL10:
 215              		.loc 1 34 33 discriminator 1 view .LVU53
 216 0082 41F00401 		orr	r1, r1, #4
 217              	.L17:
 218              	.LVL11:
  35:src/sys/clock.c ****   uint32_t PPRE2=(PPRE2_exp==0?0:(0x4|((PPRE2_exp-1) & 0x3)));
 219              		.loc 1 35 3 is_stmt 1 view .LVU54
 220              		.loc 1 35 33 is_stmt 0 view .LVU55
 221 0086 22B1     		cbz	r2, .L18
 222              		.loc 1 35 50 discriminator 1 view .LVU56
 223 0088 013A     		subs	r2, r2, #1
 224              	.LVL12:
 225              		.loc 1 35 54 discriminator 1 view .LVU57
 226 008a 02F00302 		and	r2, r2, #3
 227              	.LVL13:
 228              		.loc 1 35 33 discriminator 1 view .LVU58
 229 008e 42F00402 		orr	r2, r2, #4
 230              	.L18:
 231              	.LVL14:
  36:src/sys/clock.c ****   RCC.CFGR=
 232              		.loc 1 36 3 is_stmt 1 view .LVU59
  37:src/sys/clock.c ****     (RCC.CFGR & ~0xfcf0) | 
 233              		.loc 1 37 9 is_stmt 0 view .LVU60
 234 0092 074C     		ldr	r4, .L28
 235 0094 A368     		ldr	r3, [r4, #8]
 236              		.loc 1 37 15 view .LVU61
 237 0096 23F47C43 		bic	r3, r3, #64512
 238 009a 23F0F003 		bic	r3, r3, #240
 239              		.loc 1 37 26 view .LVU62
 240 009e 43EA0013 		orr	r3, r3, r0, lsl #4
 241 00a2 43EA8121 		orr	r1, r3, r1, lsl #10
 242              	.LVL15:
 243              		.loc 1 37 26 view .LVU63
 244 00a6 41EA4232 		orr	r2, r1, r2, lsl #13
 245              	.LVL16:
  36:src/sys/clock.c ****   RCC.CFGR=
 246              		.loc 1 36 11 view .LVU64
 247 00aa A260     		str	r2, [r4, #8]
  38:src/sys/clock.c ****     ((HPRE<<4) | (PPRE1<<10) | (PPRE2<<13));
  39:src/sys/clock.c **** }
 248              		.loc 1 39 1 view .LVU65
 249 00ac 10BD     		pop	{r4, pc}
 250              	.L29:
 251 00ae 00BF     		.align	2
 252              	.L28:
 253 00b0 00000000 		.word	RCC
 254              		.cfi_endproc
 255              	.LFE400:
 256              		.size	set_bus_clock_dividers_exp, .-set_bus_clock_dividers_exp
 257              		.align	1
 258              		.global	set_MCO
 259              		.syntax unified
 260              		.thumb
 261              		.thumb_func
 262              		.type	set_MCO, %function
 263              	set_MCO:
 264              	.LVL17:
 265              	.LFB401:
  40:src/sys/clock.c **** 
  41:src/sys/clock.c **** void set_MCO(MCO1SRC SRC1,uint32_t DIV1,MCO2SRC SRC2,uint32_t DIV2) {
 266              		.loc 1 41 69 is_stmt 1 view -0
 267              		.cfi_startproc
 268              		@ args = 0, pretend = 0, frame = 0
 269              		@ frame_needed = 0, uses_anonymous_args = 0
  42:src/sys/clock.c ****   uint32_t MCO1=SRC1&0x3;
 270              		.loc 1 42 3 view .LVU67
  41:src/sys/clock.c ****   uint32_t MCO1=SRC1&0x3;
 271              		.loc 1 41 69 is_stmt 0 view .LVU68
 272 00b4 30B5     		push	{r4, r5, lr}
 273              		.cfi_def_cfa_offset 12
 274              		.cfi_offset 4, -12
 275              		.cfi_offset 5, -8
 276              		.cfi_offset 14, -4
  43:src/sys/clock.c ****   uint32_t MCO2=SRC2&0x3;
  44:src/sys/clock.c ****   uint32_t MCO1PRE=((DIV1<=1)?0:((DIV1+2)&0x7));
  45:src/sys/clock.c ****   uint32_t MCO2PRE=((DIV2<=1)?0:((DIV2+2)&0x7));
  46:src/sys/clock.c ****   RCC.CFGR = (RCC.CFGR & ~0xff600000) |
 277              		.loc 1 46 18 view .LVU69
 278 00b6 114D     		ldr	r5, .L35
 279 00b8 AC68     		ldr	r4, [r5, #8]
  44:src/sys/clock.c ****   uint32_t MCO2PRE=((DIV2<=1)?0:((DIV2+2)&0x7));
 280              		.loc 1 44 32 view .LVU70
 281 00ba 0129     		cmp	r1, #1
 282              		.loc 1 46 24 view .LVU71
 283 00bc 24F07F44 		bic	r4, r4, #-16777216
  44:src/sys/clock.c ****   uint32_t MCO2PRE=((DIV2<=1)?0:((DIV2+2)&0x7));
 284              		.loc 1 44 39 discriminator 1 view .LVU72
 285 00c0 88BF     		it	hi
 286 00c2 0231     		addhi	r1, r1, #2
 287              	.LVL18:
  43:src/sys/clock.c ****   uint32_t MCO2=SRC2&0x3;
 288              		.loc 1 43 12 view .LVU73
 289 00c4 02F00302 		and	r2, r2, #3
 290              	.LVL19:
 291              		.loc 1 46 24 view .LVU74
 292 00c8 24F4C004 		bic	r4, r4, #6291456
  44:src/sys/clock.c ****   uint32_t MCO2PRE=((DIV2<=1)?0:((DIV2+2)&0x7));
 293              		.loc 1 44 32 discriminator 1 view .LVU75
 294 00cc 8CBF     		ite	hi
 295 00ce 01F00701 		andhi	r1, r1, #7
  44:src/sys/clock.c ****   uint32_t MCO2PRE=((DIV2<=1)?0:((DIV2+2)&0x7));
 296              		.loc 1 44 32 discriminator 2 view .LVU76
 297 00d2 0021     		movls	r1, #0
  42:src/sys/clock.c ****   uint32_t MCO2=SRC2&0x3;
 298              		.loc 1 42 12 view .LVU77
 299 00d4 00F00300 		and	r0, r0, #3
 300              	.LVL20:
  43:src/sys/clock.c ****   uint32_t MCO2=SRC2&0x3;
 301              		.loc 1 43 3 is_stmt 1 view .LVU78
  44:src/sys/clock.c ****   uint32_t MCO2PRE=((DIV2<=1)?0:((DIV2+2)&0x7));
 302              		.loc 1 44 3 view .LVU79
  45:src/sys/clock.c ****   RCC.CFGR = (RCC.CFGR & ~0xff600000) |
 303              		.loc 1 45 3 view .LVU80
  45:src/sys/clock.c ****   RCC.CFGR = (RCC.CFGR & ~0xff600000) |
 304              		.loc 1 45 32 is_stmt 0 view .LVU81
 305 00d8 012B     		cmp	r3, #1
 306              		.loc 1 46 39 view .LVU82
 307 00da 44EA8274 		orr	r4, r4, r2, lsl #30
  45:src/sys/clock.c ****   RCC.CFGR = (RCC.CFGR & ~0xff600000) |
 308              		.loc 1 45 39 discriminator 1 view .LVU83
 309 00de 88BF     		it	hi
 310 00e0 0233     		addhi	r3, r3, #2
 311              	.LVL21:
 312              		.loc 1 46 39 view .LVU84
 313 00e2 44EA4054 		orr	r4, r4, r0, lsl #21
  45:src/sys/clock.c ****   RCC.CFGR = (RCC.CFGR & ~0xff600000) |
 314              		.loc 1 45 32 discriminator 1 view .LVU85
 315 00e6 8CBF     		ite	hi
 316 00e8 03F00703 		andhi	r3, r3, #7
  45:src/sys/clock.c ****   RCC.CFGR = (RCC.CFGR & ~0xff600000) |
 317              		.loc 1 45 32 discriminator 2 view .LVU86
 318 00ec 0023     		movls	r3, #0
 319              	.LVL22:
 320              		.loc 1 46 3 is_stmt 1 view .LVU87
 321              		.loc 1 46 39 is_stmt 0 view .LVU88
 322 00ee 44EA0164 		orr	r4, r4, r1, lsl #24
 323 00f2 44EAC364 		orr	r4, r4, r3, lsl #27
 324              		.loc 1 46 12 view .LVU89
 325 00f6 AC60     		str	r4, [r5, #8]
  47:src/sys/clock.c ****     ((MCO1<<21) | (MCO1PRE<<24) |
  48:src/sys/clock.c ****      (MCO2PRE<<27) | (MCO2<<30));
  49:src/sys/clock.c **** }
 326              		.loc 1 49 1 view .LVU90
 327 00f8 30BD     		pop	{r4, r5, pc}
 328              	.L36:
 329 00fa 00BF     		.align	2
 330              	.L35:
 331 00fc 00000000 		.word	RCC
 332              		.cfi_endproc
 333              	.LFE401:
 334              		.size	set_MCO, .-set_MCO
 335              		.align	1
 336              		.global	enable_MCO_GPIO
 337              		.syntax unified
 338              		.thumb
 339              		.thumb_func
 340              		.type	enable_MCO_GPIO, %function
 341              	enable_MCO_GPIO:
 342              	.LFB402:
  50:src/sys/clock.c **** 
  51:src/sys/clock.c **** void enable_MCO_GPIO() {
 343              		.loc 1 51 24 is_stmt 1 view -0
 344              		.cfi_startproc
 345              		@ args = 0, pretend = 0, frame = 0
 346              		@ frame_needed = 0, uses_anonymous_args = 0
 347              		@ link register save eliminated.
  52:src/sys/clock.c **** 
  53:src/sys/clock.c ****   enable_GPIOA();
 348              		.loc 1 53 3 view .LVU92
 349              	.LBB18:
 350              	.LBI18:
 351              		.file 3 "src/sys/devices.h"
   1:src/sys/devices.h **** #ifndef __IO_H
   2:src/sys/devices.h **** #define __IO_H
   3:src/sys/devices.h **** 
   4:src/sys/devices.h **** #include<stdint.h>
   5:src/sys/devices.h **** #include "cm4.h"
   6:src/sys/devices.h **** 
   7:src/sys/devices.h **** #define __reserved(offset) \
   8:src/sys/devices.h ****   uint32_t _reserved_ ## offset
   9:src/sys/devices.h **** 
  10:src/sys/devices.h **** #define __reserved_interval(offset1,offset2) \
  11:src/sys/devices.h ****   uint32_t _reserved_ ## offset1 ## _ ## offset2[((offset2)-(offset1))/4]
  12:src/sys/devices.h **** 
  13:src/sys/devices.h **** /* PM §4.2.10 */ 
  14:src/sys/devices.h **** struct MPU_registers {
  15:src/sys/devices.h ****   uint32_t TYPER;
  16:src/sys/devices.h ****   uint32_t CTRL;
  17:src/sys/devices.h ****   uint32_t RNR;
  18:src/sys/devices.h ****   uint32_t RBAR;
  19:src/sys/devices.h ****   uint32_t RASR;
  20:src/sys/devices.h ****   uint32_t RBAR_A1;
  21:src/sys/devices.h ****   uint32_t RASR_A1;
  22:src/sys/devices.h ****   uint32_t RBAR_A2;
  23:src/sys/devices.h ****   uint32_t RASR_A2;
  24:src/sys/devices.h ****   uint32_t RBAR_A3;
  25:src/sys/devices.h ****   uint32_t RASR_A3;
  26:src/sys/devices.h **** };
  27:src/sys/devices.h **** 
  28:src/sys/devices.h **** /* PM §4.3.11 */ 
  29:src/sys/devices.h **** struct NVIC_registers {
  30:src/sys/devices.h ****   uint32_t ISER[3];
  31:src/sys/devices.h ****   __reserved_interval(0x0c,0x80);
  32:src/sys/devices.h ****   uint32_t ICER[3];
  33:src/sys/devices.h ****   __reserved_interval(0x8c,0x100);
  34:src/sys/devices.h ****   uint32_t ISPR[3];
  35:src/sys/devices.h ****   __reserved_interval(0x10c,0x180);
  36:src/sys/devices.h ****   uint32_t ICPR[3];
  37:src/sys/devices.h ****   __reserved_interval(0x18c,0x200);
  38:src/sys/devices.h ****   uint32_t IABR[3];
  39:src/sys/devices.h ****   __reserved_interval(0x20c,0x300);
  40:src/sys/devices.h ****   uint8_t  IP[81];
  41:src/sys/devices.h ****   uint8_t _reserved_bytes[3];
  42:src/sys/devices.h **** };
  43:src/sys/devices.h **** 
  44:src/sys/devices.h **** /* PM §4.4.19 */ 
  45:src/sys/devices.h **** struct SCB_registers {
  46:src/sys/devices.h ****   uint32_t CPUID;
  47:src/sys/devices.h ****   uint32_t ICSR;
  48:src/sys/devices.h ****   uint32_t VTOR;
  49:src/sys/devices.h ****   uint32_t AIRCR;
  50:src/sys/devices.h ****   uint32_t SCR;
  51:src/sys/devices.h ****   uint32_t CCR;
  52:src/sys/devices.h ****   uint32_t SHPR1;
  53:src/sys/devices.h ****   uint32_t SHPR2;
  54:src/sys/devices.h ****   uint32_t SHPR3;
  55:src/sys/devices.h ****   uint32_t SHCRS;
  56:src/sys/devices.h ****   uint32_t CFSR;
  57:src/sys/devices.h ****   uint32_t HFSR;
  58:src/sys/devices.h ****   uint32_t MMAR;
  59:src/sys/devices.h ****   uint32_t BFAR;
  60:src/sys/devices.h ****   uint32_t AFSR;
  61:src/sys/devices.h **** };
  62:src/sys/devices.h **** 
  63:src/sys/devices.h **** /* PM §4.5.6 */ 
  64:src/sys/devices.h **** struct STK_registers {
  65:src/sys/devices.h ****   uint32_t CTRL;
  66:src/sys/devices.h ****   uint32_t LOAD;
  67:src/sys/devices.h ****   uint32_t VAL;
  68:src/sys/devices.h ****   uint32_t CALIB;
  69:src/sys/devices.h **** };
  70:src/sys/devices.h **** 
  71:src/sys/devices.h **** /* PM §4.6 */ 
  72:src/sys/devices.h **** struct FPU_registers {
  73:src/sys/devices.h ****   __reserved(0x0);
  74:src/sys/devices.h ****   uint32_t CCR;
  75:src/sys/devices.h ****   uint32_t CAR;
  76:src/sys/devices.h ****   uint32_t DSCR;
  77:src/sys/devices.h **** };
  78:src/sys/devices.h **** 
  79:src/sys/devices.h **** 
  80:src/sys/devices.h **** /* RM §3.6.7 */ 
  81:src/sys/devices.h **** struct FLASH_registers {
  82:src/sys/devices.h ****   uint32_t ACR;
  83:src/sys/devices.h ****   uint32_t KEYR;
  84:src/sys/devices.h ****   uint32_t OPTKEYR;
  85:src/sys/devices.h ****   uint32_t SR;
  86:src/sys/devices.h ****   uint32_t CR;
  87:src/sys/devices.h ****   uint32_t OPTCR;  
  88:src/sys/devices.h **** };
  89:src/sys/devices.h **** 
  90:src/sys/devices.h **** /* RM §4.4.4 */
  91:src/sys/devices.h **** struct CRC_registers {
  92:src/sys/devices.h ****   uint32_t DR;
  93:src/sys/devices.h ****   uint32_t ICR;
  94:src/sys/devices.h ****   uint32_t CR;
  95:src/sys/devices.h **** };
  96:src/sys/devices.h **** 
  97:src/sys/devices.h **** /* RM §5.5 */
  98:src/sys/devices.h **** struct PWR_registers {
  99:src/sys/devices.h ****   uint32_t CR;
 100:src/sys/devices.h ****   uint32_t CSR;
 101:src/sys/devices.h **** };
 102:src/sys/devices.h **** 
 103:src/sys/devices.h **** /* RM §6.3.28 */
 104:src/sys/devices.h **** struct RCC_registers {
 105:src/sys/devices.h ****   uint32_t CR;
 106:src/sys/devices.h ****   uint32_t PLLCFGR;
 107:src/sys/devices.h ****   uint32_t CFGR;
 108:src/sys/devices.h ****   uint32_t CIR;
 109:src/sys/devices.h ****   uint32_t AHB1RSTR;
 110:src/sys/devices.h ****   uint32_t AHB2RSTR;
 111:src/sys/devices.h ****   uint32_t AHB3RSTR;
 112:src/sys/devices.h ****   __reserved(0x1c);
 113:src/sys/devices.h ****   uint32_t APB1RSTR;
 114:src/sys/devices.h ****   uint32_t APB2RSTR;
 115:src/sys/devices.h ****   __reserved(0x28);
 116:src/sys/devices.h ****   __reserved(0x2c);
 117:src/sys/devices.h ****   uint32_t AHB1ENR;
 118:src/sys/devices.h ****   uint32_t AHB2ENR;
 119:src/sys/devices.h ****   uint32_t AHB3ENR;
 120:src/sys/devices.h ****   __reserved(0x3c);
 121:src/sys/devices.h ****   uint32_t APB1ENR;
 122:src/sys/devices.h ****   uint32_t APB2ENR;
 123:src/sys/devices.h ****   __reserved(0x48);
 124:src/sys/devices.h ****   __reserved(0x4c);
 125:src/sys/devices.h ****   uint32_t AHB1LPENR;
 126:src/sys/devices.h ****   uint32_t AHB2LPENR;
 127:src/sys/devices.h ****   uint32_t AHB3LPENR;
 128:src/sys/devices.h ****   __reserved(0x5c);
 129:src/sys/devices.h ****   uint32_t APB1LPENR;
 130:src/sys/devices.h ****   uint32_t APB2LPENR;
 131:src/sys/devices.h ****   __reserved(0x68);
 132:src/sys/devices.h ****   __reserved(0x6c);
 133:src/sys/devices.h ****   uint32_t BDCR;
 134:src/sys/devices.h ****   uint32_t CSR;
 135:src/sys/devices.h ****   __reserved(0x78);
 136:src/sys/devices.h ****   __reserved(0x7c);
 137:src/sys/devices.h ****   uint32_t SSCGR;
 138:src/sys/devices.h ****   uint32_t PLLI2SCFGR;
 139:src/sys/devices.h ****   uint32_t PLLSAICFGR;
 140:src/sys/devices.h ****   uint32_t DCKCFGR;
 141:src/sys/devices.h ****   uint32_t CKGATENR;
 142:src/sys/devices.h ****   uint32_t DCKCFGR2;
 143:src/sys/devices.h **** };
 144:src/sys/devices.h **** 
 145:src/sys/devices.h **** /* RM §7.4.11 */
 146:src/sys/devices.h **** struct GPIO_registers {
 147:src/sys/devices.h ****   uint32_t MODER;
 148:src/sys/devices.h ****   uint32_t OTYPER;
 149:src/sys/devices.h ****   uint32_t OSPEEDR;
 150:src/sys/devices.h ****   uint32_t PUPDR;
 151:src/sys/devices.h ****   uint32_t IDR;
 152:src/sys/devices.h ****   uint32_t ODR;
 153:src/sys/devices.h ****   uint32_t BSRR;
 154:src/sys/devices.h ****   uint32_t LCKR;
 155:src/sys/devices.h ****   uint32_t AFRL;
 156:src/sys/devices.h ****   uint32_t AFRH;
 157:src/sys/devices.h **** };
 158:src/sys/devices.h **** 
 159:src/sys/devices.h **** /* RM §8.2.9 */
 160:src/sys/devices.h **** struct SYSCFG_registers {
 161:src/sys/devices.h ****   uint32_t MEMRMP;
 162:src/sys/devices.h ****   uint32_t PMC;
 163:src/sys/devices.h ****   uint32_t EXTICR1;
 164:src/sys/devices.h ****   uint32_t EXTICR2;
 165:src/sys/devices.h ****   uint32_t EXTICR3;
 166:src/sys/devices.h ****   uint32_t EXTICR4;
 167:src/sys/devices.h ****   __reserved(0x18);
 168:src/sys/devices.h ****   __reserved(0x1c);
 169:src/sys/devices.h ****   uint32_t CMPCR;
 170:src/sys/devices.h ****   __reserved(0x24);
 171:src/sys/devices.h ****   __reserved(0x28);
 172:src/sys/devices.h ****   uint32_t CFGR;
 173:src/sys/devices.h **** };
 174:src/sys/devices.h **** 
 175:src/sys/devices.h **** /* RM §9.5.11 */
 176:src/sys/devices.h **** struct DMA_Sx_registers {
 177:src/sys/devices.h ****   uint32_t CR;
 178:src/sys/devices.h ****   uint32_t NDTR;
 179:src/sys/devices.h ****   volatile void* PAR;
 180:src/sys/devices.h ****   volatile void* M0AR;
 181:src/sys/devices.h ****   volatile void* M1AR;
 182:src/sys/devices.h ****   uint32_t FCR;
 183:src/sys/devices.h **** };
 184:src/sys/devices.h **** struct DMA_registers {
 185:src/sys/devices.h ****   uint32_t LISR;
 186:src/sys/devices.h ****   uint32_t HISR;
 187:src/sys/devices.h ****   uint32_t LIFCR;
 188:src/sys/devices.h ****   uint32_t HIFCR;
 189:src/sys/devices.h ****   struct DMA_Sx_registers S[8];
 190:src/sys/devices.h **** };
 191:src/sys/devices.h **** 
 192:src/sys/devices.h **** /* RM §10.3.7 */
 193:src/sys/devices.h **** struct EXTI_registers {
 194:src/sys/devices.h ****   uint32_t IMR;
 195:src/sys/devices.h ****   uint32_t EMR;
 196:src/sys/devices.h ****   uint32_t RTSR;
 197:src/sys/devices.h ****   uint32_t FTSR;
 198:src/sys/devices.h ****   uint32_t SWIER;
 199:src/sys/devices.h ****   uint32_t PR;
 200:src/sys/devices.h **** };
 201:src/sys/devices.h **** 
 202:src/sys/devices.h **** /* RM §11.8 */
 203:src/sys/devices.h **** struct FMC_registers {
 204:src/sys/devices.h ****   uint32_t BCR1;
 205:src/sys/devices.h ****   uint32_t BCR2;
 206:src/sys/devices.h ****   uint32_t BCR3;
 207:src/sys/devices.h ****   uint32_t BCR4;
 208:src/sys/devices.h ****   uint32_t BTR1;
 209:src/sys/devices.h ****   uint32_t BTR2;
 210:src/sys/devices.h ****   uint32_t BTR3;
 211:src/sys/devices.h ****   uint32_t BTR4;
 212:src/sys/devices.h ****   uint32_t BWTR1;
 213:src/sys/devices.h ****   uint32_t BWTR2;
 214:src/sys/devices.h ****   uint32_t BWTR3;
 215:src/sys/devices.h ****   uint32_t BWTR4;
 216:src/sys/devices.h ****   uint32_t PCR;
 217:src/sys/devices.h ****   uint32_t SR;
 218:src/sys/devices.h ****   uint32_t PMEM;
 219:src/sys/devices.h ****   uint32_t PATT;
 220:src/sys/devices.h ****   uint32_t ECCR;
 221:src/sys/devices.h ****   uint32_t SDCR1;
 222:src/sys/devices.h ****   uint32_t SDCR2;
 223:src/sys/devices.h ****   uint32_t SDTR1;
 224:src/sys/devices.h ****   uint32_t SDTR2;
 225:src/sys/devices.h ****   uint32_t SDCMR;
 226:src/sys/devices.h ****   uint32_t SDRTR;
 227:src/sys/devices.h ****   uint32_t SDSR;
 228:src/sys/devices.h **** };
 229:src/sys/devices.h **** 
 230:src/sys/devices.h **** /* RM §12.5.14 */
 231:src/sys/devices.h **** struct QUADSPI_registers {
 232:src/sys/devices.h ****   uint32_t CR;
 233:src/sys/devices.h ****   uint32_t DCR;
 234:src/sys/devices.h ****   uint32_t SR;
 235:src/sys/devices.h ****   uint32_t FCR;
 236:src/sys/devices.h ****   uint32_t DLR;
 237:src/sys/devices.h ****   uint32_t CCR;
 238:src/sys/devices.h ****   uint32_t AR;
 239:src/sys/devices.h ****   uint32_t ABR;
 240:src/sys/devices.h ****   uint32_t DR;
 241:src/sys/devices.h ****   uint32_t PSMKR;
 242:src/sys/devices.h ****   uint32_t PSMAR;
 243:src/sys/devices.h ****   uint32_t PIR;
 244:src/sys/devices.h ****   uint32_t LPTR;
 245:src/sys/devices.h **** };
 246:src/sys/devices.h **** 
 247:src/sys/devices.h **** /* RM §13.13.18 */
 248:src/sys/devices.h **** struct ADCx_registers {
 249:src/sys/devices.h ****   uint32_t SR;
 250:src/sys/devices.h ****   uint32_t CR1;
 251:src/sys/devices.h ****   uint32_t CR2;
 252:src/sys/devices.h ****   uint32_t SMPR1;
 253:src/sys/devices.h ****   uint32_t SMPR2;
 254:src/sys/devices.h ****   uint32_t JOFR1;
 255:src/sys/devices.h ****   uint32_t JOFR2;
 256:src/sys/devices.h ****   uint32_t JOFR3;
 257:src/sys/devices.h ****   uint32_t JOFR4;
 258:src/sys/devices.h ****   uint32_t HTR;
 259:src/sys/devices.h ****   uint32_t LTR;
 260:src/sys/devices.h ****   uint32_t SQR1;
 261:src/sys/devices.h ****   uint32_t SQR2;
 262:src/sys/devices.h ****   uint32_t SQR3;
 263:src/sys/devices.h ****   uint32_t JSQR;
 264:src/sys/devices.h ****   uint32_t JDR1;
 265:src/sys/devices.h ****   uint32_t JDR2;
 266:src/sys/devices.h ****   uint32_t JDR3;
 267:src/sys/devices.h ****   uint32_t JDR4;
 268:src/sys/devices.h ****   uint32_t DR;
 269:src/sys/devices.h **** };
 270:src/sys/devices.h **** 
 271:src/sys/devices.h **** struct ADC_common_registers {
 272:src/sys/devices.h ****   uint32_t CSR;
 273:src/sys/devices.h ****   uint32_t CCR;
 274:src/sys/devices.h ****   uint32_t CDR;
 275:src/sys/devices.h **** };
 276:src/sys/devices.h **** 
 277:src/sys/devices.h **** 
 278:src/sys/devices.h **** /* RM §14.5.15 */
 279:src/sys/devices.h **** struct DAC_registers {
 280:src/sys/devices.h ****   uint32_t CR;
 281:src/sys/devices.h ****   uint32_t SWTRIGR;
 282:src/sys/devices.h ****   uint32_t DHR12R1;
 283:src/sys/devices.h ****   uint32_t DHR12L1;
 284:src/sys/devices.h ****   uint32_t DHR8R1;
 285:src/sys/devices.h ****   uint32_t DHR12R2;
 286:src/sys/devices.h ****   uint32_t DHR12L2;
 287:src/sys/devices.h ****   uint32_t DHR8R2;
 288:src/sys/devices.h ****   uint32_t DHR12RD;
 289:src/sys/devices.h ****   uint32_t DHR12LD;
 290:src/sys/devices.h ****   uint32_t DHR8RD;
 291:src/sys/devices.h ****   uint32_t DOR1;
 292:src/sys/devices.h ****   uint32_t DOR2;
 293:src/sys/devices.h ****   uint32_t SR;
 294:src/sys/devices.h **** };
 295:src/sys/devices.h **** 
 296:src/sys/devices.h **** /* RM §15.8.12 */
 297:src/sys/devices.h **** struct DCMI_registers {
 298:src/sys/devices.h ****   uint32_t CR;
 299:src/sys/devices.h ****   uint32_t SR;
 300:src/sys/devices.h ****   uint32_t RIS;
 301:src/sys/devices.h ****   uint32_t IER;
 302:src/sys/devices.h ****   uint32_t MIS;
 303:src/sys/devices.h ****   uint32_t ICR;
 304:src/sys/devices.h ****   uint32_t ESCR;
 305:src/sys/devices.h ****   uint32_t ESUR;
 306:src/sys/devices.h ****   uint32_t CWSTRT;
 307:src/sys/devices.h ****   uint32_t CWSIZE;
 308:src/sys/devices.h ****   uint32_t DR;
 309:src/sys/devices.h **** };
 310:src/sys/devices.h **** 
 311:src/sys/devices.h **** /* RM §16.4.21 TIM1,8 */
 312:src/sys/devices.h **** /* RM §17.4.21 TIM2,3,4,5 */
 313:src/sys/devices.h **** /* RM §18.4.13 TIM9,12 */
 314:src/sys/devices.h **** /* RM §18.5.1  TIM10,11,13,14 */
 315:src/sys/devices.h **** /* RM §19.4.9  TIM6,7 */
 316:src/sys/devices.h **** struct TIMx_registers {
 317:src/sys/devices.h ****   uint32_t CR1;
 318:src/sys/devices.h ****   uint32_t CR2;
 319:src/sys/devices.h ****   uint32_t SMCR;
 320:src/sys/devices.h ****   uint32_t DIER;
 321:src/sys/devices.h ****   uint32_t SR;
 322:src/sys/devices.h ****   uint32_t EGR;
 323:src/sys/devices.h ****   uint32_t CCMR1;
 324:src/sys/devices.h ****   uint32_t CCMR2;
 325:src/sys/devices.h ****   uint32_t CCER;
 326:src/sys/devices.h ****   uint32_t CNT;
 327:src/sys/devices.h ****   uint32_t PSC;
 328:src/sys/devices.h ****   uint32_t ARR;
 329:src/sys/devices.h ****   uint32_t RCR;
 330:src/sys/devices.h ****   uint32_t CCR1;
 331:src/sys/devices.h ****   uint32_t CCR2;
 332:src/sys/devices.h ****   uint32_t CCR3;
 333:src/sys/devices.h ****   uint32_t CCR4;
 334:src/sys/devices.h ****   uint32_t BDTR;
 335:src/sys/devices.h ****   uint32_t DCR;
 336:src/sys/devices.h ****   uint32_t DMAR;
 337:src/sys/devices.h ****   uint32_t OR;
 338:src/sys/devices.h **** };
 339:src/sys/devices.h **** 
 340:src/sys/devices.h **** /* RM §20.4.5 */
 341:src/sys/devices.h **** struct IWDG_registers {
 342:src/sys/devices.h ****   uint32_t KR;
 343:src/sys/devices.h ****   uint32_t PR;
 344:src/sys/devices.h ****   uint32_t RLR;
 345:src/sys/devices.h ****   uint32_t SR;
 346:src/sys/devices.h **** };
 347:src/sys/devices.h **** 
 348:src/sys/devices.h **** /* RM §21.6.4 */
 349:src/sys/devices.h **** struct WWDG_registers {
 350:src/sys/devices.h ****   uint32_t CR;
 351:src/sys/devices.h ****   uint32_t CFR;
 352:src/sys/devices.h ****   uint32_t SR;
 353:src/sys/devices.h **** };
 354:src/sys/devices.h **** 
 355:src/sys/devices.h **** /* RM §22.6.21 */
 356:src/sys/devices.h **** struct RTC_registers {
 357:src/sys/devices.h ****   uint32_t TR;
 358:src/sys/devices.h ****   uint32_t DR;
 359:src/sys/devices.h ****   uint32_t CR;
 360:src/sys/devices.h ****   uint32_t ISR;
 361:src/sys/devices.h ****   uint32_t PRER;
 362:src/sys/devices.h ****   uint32_t WUTR;
 363:src/sys/devices.h ****   uint32_t CALIBR;
 364:src/sys/devices.h ****   uint32_t ALRMAR;
 365:src/sys/devices.h ****   uint32_t ALRMBR;
 366:src/sys/devices.h ****   uint32_t WPR;
 367:src/sys/devices.h ****   uint32_t SSR;
 368:src/sys/devices.h ****   uint32_t SHIFTR;
 369:src/sys/devices.h ****   uint32_t TSTR;
 370:src/sys/devices.h ****   uint32_t TSSSR;
 371:src/sys/devices.h ****   uint32_t CALR;
 372:src/sys/devices.h ****   uint32_t TAFCR;
 373:src/sys/devices.h ****   uint32_t ALRMASSR;
 374:src/sys/devices.h ****   uint32_t ALRMBSSR;
 375:src/sys/devices.h ****   uint32_t BKPR[20];
 376:src/sys/devices.h **** };
 377:src/sys/devices.h **** 
 378:src/sys/devices.h **** /* RM §23.7.12 */
 379:src/sys/devices.h **** struct FMPI2C_registers {
 380:src/sys/devices.h ****   uint32_t CR1;
 381:src/sys/devices.h ****   uint32_t CR2;
 382:src/sys/devices.h ****   uint32_t OAR1;
 383:src/sys/devices.h ****   uint32_t OAR2;
 384:src/sys/devices.h ****   uint32_t TIMINGR;
 385:src/sys/devices.h ****   uint32_t TIMEOUTR;
 386:src/sys/devices.h ****   uint32_t ISR;
 387:src/sys/devices.h ****   uint32_t ICR;
 388:src/sys/devices.h ****   uint32_t PECR;
 389:src/sys/devices.h ****   uint32_t RXDR;
 390:src/sys/devices.h ****   uint32_t TXDR;
 391:src/sys/devices.h **** };
 392:src/sys/devices.h **** 
 393:src/sys/devices.h **** /* RM §24.6.14 */
 394:src/sys/devices.h **** struct I2C_registers {
 395:src/sys/devices.h ****   uint32_t CR1;
 396:src/sys/devices.h ****   uint32_t CR2;
 397:src/sys/devices.h ****   uint32_t OAR1;
 398:src/sys/devices.h ****   uint32_t OAR2;
 399:src/sys/devices.h ****   uint32_t DR;
 400:src/sys/devices.h ****   uint32_t SR1;
 401:src/sys/devices.h ****   uint32_t SR2;
 402:src/sys/devices.h ****   uint32_t CCR;
 403:src/sys/devices.h ****   uint32_t TRISE;
 404:src/sys/devices.h ****   uint32_t FLTR;
 405:src/sys/devices.h **** };
 406:src/sys/devices.h **** 
 407:src/sys/devices.h **** /* RM §25.6.8 */
 408:src/sys/devices.h **** struct USART_registers {
 409:src/sys/devices.h ****   uint32_t SR;
 410:src/sys/devices.h ****   uint32_t DR;
 411:src/sys/devices.h ****   uint32_t BRR;
 412:src/sys/devices.h ****   uint32_t CR1;
 413:src/sys/devices.h ****   uint32_t CR2;
 414:src/sys/devices.h ****   uint32_t CR3;
 415:src/sys/devices.h ****   uint32_t GTPR;
 416:src/sys/devices.h **** };
 417:src/sys/devices.h **** 
 418:src/sys/devices.h **** /* RM §26.7.10 */
 419:src/sys/devices.h **** struct SPI_I2S_registers {
 420:src/sys/devices.h ****   uint32_t CR1;
 421:src/sys/devices.h ****   uint32_t CR2;
 422:src/sys/devices.h ****   uint32_t SR;
 423:src/sys/devices.h ****   uint32_t DR;
 424:src/sys/devices.h ****   uint32_t CRCPR;
 425:src/sys/devices.h ****   uint32_t RXCRCR;
 426:src/sys/devices.h ****   uint32_t TXCRCR;
 427:src/sys/devices.h ****   uint32_t I2SCFGR;
 428:src/sys/devices.h ****   uint32_t I2SPR;
 429:src/sys/devices.h **** };
 430:src/sys/devices.h **** 
 431:src/sys/devices.h **** /* RM §27.5.10 */
 432:src/sys/devices.h **** struct SPDIFRX_registers {
 433:src/sys/devices.h ****   uint32_t CR;
 434:src/sys/devices.h ****   uint32_t IMR;
 435:src/sys/devices.h ****   uint32_t SR;
 436:src/sys/devices.h ****   uint32_t IFCR;
 437:src/sys/devices.h ****   uint32_t DR;
 438:src/sys/devices.h ****   uint32_t CSR;
 439:src/sys/devices.h ****   uint32_t DIR;
 440:src/sys/devices.h **** };
 441:src/sys/devices.h **** 
 442:src/sys/devices.h **** /* RM §28.5.10 */
 443:src/sys/devices.h **** struct SAI_x_registers {
 444:src/sys/devices.h ****   uint32_t CR1;
 445:src/sys/devices.h ****   uint32_t CR2;
 446:src/sys/devices.h ****   uint32_t FRCR;
 447:src/sys/devices.h ****   uint32_t SLOTR;
 448:src/sys/devices.h ****   uint32_t IM;
 449:src/sys/devices.h ****   uint32_t SR;
 450:src/sys/devices.h ****   uint32_t CLRFR;
 451:src/sys/devices.h ****   uint32_t DR;
 452:src/sys/devices.h **** };
 453:src/sys/devices.h **** 
 454:src/sys/devices.h **** struct SAI_registers {
 455:src/sys/devices.h ****   uint32_t GCR;
 456:src/sys/devices.h ****   struct SAI_x_registers A;
 457:src/sys/devices.h ****   struct SAI_x_registers B;
 458:src/sys/devices.h **** };
 459:src/sys/devices.h **** 
 460:src/sys/devices.h **** /* RM §29.8.16 */
 461:src/sys/devices.h **** struct SDIO_registers {
 462:src/sys/devices.h ****   uint32_t POWER;
 463:src/sys/devices.h ****   uint32_t CLKCR;
 464:src/sys/devices.h ****   uint32_t CMD;
 465:src/sys/devices.h ****   uint32_t RESPCMD;
 466:src/sys/devices.h ****   uint32_t RESP1;
 467:src/sys/devices.h ****   uint32_t RESP2;
 468:src/sys/devices.h ****   uint32_t RESP3;
 469:src/sys/devices.h ****   uint32_t RESP4;
 470:src/sys/devices.h ****   uint32_t DTIMER;
 471:src/sys/devices.h ****   uint32_t DLEN;
 472:src/sys/devices.h ****   uint32_t DCTRL;
 473:src/sys/devices.h ****   uint32_t DCOUNT;
 474:src/sys/devices.h ****   uint32_t STA;
 475:src/sys/devices.h ****   uint32_t ICR;
 476:src/sys/devices.h ****   uint32_t MASK;
 477:src/sys/devices.h ****   __reserved(0x40);
 478:src/sys/devices.h ****   __reserved(0x44);
 479:src/sys/devices.h ****   uint32_t FIFOCNT;
 480:src/sys/devices.h ****   __reserved_interval(0x4c,0x80);
 481:src/sys/devices.h ****   uint32_t FIFO[32];
 482:src/sys/devices.h **** };
 483:src/sys/devices.h ****   
 484:src/sys/devices.h **** /* RM §30.9.5 */
 485:src/sys/devices.h **** struct bxCAN_TxRx_registers {
 486:src/sys/devices.h ****   uint32_t IR;
 487:src/sys/devices.h ****   uint32_t DTR;
 488:src/sys/devices.h ****   uint32_t DLR;
 489:src/sys/devices.h ****   uint32_t DHR;
 490:src/sys/devices.h **** };
 491:src/sys/devices.h **** 
 492:src/sys/devices.h **** struct bxCAN_registers {
 493:src/sys/devices.h ****   uint32_t MCR;
 494:src/sys/devices.h ****   uint32_t MSR;
 495:src/sys/devices.h ****   uint32_t TSR;
 496:src/sys/devices.h ****   uint32_t RF0R;
 497:src/sys/devices.h ****   uint32_t RF1R;
 498:src/sys/devices.h ****   uint32_t IER;
 499:src/sys/devices.h ****   uint32_t ESR;
 500:src/sys/devices.h ****   uint32_t BTR;
 501:src/sys/devices.h ****   __reserved_interval(0x20,0x180);
 502:src/sys/devices.h ****   struct bxCAN_TxRx_registers Tx[3];
 503:src/sys/devices.h ****   struct bxCAN_TxRx_registers Rx[2];
 504:src/sys/devices.h ****   __reserved_interval(0x1d0,0x200);
 505:src/sys/devices.h ****   uint32_t FMR;
 506:src/sys/devices.h ****   uint32_t FM1R;
 507:src/sys/devices.h ****   __reserved(0x208);
 508:src/sys/devices.h ****   uint32_t FS1R;
 509:src/sys/devices.h ****   __reserved(0x210);
 510:src/sys/devices.h ****   uint32_t FFA1R;
 511:src/sys/devices.h ****   __reserved(0x218);
 512:src/sys/devices.h ****   uint32_t FA1R;
 513:src/sys/devices.h ****   __reserved_interval(0x220,0x240);
 514:src/sys/devices.h ****   struct {uint32_t R1; uint32_t R2;} F[28];
 515:src/sys/devices.h **** };
 516:src/sys/devices.h **** 
 517:src/sys/devices.h **** /* RM §32.7.7 */
 518:src/sys/devices.h **** struct OTG_registers {
 519:src/sys/devices.h ****    /* TODO */
 520:src/sys/devices.h **** };
 521:src/sys/devices.h **** 
 522:src/sys/devices.h **** /* RM §32.7.7 */
 523:src/sys/devices.h **** struct HDMI_CEC_registers {
 524:src/sys/devices.h ****   uint32_t CR;
 525:src/sys/devices.h ****   uint32_t CFGR;
 526:src/sys/devices.h ****   uint32_t TXDR;
 527:src/sys/devices.h ****   uint32_t RXDR;
 528:src/sys/devices.h ****   uint32_t ISR;
 529:src/sys/devices.h ****   uint32_t IER;
 530:src/sys/devices.h **** };
 531:src/sys/devices.h **** 
 532:src/sys/devices.h **** /* RM §33.18 */
 533:src/sys/devices.h **** struct DBGMCU_registers {
 534:src/sys/devices.h ****   uint32_t IDCODE;
 535:src/sys/devices.h ****   uint32_t CR;
 536:src/sys/devices.h ****   uint32_t APB1FZ;
 537:src/sys/devices.h ****   uint32_t APB2FZ;
 538:src/sys/devices.h **** };
 539:src/sys/devices.h **** 
 540:src/sys/devices.h **** /* Constant values */
 541:src/sys/devices.h **** 
 542:src/sys/devices.h **** extern const uint16_t Package_data;
 543:src/sys/devices.h **** extern const uint16_t TS_CAL2;
 544:src/sys/devices.h **** extern const uint16_t TS_CAL1;
 545:src/sys/devices.h **** extern const uint16_t VREFIN_CAL;
 546:src/sys/devices.h **** extern const uint16_t Flash_size;
 547:src/sys/devices.h **** extern const uint32_t U_ID[3];
 548:src/sys/devices.h **** 
 549:src/sys/devices.h **** /* Core Devices base addresses */
 550:src/sys/devices.h **** 
 551:src/sys/devices.h **** extern volatile struct DBGMCU_registers DBG;
 552:src/sys/devices.h **** 
 553:src/sys/devices.h **** extern volatile struct FPU_registers FPU;
 554:src/sys/devices.h **** extern volatile uint32_t NVIC_STIR;
 555:src/sys/devices.h **** extern volatile struct MPU_registers MPU;
 556:src/sys/devices.h **** extern volatile uint32_t FPU_CPACR;
 557:src/sys/devices.h **** extern volatile struct SCB_registers SCB;
 558:src/sys/devices.h **** extern volatile struct NVIC_registers NVIC;
 559:src/sys/devices.h **** extern volatile struct STK_registers SysTick;
 560:src/sys/devices.h **** 
 561:src/sys/devices.h **** /* Devices base addresses */
 562:src/sys/devices.h **** 
 563:src/sys/devices.h **** extern volatile struct QUADSPI_registers QUADSPI;
 564:src/sys/devices.h **** 
 565:src/sys/devices.h **** extern volatile struct DCMI_registers DCMI;
 566:src/sys/devices.h **** extern volatile struct OTG_registers USB_OTG_FS;
 567:src/sys/devices.h **** 
 568:src/sys/devices.h **** extern volatile struct OTG_registers USB_OTG_HS;
 569:src/sys/devices.h **** extern volatile struct DMA_registers DMA2;
 570:src/sys/devices.h **** extern volatile struct DMA_registers DMA1;
 571:src/sys/devices.h **** extern uint32_t BKPSRAM[1024];
 572:src/sys/devices.h **** extern volatile struct FLASH_registers FLASH;
 573:src/sys/devices.h **** extern volatile struct RCC_registers RCC;
 574:src/sys/devices.h **** extern volatile struct CRC_registers CRC;
 575:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOH;
 576:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOG;
 577:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOF;
 578:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOE;
 579:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOD;
 580:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOC;
 581:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOB;
 582:src/sys/devices.h **** extern volatile struct GPIO_registers GPIOA;
 583:src/sys/devices.h **** 
 584:src/sys/devices.h **** extern volatile struct SAI_registers SAI2;
 585:src/sys/devices.h **** extern volatile struct SAI_registers SAI1;
 586:src/sys/devices.h **** 
 587:src/sys/devices.h **** extern volatile struct TIMx_registers TIM11;
 588:src/sys/devices.h **** extern volatile struct TIMx_registers TIM10;
 589:src/sys/devices.h **** extern volatile struct TIMx_registers TIM9;
 590:src/sys/devices.h **** extern volatile struct EXTI_registers EXTI;
 591:src/sys/devices.h **** extern volatile struct SYSCFG_registers SYSCFG;
 592:src/sys/devices.h **** extern volatile struct SPI_registers SPI4;
 593:src/sys/devices.h **** extern volatile struct SPI_registers SPI1;
 594:src/sys/devices.h **** extern volatile struct SDIO_registers SDMMC;
 595:src/sys/devices.h **** extern volatile struct ADCx_registers ADC1;
 596:src/sys/devices.h **** extern volatile struct ADCx_registers ADC2;
 597:src/sys/devices.h **** extern volatile struct ADCx_registers ADC3;
 598:src/sys/devices.h **** extern volatile struct ADC_common_registers ADC_common;
 599:src/sys/devices.h **** extern volatile struct USART_registers USART6;
 600:src/sys/devices.h **** extern volatile struct USART_registers USART1;
 601:src/sys/devices.h **** extern volatile struct TIMx_registers TIM8;
 602:src/sys/devices.h **** extern volatile struct TIMx_registers TIM1;
 603:src/sys/devices.h **** 
 604:src/sys/devices.h **** extern volatile struct DAC_registers DAC;
 605:src/sys/devices.h **** extern volatile struct PWR_registers PWR;
 606:src/sys/devices.h **** extern volatile struct HDMI_CEC_registers HDMI_CEC;
 607:src/sys/devices.h **** extern volatile struct bxCAN_registers CAN2;
 608:src/sys/devices.h **** extern volatile struct bxCAN_registers CAN1;
 609:src/sys/devices.h **** extern volatile struct FMPI2C_registers FMPI2C1;
 610:src/sys/devices.h **** extern volatile struct I2C_registers I2C3;
 611:src/sys/devices.h **** extern volatile struct I2C_registers I2C2;
 612:src/sys/devices.h **** extern volatile struct I2C_registers I2C1;
 613:src/sys/devices.h **** extern volatile struct USART_registers UART5;
 614:src/sys/devices.h **** extern volatile struct USART_registers UART4;
 615:src/sys/devices.h **** extern volatile struct USART_registers USART3;
 616:src/sys/devices.h **** extern volatile struct USART_registers USART2;
 617:src/sys/devices.h **** extern volatile struct SPDIF_RX_registers SPDIF_RX;
 618:src/sys/devices.h **** extern volatile struct SPI_I2S_registers SPI3_I2S3;
 619:src/sys/devices.h **** extern volatile struct SPI_I2S_registers SPI2_I2S2;
 620:src/sys/devices.h **** extern volatile struct IWDG_registers IWDG;
 621:src/sys/devices.h **** extern volatile struct WWDG_registers WWDG;
 622:src/sys/devices.h **** extern volatile struct RTC_registers RTC_BKP;
 623:src/sys/devices.h **** extern volatile struct TIMx_registers TIM14;
 624:src/sys/devices.h **** extern volatile struct TIMx_registers TIM13;
 625:src/sys/devices.h **** extern volatile struct TIMx_registers TIM12;
 626:src/sys/devices.h **** extern volatile struct TIMx_registers TIM7;
 627:src/sys/devices.h **** extern volatile struct TIMx_registers TIM6;
 628:src/sys/devices.h **** extern volatile struct TIMx_registers TIM5;
 629:src/sys/devices.h **** extern volatile struct TIMx_registers TIM4;
 630:src/sys/devices.h **** extern volatile struct TIMx_registers TIM3;
 631:src/sys/devices.h **** extern volatile struct TIMx_registers TIM2;
 632:src/sys/devices.h **** 
 633:src/sys/devices.h **** #define __set_bit(_w,_i) ((_w)|=(1<<(_i)))
 634:src/sys/devices.h **** #define __clr_bit(_w,_i) ((_w) &= ~(1<<(_i)))
 635:src/sys/devices.h **** #define __really_inline__ static inline __attribute__((always_inline)) 
 636:src/sys/devices.h **** #define __sync __DSB
 637:src/sys/devices.h **** 
 638:src/sys/devices.h **** #define __declare_device_control(name,bus,bus_bit) \
 639:src/sys/devices.h ****   void __really_inline__ enable_##name() { \
 640:src/sys/devices.h ****     __set_bit(RCC.bus##ENR,bus_bit); __sync(); } \
 641:src/sys/devices.h ****   void __really_inline__ low_power_enable_##name() { \
 642:src/sys/devices.h ****     __set_bit(RCC.bus##LPENR,bus_bit); __sync(); } \
 643:src/sys/devices.h ****   void __really_inline__ disable_##name() { \
 644:src/sys/devices.h ****     __clr_bit(RCC.bus##ENR,bus_bit); __sync(); } \
 645:src/sys/devices.h ****   void __really_inline__ low_power_disable_## name() { \
 646:src/sys/devices.h ****     __clr_bit(RCC.bus##LPENR,bus_bit); __sync(); } \
 647:src/sys/devices.h ****   void __really_inline__ reset_##name() { \
 648:src/sys/devices.h ****     __set_bit(RCC.bus##RSTR,bus_bit); __sync(); } \
 649:src/sys/devices.h **** \
 650:src/sys/devices.h **** 
 651:src/sys/devices.h **** /* __declare_device_control(FMC,AHB3,0) FMC not available in LQFP64 package */
 652:src/sys/devices.h **** __declare_device_control(QUADSPI,AHB3,1)
 653:src/sys/devices.h **** 
 654:src/sys/devices.h **** __declare_device_control(DCMI,AHB2,0)
 655:src/sys/devices.h **** __declare_device_control(USB_OTG_FS,AHB2,7)
 656:src/sys/devices.h **** 
 657:src/sys/devices.h **** __declare_device_control(USB_OTG_HS,AHB1,29)
 658:src/sys/devices.h **** __declare_device_control(DMA2,AHB1,22)
 659:src/sys/devices.h **** __declare_device_control(DMA1,AHB1,21)
 660:src/sys/devices.h **** __declare_device_control(CRC,AHB1,12)
 661:src/sys/devices.h **** __declare_device_control(GPIOH,AHB1,7)
 662:src/sys/devices.h **** __declare_device_control(GPIOG,AHB1,6)
 663:src/sys/devices.h **** __declare_device_control(GPIOF,AHB1,5)
 664:src/sys/devices.h **** __declare_device_control(GPIOE,AHB1,4)
 665:src/sys/devices.h **** __declare_device_control(GPIOD,AHB1,3)
 666:src/sys/devices.h **** __declare_device_control(GPIOC,AHB1,2)
 667:src/sys/devices.h **** __declare_device_control(GPIOB,AHB1,1)
 668:src/sys/devices.h **** __declare_device_control(GPIOA,AHB1,0)
 352              		.loc 3 668 1 view .LVU93
 353              	.LBB19:
 354              		.loc 3 668 1 view .LVU94
 355 0100 114B     		ldr	r3, .L38
 356 0102 1A6B     		ldr	r2, [r3, #48]
 357 0104 42F00102 		orr	r2, r2, #1
 358 0108 1A63     		str	r2, [r3, #48]
 359              		.loc 3 668 1 view .LVU95
 360              	.LBB20:
 361              	.LBI20:
 426:src/sys/cmsis_gcc.h **** {
 362              		.loc 2 426 53 view .LVU96
 363              	.LBB21:
 364              		.loc 2 428 3 view .LVU97
 365              		.syntax unified
 366              	@ 428 "src/sys/cmsis_gcc.h" 1
 367 010a BFF34F8F 		dsb 0xF
 368              	@ 0 "" 2
 369              		.thumb
 370              		.syntax unified
 371              	.LBE21:
 372              	.LBE20:
 373              	.LBE19:
 374              	.LBE18:
  54:src/sys/clock.c ****   enable_GPIOC();
 375              		.loc 1 54 3 view .LVU98
 376              	.LBB22:
 377              	.LBI22:
 666:src/sys/devices.h **** __declare_device_control(GPIOB,AHB1,1)
 378              		.loc 3 666 1 view .LVU99
 379              	.LBB23:
 666:src/sys/devices.h **** __declare_device_control(GPIOB,AHB1,1)
 380              		.loc 3 666 1 view .LVU100
 381 010e 1A6B     		ldr	r2, [r3, #48]
 382 0110 42F00402 		orr	r2, r2, #4
 383 0114 1A63     		str	r2, [r3, #48]
 666:src/sys/devices.h **** __declare_device_control(GPIOB,AHB1,1)
 384              		.loc 3 666 1 view .LVU101
 385              	.LBB24:
 386              	.LBI24:
 426:src/sys/cmsis_gcc.h **** {
 387              		.loc 2 426 53 view .LVU102
 388              	.LBB25:
 389              		.loc 2 428 3 view .LVU103
 390              		.syntax unified
 391              	@ 428 "src/sys/cmsis_gcc.h" 1
 392 0116 BFF34F8F 		dsb 0xF
 393              	@ 0 "" 2
 394              		.thumb
 395              		.syntax unified
 396              	.LBE25:
 397              	.LBE24:
 398              	.LBE23:
 399              	.LBE22:
  55:src/sys/clock.c **** 
  56:src/sys/clock.c ****   /* setup PA8,PC9 alternate function : MCO1 */
  57:src/sys/clock.c ****   /* AFRH8=0; */
  58:src/sys/clock.c ****   GPIOA.AFRH &= ~0x0000000f;
 400              		.loc 1 58 3 view .LVU104
 401              		.loc 1 58 8 is_stmt 0 view .LVU105
 402 011a 0C49     		ldr	r1, .L38+4
  59:src/sys/clock.c ****   GPIOC.AFRH &= ~0x000000f0;
 403              		.loc 1 59 8 view .LVU106
 404 011c 0C4A     		ldr	r2, .L38+8
  58:src/sys/clock.c ****   GPIOC.AFRH &= ~0x000000f0;
 405              		.loc 1 58 8 view .LVU107
 406 011e 4B6A     		ldr	r3, [r1, #36]
  58:src/sys/clock.c ****   GPIOC.AFRH &= ~0x000000f0;
 407              		.loc 1 58 14 view .LVU108
 408 0120 23F00F03 		bic	r3, r3, #15
 409 0124 4B62     		str	r3, [r1, #36]
 410              		.loc 1 59 3 is_stmt 1 view .LVU109
 411              		.loc 1 59 8 is_stmt 0 view .LVU110
 412 0126 536A     		ldr	r3, [r2, #36]
 413              		.loc 1 59 14 view .LVU111
 414 0128 23F0F003 		bic	r3, r3, #240
 415 012c 5362     		str	r3, [r2, #36]
  60:src/sys/clock.c **** 
  61:src/sys/clock.c ****   /* switch PA8,PC9 to alternate function mode */
  62:src/sys/clock.c ****   /* MODERx=2; */
  63:src/sys/clock.c ****   GPIOA.MODER = 
 416              		.loc 1 63 3 is_stmt 1 view .LVU112
  64:src/sys/clock.c ****     (GPIOA.MODER & ~(3<<16)) | (2<<16);
 417              		.loc 1 64 11 is_stmt 0 view .LVU113
 418 012e 0B68     		ldr	r3, [r1]
 419              		.loc 1 64 18 view .LVU114
 420 0130 23F44033 		bic	r3, r3, #196608
 421              		.loc 1 64 30 view .LVU115
 422 0134 43F40033 		orr	r3, r3, #131072
  63:src/sys/clock.c ****     (GPIOA.MODER & ~(3<<16)) | (2<<16);
 423              		.loc 1 63 15 view .LVU116
 424 0138 0B60     		str	r3, [r1]
  65:src/sys/clock.c ****   GPIOC.MODER = 
 425              		.loc 1 65 3 is_stmt 1 view .LVU117
  66:src/sys/clock.c ****     (GPIOC.MODER & ~(3<<18)) | (2<<18);
 426              		.loc 1 66 11 is_stmt 0 view .LVU118
 427 013a 1368     		ldr	r3, [r2]
 428              		.loc 1 66 18 view .LVU119
 429 013c 23F44023 		bic	r3, r3, #786432
 430              		.loc 1 66 30 view .LVU120
 431 0140 43F40023 		orr	r3, r3, #524288
  65:src/sys/clock.c ****   GPIOC.MODER = 
 432              		.loc 1 65 15 view .LVU121
 433 0144 1360     		str	r3, [r2]
  67:src/sys/clock.c **** }
 434              		.loc 1 67 1 view .LVU122
 435 0146 7047     		bx	lr
 436              	.L39:
 437              		.align	2
 438              	.L38:
 439 0148 00000000 		.word	RCC
 440 014c 00000000 		.word	GPIOA
 441 0150 00000000 		.word	GPIOC
 442              		.cfi_endproc
 443              	.LFE402:
 444              		.size	enable_MCO_GPIO, .-enable_MCO_GPIO
 445              		.align	1
 446              		.global	get_PLL_PCLK
 447              		.syntax unified
 448              		.thumb
 449              		.thumb_func
 450              		.type	get_PLL_PCLK, %function
 451              	get_PLL_PCLK:
 452              	.LFB403:
  68:src/sys/clock.c **** 
  69:src/sys/clock.c **** uint32_t get_PLL_PCLK() {
 453              		.loc 1 69 25 is_stmt 1 view -0
 454              		.cfi_startproc
 455              		@ args = 0, pretend = 0, frame = 0
 456              		@ frame_needed = 0, uses_anonymous_args = 0
 457              		@ link register save eliminated.
  70:src/sys/clock.c ****   uint32_t pllcfgr=RCC.PLLCFGR;
 458              		.loc 1 70 3 view .LVU124
 459              		.loc 1 70 12 is_stmt 0 view .LVU125
 460 0154 0A4B     		ldr	r3, .L43
 461 0156 5B68     		ldr	r3, [r3, #4]
 462              	.LVL23:
  71:src/sys/clock.c ****   uint32_t 
 463              		.loc 1 71 3 is_stmt 1 view .LVU126
  72:src/sys/clock.c ****     M=(pllcfgr>>0)&0x3f,
  73:src/sys/clock.c ****     N=(pllcfgr>>6)&0x1ff,
  74:src/sys/clock.c ****     P=((pllcfgr>>16)&0x3)*2+2;
  75:src/sys/clock.c ****   PLLSRC SRC=(pllcfgr>>22)&0x1;
 464              		.loc 1 75 3 view .LVU127
  76:src/sys/clock.c ****   if (SRC==PLLSRC_HSI) {
 465              		.loc 1 76 3 view .LVU128
 466              		.loc 1 76 6 is_stmt 0 view .LVU129
 467 0158 5A02     		lsls	r2, r3, #9
 468 015a 0ED4     		bmi	.L42
  77:src/sys/clock.c ****     return (HSI_FREQ*MHz/M*N/P);
 469              		.loc 1 77 5 is_stmt 1 view .LVU130
  72:src/sys/clock.c ****     M=(pllcfgr>>0)&0x3f,
 470              		.loc 1 72 5 is_stmt 0 view .LVU131
 471 015c 03F03F02 		and	r2, r3, #63
 472              	.LVL24:
 473              		.loc 1 77 25 view .LVU132
 474 0160 0848     		ldr	r0, .L43+4
 475 0162 B0FBF2F0 		udiv	r0, r0, r2
  73:src/sys/clock.c ****     P=((pllcfgr>>16)&0x3)*2+2;
 476              		.loc 1 73 5 view .LVU133
 477 0166 C3F38812 		ubfx	r2, r3, #6, #9
 478              	.LVL25:
  74:src/sys/clock.c ****   PLLSRC SRC=(pllcfgr>>22)&0x1;
 479              		.loc 1 74 21 view .LVU134
 480 016a C3F30143 		ubfx	r3, r3, #16, #2
 481              	.LVL26:
  74:src/sys/clock.c ****   PLLSRC SRC=(pllcfgr>>22)&0x1;
 482              		.loc 1 74 28 view .LVU135
 483 016e 0133     		adds	r3, r3, #1
 484              		.loc 1 77 27 view .LVU136
 485 0170 5043     		muls	r0, r2, r0
  74:src/sys/clock.c ****   PLLSRC SRC=(pllcfgr>>22)&0x1;
 486              		.loc 1 74 5 view .LVU137
 487 0172 5B00     		lsls	r3, r3, #1
 488              		.loc 1 77 29 view .LVU138
 489 0174 B0FBF3F0 		udiv	r0, r0, r3
 490 0178 7047     		bx	lr
 491              	.LVL27:
 492              	.L42:
  78:src/sys/clock.c ****   } else {
  79:src/sys/clock.c ****     return (HSE_FREQ*MHz/M*N/P);
 493              		.loc 1 79 29 view .LVU139
 494 017a 0020     		movs	r0, #0
  80:src/sys/clock.c ****   }
  81:src/sys/clock.c **** }
 495              		.loc 1 81 1 view .LVU140
 496 017c 7047     		bx	lr
 497              	.L44:
 498 017e 00BF     		.align	2
 499              	.L43:
 500 0180 00000000 		.word	RCC
 501 0184 0024F400 		.word	16000000
 502              		.cfi_endproc
 503              	.LFE403:
 504              		.size	get_PLL_PCLK, .-get_PLL_PCLK
 505              		.align	1
 506              		.global	get_PLL_RCLK
 507              		.syntax unified
 508              		.thumb
 509              		.thumb_func
 510              		.type	get_PLL_RCLK, %function
 511              	get_PLL_RCLK:
 512              	.LFB404:
  82:src/sys/clock.c **** 
  83:src/sys/clock.c **** uint32_t get_PLL_RCLK() {
 513              		.loc 1 83 25 is_stmt 1 view -0
 514              		.cfi_startproc
 515              		@ args = 0, pretend = 0, frame = 0
 516              		@ frame_needed = 0, uses_anonymous_args = 0
 517              		@ link register save eliminated.
  84:src/sys/clock.c ****   uint32_t pllcfgr=RCC.PLLCFGR;
 518              		.loc 1 84 3 view .LVU142
 519              		.loc 1 84 12 is_stmt 0 view .LVU143
 520 0188 094B     		ldr	r3, .L48
 521 018a 5B68     		ldr	r3, [r3, #4]
 522              	.LVL28:
  85:src/sys/clock.c ****   uint32_t 
 523              		.loc 1 85 3 is_stmt 1 view .LVU144
  86:src/sys/clock.c ****     M=(pllcfgr>>0)&0x3f,
  87:src/sys/clock.c ****     N=(pllcfgr>>6)&0x1ff,
  88:src/sys/clock.c ****     R=(pllcfgr>>28)&0x7;
  89:src/sys/clock.c ****   PLLSRC SRC=(pllcfgr>>22)&0x1;
 524              		.loc 1 89 3 view .LVU145
  90:src/sys/clock.c ****   if (SRC==PLLSRC_HSI) {
 525              		.loc 1 90 3 view .LVU146
 526              		.loc 1 90 6 is_stmt 0 view .LVU147
 527 018c 5A02     		lsls	r2, r3, #9
  91:src/sys/clock.c ****     return (HSI_FREQ*MHz/M*N/R);
 528              		.loc 1 91 5 is_stmt 1 view .LVU148
 529              		.loc 1 91 25 is_stmt 0 view .LVU149
 530 018e 5FBF     		itttt	pl
 531 0190 0848     		ldrpl	r0, .L48+4
  86:src/sys/clock.c ****     M=(pllcfgr>>0)&0x3f,
 532              		.loc 1 86 5 view .LVU150
 533 0192 03F03F02 		andpl	r2, r3, #63
 534              		.loc 1 91 25 view .LVU151
 535 0196 B0FBF2F0 		udivpl	r0, r0, r2
  87:src/sys/clock.c ****     R=(pllcfgr>>28)&0x7;
 536              		.loc 1 87 5 view .LVU152
 537 019a C3F38812 		ubfxpl	r2, r3, #6, #9
 538              		.loc 1 91 27 view .LVU153
 539 019e 5DBF     		ittte	pl
 540 01a0 5043     		mulpl	r0, r2, r0
  88:src/sys/clock.c ****   PLLSRC SRC=(pllcfgr>>22)&0x1;
 541              		.loc 1 88 5 view .LVU154
 542 01a2 C3F30273 		ubfxpl	r3, r3, #28, #3
 543              	.LVL29:
 544              		.loc 1 91 29 view .LVU155
 545 01a6 B0FBF3F0 		udivpl	r0, r0, r3
  92:src/sys/clock.c ****   } else {
  93:src/sys/clock.c ****     return (HSE_FREQ*MHz/M*N/R);
 546              		.loc 1 93 29 view .LVU156
 547 01aa 0020     		movmi	r0, #0
  94:src/sys/clock.c ****   }
  95:src/sys/clock.c **** }
 548              		.loc 1 95 1 view .LVU157
 549 01ac 7047     		bx	lr
 550              	.L49:
 551 01ae 00BF     		.align	2
 552              	.L48:
 553 01b0 00000000 		.word	RCC
 554 01b4 0024F400 		.word	16000000
 555              		.cfi_endproc
 556              	.LFE404:
 557              		.size	get_PLL_RCLK, .-get_PLL_RCLK
 558              		.align	1
 559              		.global	get_SYSCLK
 560              		.syntax unified
 561              		.thumb
 562              		.thumb_func
 563              		.type	get_SYSCLK, %function
 564              	get_SYSCLK:
 565              	.LFB405:
  96:src/sys/clock.c **** 
  97:src/sys/clock.c **** uint32_t get_SYSCLK() {
 566              		.loc 1 97 23 is_stmt 1 view -0
 567              		.cfi_startproc
 568              		@ args = 0, pretend = 0, frame = 0
 569              		@ frame_needed = 0, uses_anonymous_args = 0
 570              		@ link register save eliminated.
  98:src/sys/clock.c ****   SW SWS=(RCC.CFGR>>2)&0x3;
 571              		.loc 1 98 3 view .LVU159
 572              		.loc 1 98 14 is_stmt 0 view .LVU160
 573 01b8 084B     		ldr	r3, .L57
 574 01ba 9B68     		ldr	r3, [r3, #8]
 575              		.loc 1 98 6 view .LVU161
 576 01bc C3F38103 		ubfx	r3, r3, #2, #2
 577              	.LVL30:
  99:src/sys/clock.c ****   switch (SWS) {
 578              		.loc 1 99 3 is_stmt 1 view .LVU162
 579 01c0 022B     		cmp	r3, #2
 580 01c2 06D0     		beq	.L51
 581 01c4 032B     		cmp	r3, #3
 582 01c6 06D0     		beq	.L52
 100:src/sys/clock.c ****   case SW_HSI:
 101:src/sys/clock.c ****     return (HSI_FREQ*MHz);
 583              		.loc 1 101 12 is_stmt 0 view .LVU163
 584 01c8 012B     		cmp	r3, #1
 585 01ca 0548     		ldr	r0, .L57+4
 586 01cc 08BF     		it	eq
 587 01ce 0020     		moveq	r0, #0
 102:src/sys/clock.c ****   case SW_HSE:
 103:src/sys/clock.c ****     return (HSE_FREQ*MHz);
 104:src/sys/clock.c ****   case SW_PLL_P:
 105:src/sys/clock.c ****     return get_PLL_PCLK();
 106:src/sys/clock.c ****   case SW_PLL_R:
 107:src/sys/clock.c ****     return get_PLL_RCLK();
 108:src/sys/clock.c ****   }
 109:src/sys/clock.c ****   return 0;
 110:src/sys/clock.c **** }
 588              		.loc 1 110 1 view .LVU164
 589 01d0 7047     		bx	lr
 590              	.L51:
 105:src/sys/clock.c ****   case SW_PLL_R:
 591              		.loc 1 105 5 is_stmt 1 view .LVU165
 105:src/sys/clock.c ****   case SW_PLL_R:
 592              		.loc 1 105 12 is_stmt 0 view .LVU166
 593 01d2 FFF7FEBF 		b	get_PLL_PCLK
 594              	.LVL31:
 595              	.L52:
 107:src/sys/clock.c ****   }
 596              		.loc 1 107 5 is_stmt 1 view .LVU167
 107:src/sys/clock.c ****   }
 597              		.loc 1 107 12 is_stmt 0 view .LVU168
 598 01d6 FFF7FEBF 		b	get_PLL_RCLK
 599              	.LVL32:
 600              	.L58:
 107:src/sys/clock.c ****   }
 601              		.loc 1 107 12 view .LVU169
 602 01da 00BF     		.align	2
 603              	.L57:
 604 01dc 00000000 		.word	RCC
 605 01e0 0024F400 		.word	16000000
 606              		.cfi_endproc
 607              	.LFE405:
 608              		.size	get_SYSCLK, .-get_SYSCLK
 609              		.align	1
 610              		.global	get_AHBCLK
 611              		.syntax unified
 612              		.thumb
 613              		.thumb_func
 614              		.type	get_AHBCLK, %function
 615              	get_AHBCLK:
 616              	.LFB406:
 111:src/sys/clock.c **** 
 112:src/sys/clock.c **** uint32_t get_AHBCLK() {
 617              		.loc 1 112 23 is_stmt 1 view -0
 618              		.cfi_startproc
 619              		@ args = 0, pretend = 0, frame = 0
 620              		@ frame_needed = 0, uses_anonymous_args = 0
 113:src/sys/clock.c ****   uint32_t cfgr=RCC.CFGR;
 621              		.loc 1 113 3 view .LVU171
 112:src/sys/clock.c ****   uint32_t cfgr=RCC.CFGR;
 622              		.loc 1 112 23 is_stmt 0 view .LVU172
 623 01e4 08B5     		push	{r3, lr}
 624              		.cfi_def_cfa_offset 8
 625              		.cfi_offset 3, -8
 626              		.cfi_offset 14, -4
 627              		.loc 1 113 12 view .LVU173
 628 01e6 074B     		ldr	r3, .L61
 629 01e8 9968     		ldr	r1, [r3, #8]
 630              	.LVL33:
 114:src/sys/clock.c ****   if ((cfgr&(1<<7))==0) {
 631              		.loc 1 114 3 is_stmt 1 view .LVU174
 632              		.loc 1 114 6 is_stmt 0 view .LVU175
 633 01ea 0B06     		lsls	r3, r1, #24
 634 01ec 03D4     		bmi	.L60
 115:src/sys/clock.c ****     return (get_SYSCLK());
 635              		.loc 1 115 5 is_stmt 1 view .LVU176
 116:src/sys/clock.c ****   } else {
 117:src/sys/clock.c ****     return(get_SYSCLK() >> (((cfgr>>4)&0x7)+1));
 118:src/sys/clock.c ****   } 
 119:src/sys/clock.c **** }
 636              		.loc 1 119 1 is_stmt 0 view .LVU177
 637 01ee BDE80840 		pop	{r3, lr}
 638              		.cfi_remember_state
 639              		.cfi_restore 14
 640              		.cfi_restore 3
 641              		.cfi_def_cfa_offset 0
 115:src/sys/clock.c ****     return (get_SYSCLK());
 642              		.loc 1 115 13 view .LVU178
 643 01f2 FFF7FEBF 		b	get_SYSCLK
 644              	.LVL34:
 645              	.L60:
 646              		.cfi_restore_state
 117:src/sys/clock.c ****   } 
 647              		.loc 1 117 5 is_stmt 1 view .LVU179
 117:src/sys/clock.c ****   } 
 648              		.loc 1 117 12 is_stmt 0 view .LVU180
 649 01f6 FFF7FEFF 		bl	get_SYSCLK
 650              	.LVL35:
 117:src/sys/clock.c ****   } 
 651              		.loc 1 117 39 discriminator 1 view .LVU181
 652 01fa C1F30211 		ubfx	r1, r1, #4, #3
 653              	.LVL36:
 117:src/sys/clock.c ****   } 
 654              		.loc 1 117 44 discriminator 1 view .LVU182
 655 01fe 0131     		adds	r1, r1, #1
 656              		.loc 1 119 1 view .LVU183
 657 0200 C840     		lsrs	r0, r0, r1
 658 0202 08BD     		pop	{r3, pc}
 659              	.L62:
 660              		.align	2
 661              	.L61:
 662 0204 00000000 		.word	RCC
 663              		.cfi_endproc
 664              	.LFE406:
 665              		.size	get_AHBCLK, .-get_AHBCLK
 666              		.align	1
 667              		.global	get_APB1CLK
 668              		.syntax unified
 669              		.thumb
 670              		.thumb_func
 671              		.type	get_APB1CLK, %function
 672              	get_APB1CLK:
 673              	.LFB407:
 120:src/sys/clock.c **** 
 121:src/sys/clock.c **** uint32_t get_APB1CLK() {
 674              		.loc 1 121 24 is_stmt 1 view -0
 675              		.cfi_startproc
 676              		@ args = 0, pretend = 0, frame = 0
 677              		@ frame_needed = 0, uses_anonymous_args = 0
 122:src/sys/clock.c ****   uint32_t cfgr=RCC.CFGR;
 678              		.loc 1 122 3 view .LVU185
 679              		.loc 1 122 12 is_stmt 0 view .LVU186
 680 0208 074B     		ldr	r3, .L65
 121:src/sys/clock.c ****   uint32_t cfgr=RCC.CFGR;
 681              		.loc 1 121 24 view .LVU187
 682 020a 10B5     		push	{r4, lr}
 683              		.cfi_def_cfa_offset 8
 684              		.cfi_offset 4, -8
 685              		.cfi_offset 14, -4
 686              		.loc 1 122 12 view .LVU188
 687 020c 9C68     		ldr	r4, [r3, #8]
 688              	.LVL37:
 123:src/sys/clock.c ****   if ((cfgr&(1<<12))==0) {
 689              		.loc 1 123 3 is_stmt 1 view .LVU189
 690              		.loc 1 123 6 is_stmt 0 view .LVU190
 691 020e E304     		lsls	r3, r4, #19
 692 0210 03D4     		bmi	.L64
 124:src/sys/clock.c ****     return (get_AHBCLK());
 693              		.loc 1 124 5 is_stmt 1 view .LVU191
 125:src/sys/clock.c ****   } else {
 126:src/sys/clock.c ****     return(get_AHBCLK() >> (((cfgr>>10)&0x3)+1));
 127:src/sys/clock.c ****   } 
 128:src/sys/clock.c **** }
 694              		.loc 1 128 1 is_stmt 0 view .LVU192
 695 0212 BDE81040 		pop	{r4, lr}
 696              		.cfi_remember_state
 697              		.cfi_restore 14
 698              		.cfi_restore 4
 699              		.cfi_def_cfa_offset 0
 700              	.LVL38:
 124:src/sys/clock.c ****     return (get_AHBCLK());
 701              		.loc 1 124 13 view .LVU193
 702 0216 FFF7FEBF 		b	get_AHBCLK
 703              	.LVL39:
 704              	.L64:
 705              		.cfi_restore_state
 126:src/sys/clock.c ****   } 
 706              		.loc 1 126 5 is_stmt 1 view .LVU194
 126:src/sys/clock.c ****   } 
 707              		.loc 1 126 12 is_stmt 0 view .LVU195
 708 021a FFF7FEFF 		bl	get_AHBCLK
 709              	.LVL40:
 126:src/sys/clock.c ****   } 
 710              		.loc 1 126 40 discriminator 1 view .LVU196
 711 021e C4F38124 		ubfx	r4, r4, #10, #2
 712              	.LVL41:
 126:src/sys/clock.c ****   } 
 713              		.loc 1 126 45 discriminator 1 view .LVU197
 714 0222 0134     		adds	r4, r4, #1
 715              		.loc 1 128 1 view .LVU198
 716 0224 E040     		lsrs	r0, r0, r4
 717 0226 10BD     		pop	{r4, pc}
 718              	.L66:
 719              		.align	2
 720              	.L65:
 721 0228 00000000 		.word	RCC
 722              		.cfi_endproc
 723              	.LFE407:
 724              		.size	get_APB1CLK, .-get_APB1CLK
 725              		.align	1
 726              		.global	get_APB2CLK
 727              		.syntax unified
 728              		.thumb
 729              		.thumb_func
 730              		.type	get_APB2CLK, %function
 731              	get_APB2CLK:
 732              	.LFB408:
 129:src/sys/clock.c **** 
 130:src/sys/clock.c **** uint32_t get_APB2CLK() {
 733              		.loc 1 130 24 is_stmt 1 view -0
 734              		.cfi_startproc
 735              		@ args = 0, pretend = 0, frame = 0
 736              		@ frame_needed = 0, uses_anonymous_args = 0
 131:src/sys/clock.c ****   uint32_t cfgr=RCC.CFGR;
 737              		.loc 1 131 3 view .LVU200
 738              		.loc 1 131 12 is_stmt 0 view .LVU201
 739 022c 074B     		ldr	r3, .L69
 130:src/sys/clock.c ****   uint32_t cfgr=RCC.CFGR;
 740              		.loc 1 130 24 view .LVU202
 741 022e 10B5     		push	{r4, lr}
 742              		.cfi_def_cfa_offset 8
 743              		.cfi_offset 4, -8
 744              		.cfi_offset 14, -4
 745              		.loc 1 131 12 view .LVU203
 746 0230 9C68     		ldr	r4, [r3, #8]
 747              	.LVL42:
 132:src/sys/clock.c ****   if ((cfgr&(1<<15))==0) {
 748              		.loc 1 132 3 is_stmt 1 view .LVU204
 749              		.loc 1 132 6 is_stmt 0 view .LVU205
 750 0232 2304     		lsls	r3, r4, #16
 751 0234 03D4     		bmi	.L68
 133:src/sys/clock.c ****     return (get_AHBCLK());
 752              		.loc 1 133 5 is_stmt 1 view .LVU206
 134:src/sys/clock.c ****   } else {
 135:src/sys/clock.c ****     return(get_AHBCLK() >> (((cfgr>>13)&0x3)+1));
 136:src/sys/clock.c ****   } 
 137:src/sys/clock.c **** }
 753              		.loc 1 137 1 is_stmt 0 view .LVU207
 754 0236 BDE81040 		pop	{r4, lr}
 755              		.cfi_remember_state
 756              		.cfi_restore 14
 757              		.cfi_restore 4
 758              		.cfi_def_cfa_offset 0
 759              	.LVL43:
 133:src/sys/clock.c ****     return (get_AHBCLK());
 760              		.loc 1 133 13 view .LVU208
 761 023a FFF7FEBF 		b	get_AHBCLK
 762              	.LVL44:
 763              	.L68:
 764              		.cfi_restore_state
 135:src/sys/clock.c ****   } 
 765              		.loc 1 135 5 is_stmt 1 view .LVU209
 135:src/sys/clock.c ****   } 
 766              		.loc 1 135 12 is_stmt 0 view .LVU210
 767 023e FFF7FEFF 		bl	get_AHBCLK
 768              	.LVL45:
 135:src/sys/clock.c ****   } 
 769              		.loc 1 135 40 discriminator 1 view .LVU211
 770 0242 C4F34134 		ubfx	r4, r4, #13, #2
 771              	.LVL46:
 135:src/sys/clock.c ****   } 
 772              		.loc 1 135 45 discriminator 1 view .LVU212
 773 0246 0134     		adds	r4, r4, #1
 774              		.loc 1 137 1 view .LVU213
 775 0248 E040     		lsrs	r0, r0, r4
 776 024a 10BD     		pop	{r4, pc}
 777              	.L70:
 778              		.align	2
 779              	.L69:
 780 024c 00000000 		.word	RCC
 781              		.cfi_endproc
 782              	.LFE408:
 783              		.size	get_APB2CLK, .-get_APB2CLK
 784              		.align	1
 785              		.global	get_APB1TIMCLK
 786              		.syntax unified
 787              		.thumb
 788              		.thumb_func
 789              		.type	get_APB1TIMCLK, %function
 790              	get_APB1TIMCLK:
 791              	.LFB409:
 138:src/sys/clock.c **** 
 139:src/sys/clock.c **** uint32_t get_APB1TIMCLK() {
 792              		.loc 1 139 27 is_stmt 1 view -0
 793              		.cfi_startproc
 794              		@ args = 0, pretend = 0, frame = 0
 795              		@ frame_needed = 0, uses_anonymous_args = 0
 140:src/sys/clock.c ****   uint32_t cfgr=RCC.CFGR;
 796              		.loc 1 140 3 view .LVU215
 139:src/sys/clock.c ****   uint32_t cfgr=RCC.CFGR;
 797              		.loc 1 139 27 is_stmt 0 view .LVU216
 798 0250 08B5     		push	{r3, lr}
 799              		.cfi_def_cfa_offset 8
 800              		.cfi_offset 3, -8
 801              		.cfi_offset 14, -4
 802              		.loc 1 140 12 view .LVU217
 803 0252 064B     		ldr	r3, .L73
 804 0254 9B68     		ldr	r3, [r3, #8]
 805              	.LVL47:
 141:src/sys/clock.c ****   if ((cfgr&(1<<12))==0) {
 806              		.loc 1 141 3 is_stmt 1 view .LVU218
 807              		.loc 1 141 6 is_stmt 0 view .LVU219
 808 0256 DB04     		lsls	r3, r3, #19
 809              	.LVL48:
 810              		.loc 1 141 6 view .LVU220
 811 0258 03D4     		bmi	.L72
 142:src/sys/clock.c ****     return (get_APB1CLK());
 812              		.loc 1 142 5 is_stmt 1 view .LVU221
 143:src/sys/clock.c ****   } else {
 144:src/sys/clock.c ****     return (get_APB1CLK()*2);
 145:src/sys/clock.c ****   } 
 146:src/sys/clock.c **** }
 813              		.loc 1 146 1 is_stmt 0 view .LVU222
 814 025a BDE80840 		pop	{r3, lr}
 815              		.cfi_remember_state
 816              		.cfi_restore 14
 817              		.cfi_restore 3
 818              		.cfi_def_cfa_offset 0
 142:src/sys/clock.c ****     return (get_APB1CLK());
 819              		.loc 1 142 13 view .LVU223
 820 025e FFF7FEBF 		b	get_APB1CLK
 821              	.LVL49:
 822              	.L72:
 823              		.cfi_restore_state
 144:src/sys/clock.c ****   } 
 824              		.loc 1 144 5 is_stmt 1 view .LVU224
 144:src/sys/clock.c ****   } 
 825              		.loc 1 144 13 is_stmt 0 view .LVU225
 826 0262 FFF7FEFF 		bl	get_APB1CLK
 827              	.LVL50:
 828              		.loc 1 146 1 view .LVU226
 829 0266 4000     		lsls	r0, r0, #1
 830 0268 08BD     		pop	{r3, pc}
 831              	.L74:
 832 026a 00BF     		.align	2
 833              	.L73:
 834 026c 00000000 		.word	RCC
 835              		.cfi_endproc
 836              	.LFE409:
 837              		.size	get_APB1TIMCLK, .-get_APB1TIMCLK
 838              		.align	1
 839              		.global	get_APB2TIMCLK
 840              		.syntax unified
 841              		.thumb
 842              		.thumb_func
 843              		.type	get_APB2TIMCLK, %function
 844              	get_APB2TIMCLK:
 845              	.LFB410:
 147:src/sys/clock.c **** 
 148:src/sys/clock.c **** uint32_t get_APB2TIMCLK() {
 846              		.loc 1 148 27 is_stmt 1 view -0
 847              		.cfi_startproc
 848              		@ args = 0, pretend = 0, frame = 0
 849              		@ frame_needed = 0, uses_anonymous_args = 0
 149:src/sys/clock.c ****   uint32_t cfgr=RCC.CFGR;
 850              		.loc 1 149 3 view .LVU228
 148:src/sys/clock.c ****   uint32_t cfgr=RCC.CFGR;
 851              		.loc 1 148 27 is_stmt 0 view .LVU229
 852 0270 08B5     		push	{r3, lr}
 853              		.cfi_def_cfa_offset 8
 854              		.cfi_offset 3, -8
 855              		.cfi_offset 14, -4
 856              		.loc 1 149 12 view .LVU230
 857 0272 064B     		ldr	r3, .L77
 858 0274 9B68     		ldr	r3, [r3, #8]
 859              	.LVL51:
 150:src/sys/clock.c ****   if ((cfgr&(1<<15))==0) {
 860              		.loc 1 150 3 is_stmt 1 view .LVU231
 861              		.loc 1 150 6 is_stmt 0 view .LVU232
 862 0276 1B04     		lsls	r3, r3, #16
 863              	.LVL52:
 864              		.loc 1 150 6 view .LVU233
 865 0278 03D4     		bmi	.L76
 151:src/sys/clock.c ****     return (get_APB2CLK());
 866              		.loc 1 151 5 is_stmt 1 view .LVU234
 152:src/sys/clock.c ****   } else {
 153:src/sys/clock.c ****     return (get_APB2CLK()*2);
 154:src/sys/clock.c ****   } 
 155:src/sys/clock.c **** }
 867              		.loc 1 155 1 is_stmt 0 view .LVU235
 868 027a BDE80840 		pop	{r3, lr}
 869              		.cfi_remember_state
 870              		.cfi_restore 14
 871              		.cfi_restore 3
 872              		.cfi_def_cfa_offset 0
 151:src/sys/clock.c ****     return (get_APB2CLK());
 873              		.loc 1 151 13 view .LVU236
 874 027e FFF7FEBF 		b	get_APB2CLK
 875              	.LVL53:
 876              	.L76:
 877              		.cfi_restore_state
 153:src/sys/clock.c ****   } 
 878              		.loc 1 153 5 is_stmt 1 view .LVU237
 153:src/sys/clock.c ****   } 
 879              		.loc 1 153 13 is_stmt 0 view .LVU238
 880 0282 FFF7FEFF 		bl	get_APB2CLK
 881              	.LVL54:
 882              		.loc 1 155 1 view .LVU239
 883 0286 4000     		lsls	r0, r0, #1
 884 0288 08BD     		pop	{r3, pc}
 885              	.L78:
 886 028a 00BF     		.align	2
 887              	.L77:
 888 028c 00000000 		.word	RCC
 889              		.cfi_endproc
 890              	.LFE410:
 891              		.size	get_APB2TIMCLK, .-get_APB2TIMCLK
 892              	.Letext0:
 893              		.file 4 "/usr/lib/gcc/arm-none-eabi/13.2.1/include/stdint.h"
 894              		.file 5 "src/sys/clock.h"
 895              		.section	.debug_info,"",%progbits
 896              	.Ldebug_info0:
 897 0000 6B080000 		.4byte	0x86b
 898 0004 0500     		.2byte	0x5
 899 0006 01       		.byte	0x1
 900 0007 04       		.byte	0x4
 901 0008 00000000 		.4byte	.Ldebug_abbrev0
 902 000c 16       		.uleb128 0x16
 903 000d 80030000 		.4byte	.LASF107
 904 0011 0C       		.byte	0xc
 905 0012 9A020000 		.4byte	.LASF108
 906 0016 5C040000 		.4byte	.LASF109
 907 001a 00000000 		.4byte	.Ltext0
 908 001e 90020000 		.4byte	.Letext0-.Ltext0
 909 0022 00000000 		.4byte	.Ldebug_line0
 910 0026 04       		.uleb128 0x4
 911 0027 08       		.byte	0x8
 912 0028 07       		.byte	0x7
 913 0029 B2000000 		.4byte	.LASF0
 914 002d 04       		.uleb128 0x4
 915 002e 04       		.byte	0x4
 916 002f 07       		.byte	0x7
 917 0030 61010000 		.4byte	.LASF1
 918 0034 04       		.uleb128 0x4
 919 0035 01       		.byte	0x1
 920 0036 08       		.byte	0x8
 921 0037 0B030000 		.4byte	.LASF2
 922 003b 04       		.uleb128 0x4
 923 003c 01       		.byte	0x1
 924 003d 06       		.byte	0x6
 925 003e 7F000000 		.4byte	.LASF3
 926 0042 04       		.uleb128 0x4
 927 0043 02       		.byte	0x2
 928 0044 05       		.byte	0x5
 929 0045 28030000 		.4byte	.LASF4
 930 0049 09       		.uleb128 0x9
 931 004a 5E020000 		.4byte	.LASF8
 932 004e 04       		.byte	0x4
 933 004f 28       		.byte	0x28
 934 0050 18       		.byte	0x18
 935 0051 55000000 		.4byte	0x55
 936 0055 04       		.uleb128 0x4
 937 0056 04       		.byte	0x4
 938 0057 05       		.byte	0x5
 939 0058 D1000000 		.4byte	.LASF5
 940 005c 04       		.uleb128 0x4
 941 005d 08       		.byte	0x8
 942 005e 05       		.byte	0x5
 943 005f 71000000 		.4byte	.LASF6
 944 0063 04       		.uleb128 0x4
 945 0064 02       		.byte	0x2
 946 0065 07       		.byte	0x7
 947 0066 C6010000 		.4byte	.LASF7
 948 006a 09       		.uleb128 0x9
 949 006b 77030000 		.4byte	.LASF9
 950 006f 04       		.byte	0x4
 951 0070 34       		.byte	0x34
 952 0071 19       		.byte	0x19
 953 0072 76000000 		.4byte	0x76
 954 0076 04       		.uleb128 0x4
 955 0077 04       		.byte	0x4
 956 0078 07       		.byte	0x7
 957 0079 84010000 		.4byte	.LASF10
 958 007d 17       		.uleb128 0x17
 959 007e 04       		.byte	0x4
 960 007f 05       		.byte	0x5
 961 0080 696E7400 		.ascii	"int\000"
 962 0084 0C       		.uleb128 0xc
 963 0085 34000000 		.4byte	0x34
 964 0089 07       		.byte	0x7
 965 008a 9B000000 		.4byte	0x9b
 966 008e 02       		.uleb128 0x2
 967 008f 8F020000 		.4byte	.LASF11
 968 0093 00       		.byte	0
 969 0094 02       		.uleb128 0x2
 970 0095 84020000 		.4byte	.LASF12
 971 0099 01       		.byte	0x1
 972 009a 00       		.byte	0
 973 009b 09       		.uleb128 0x9
 974 009c 13050000 		.4byte	.LASF13
 975 00a0 05       		.byte	0x5
 976 00a1 07       		.byte	0x7
 977 00a2 2A       		.byte	0x2a
 978 00a3 84000000 		.4byte	0x84
 979 00a7 0C       		.uleb128 0xc
 980 00a8 34000000 		.4byte	0x34
 981 00ac 08       		.byte	0x8
 982 00ad CA000000 		.4byte	0xca
 983 00b1 02       		.uleb128 0x2
 984 00b2 75010000 		.4byte	.LASF14
 985 00b6 00       		.byte	0
 986 00b7 02       		.uleb128 0x2
 987 00b8 6E010000 		.4byte	.LASF15
 988 00bc 01       		.byte	0x1
 989 00bd 02       		.uleb128 0x2
 990 00be 19040000 		.4byte	.LASF16
 991 00c2 02       		.byte	0x2
 992 00c3 02       		.uleb128 0x2
 993 00c4 22040000 		.4byte	.LASF17
 994 00c8 03       		.byte	0x3
 995 00c9 00       		.byte	0
 996 00ca 18       		.uleb128 0x18
 997 00cb 535700   		.ascii	"SW\000"
 998 00ce 05       		.byte	0x5
 999 00cf 08       		.byte	0x8
 1000 00d0 38       		.byte	0x38
 1001 00d1 A7000000 		.4byte	0xa7
 1002 00d5 0C       		.uleb128 0xc
 1003 00d6 34000000 		.4byte	0x34
 1004 00da 09       		.byte	0x9
 1005 00db F8000000 		.4byte	0xf8
 1006 00df 02       		.uleb128 0x2
 1007 00e0 1E020000 		.4byte	.LASF18
 1008 00e4 00       		.byte	0
 1009 00e5 02       		.uleb128 0x2
 1010 00e6 6E030000 		.4byte	.LASF19
 1011 00ea 01       		.byte	0x1
 1012 00eb 02       		.uleb128 0x2
 1013 00ec 15020000 		.4byte	.LASF20
 1014 00f0 02       		.byte	0x2
 1015 00f1 02       		.uleb128 0x2
 1016 00f2 49000000 		.4byte	.LASF21
 1017 00f6 03       		.byte	0x3
 1018 00f7 00       		.byte	0
 1019 00f8 09       		.uleb128 0x9
 1020 00f9 F8020000 		.4byte	.LASF22
 1021 00fd 05       		.byte	0x5
 1022 00fe 09       		.byte	0x9
 1023 00ff 3C       		.byte	0x3c
 1024 0100 D5000000 		.4byte	0xd5
 1025 0104 0C       		.uleb128 0xc
 1026 0105 34000000 		.4byte	0x34
 1027 0109 0A       		.byte	0xa
 1028 010a 27010000 		.4byte	0x127
 1029 010e 02       		.uleb128 0x2
 1030 010f C3040000 		.4byte	.LASF23
 1031 0113 00       		.byte	0
 1032 0114 02       		.uleb128 0x2
 1033 0115 BD020000 		.4byte	.LASF24
 1034 0119 01       		.byte	0x1
 1035 011a 02       		.uleb128 0x2
 1036 011b 32000000 		.4byte	.LASF25
 1037 011f 02       		.byte	0x2
 1038 0120 02       		.uleb128 0x2
 1039 0121 65030000 		.4byte	.LASF26
 1040 0125 03       		.byte	0x3
 1041 0126 00       		.byte	0
 1042 0127 09       		.uleb128 0x9
 1043 0128 3C020000 		.4byte	.LASF27
 1044 012c 05       		.byte	0x5
 1045 012d 0A       		.byte	0xa
 1046 012e 3C       		.byte	0x3c
 1047 012f 04010000 		.4byte	0x104
 1048 0133 10       		.uleb128 0x10
 1049 0134 1A050000 		.4byte	.LASF63
 1050 0138 98       		.byte	0x98
 1051 0139 68       		.byte	0x68
 1052 013a 03030000 		.4byte	0x303
 1053 013e 0A       		.uleb128 0xa
 1054 013f 435200   		.ascii	"CR\000"
 1055 0142 69       		.byte	0x69
 1056 0143 6A000000 		.4byte	0x6a
 1057 0147 00       		.byte	0
 1058 0148 01       		.uleb128 0x1
 1059 0149 16010000 		.4byte	.LASF28
 1060 014d 6A       		.byte	0x6a
 1061 014e 0C       		.byte	0xc
 1062 014f 6A000000 		.4byte	0x6a
 1063 0153 04       		.byte	0x4
 1064 0154 01       		.uleb128 0x1
 1065 0155 F3040000 		.4byte	.LASF29
 1066 0159 6B       		.byte	0x6b
 1067 015a 0C       		.byte	0xc
 1068 015b 6A000000 		.4byte	0x6a
 1069 015f 08       		.byte	0x8
 1070 0160 0A       		.uleb128 0xa
 1071 0161 43495200 		.ascii	"CIR\000"
 1072 0165 6C       		.byte	0x6c
 1073 0166 6A000000 		.4byte	0x6a
 1074 016a 0C       		.byte	0xc
 1075 016b 01       		.uleb128 0x1
 1076 016c 53040000 		.4byte	.LASF30
 1077 0170 6D       		.byte	0x6d
 1078 0171 0C       		.byte	0xc
 1079 0172 6A000000 		.4byte	0x6a
 1080 0176 10       		.byte	0x10
 1081 0177 01       		.uleb128 0x1
 1082 0178 3A040000 		.4byte	.LASF31
 1083 017c 6E       		.byte	0x6e
 1084 017d 0C       		.byte	0xc
 1085 017e 6A000000 		.4byte	0x6a
 1086 0182 14       		.byte	0x14
 1087 0183 01       		.uleb128 0x1
 1088 0184 E9010000 		.4byte	.LASF32
 1089 0188 6F       		.byte	0x6f
 1090 0189 0C       		.byte	0xc
 1091 018a 6A000000 		.4byte	0x6a
 1092 018e 18       		.byte	0x18
 1093 018f 01       		.uleb128 0x1
 1094 0190 A3010000 		.4byte	.LASF33
 1095 0194 70       		.byte	0x70
 1096 0195 03       		.byte	0x3
 1097 0196 6A000000 		.4byte	0x6a
 1098 019a 1C       		.byte	0x1c
 1099 019b 01       		.uleb128 0x1
 1100 019c B4020000 		.4byte	.LASF34
 1101 01a0 71       		.byte	0x71
 1102 01a1 0C       		.byte	0xc
 1103 01a2 6A000000 		.4byte	0x6a
 1104 01a6 20       		.byte	0x20
 1105 01a7 01       		.uleb128 0x1
 1106 01a8 DF000000 		.4byte	.LASF35
 1107 01ac 72       		.byte	0x72
 1108 01ad 0C       		.byte	0xc
 1109 01ae 6A000000 		.4byte	0x6a
 1110 01b2 24       		.byte	0x24
 1111 01b3 01       		.uleb128 0x1
 1112 01b4 F2010000 		.4byte	.LASF36
 1113 01b8 73       		.byte	0x73
 1114 01b9 03       		.byte	0x3
 1115 01ba 6A000000 		.4byte	0x6a
 1116 01be 28       		.byte	0x28
 1117 01bf 01       		.uleb128 0x1
 1118 01c0 66020000 		.4byte	.LASF37
 1119 01c4 74       		.byte	0x74
 1120 01c5 03       		.byte	0x3
 1121 01c6 6A000000 		.4byte	0x6a
 1122 01ca 2C       		.byte	0x2c
 1123 01cb 01       		.uleb128 0x1
 1124 01cc EB040000 		.4byte	.LASF38
 1125 01d0 75       		.byte	0x75
 1126 01d1 0C       		.byte	0xc
 1127 01d2 6A000000 		.4byte	0x6a
 1128 01d6 30       		.byte	0x30
 1129 01d7 01       		.uleb128 0x1
 1130 01d8 4B040000 		.4byte	.LASF39
 1131 01dc 76       		.byte	0x76
 1132 01dd 0C       		.byte	0xc
 1133 01de 6A000000 		.4byte	0x6a
 1134 01e2 34       		.byte	0x34
 1135 01e3 01       		.uleb128 0x1
 1136 01e4 5D030000 		.4byte	.LASF40
 1137 01e8 77       		.byte	0x77
 1138 01e9 0C       		.byte	0xc
 1139 01ea 6A000000 		.4byte	0x6a
 1140 01ee 38       		.byte	0x38
 1141 01ef 01       		.uleb128 0x1
 1142 01f0 B7010000 		.4byte	.LASF41
 1143 01f4 78       		.byte	0x78
 1144 01f5 03       		.byte	0x3
 1145 01f6 6A000000 		.4byte	0x6a
 1146 01fa 3C       		.byte	0x3c
 1147 01fb 01       		.uleb128 0x1
 1148 01fc 43040000 		.4byte	.LASF42
 1149 0200 79       		.byte	0x79
 1150 0201 0C       		.byte	0xc
 1151 0202 6A000000 		.4byte	0x6a
 1152 0206 40       		.byte	0x40
 1153 0207 01       		.uleb128 0x1
 1154 0208 55030000 		.4byte	.LASF43
 1155 020c 7A       		.byte	0x7a
 1156 020d 0C       		.byte	0xc
 1157 020e 6A000000 		.4byte	0x6a
 1158 0212 44       		.byte	0x44
 1159 0213 01       		.uleb128 0x1
 1160 0214 46030000 		.4byte	.LASF44
 1161 0218 7B       		.byte	0x7b
 1162 0219 03       		.byte	0x3
 1163 021a 6A000000 		.4byte	0x6a
 1164 021e 48       		.byte	0x48
 1165 021f 01       		.uleb128 0x1
 1166 0220 2B040000 		.4byte	.LASF45
 1167 0224 7C       		.byte	0x7c
 1168 0225 03       		.byte	0x3
 1169 0226 6A000000 		.4byte	0x6a
 1170 022a 4C       		.byte	0x4c
 1171 022b 01       		.uleb128 0x1
 1172 022c 52000000 		.4byte	.LASF46
 1173 0230 7D       		.byte	0x7d
 1174 0231 0C       		.byte	0xc
 1175 0232 6A000000 		.4byte	0x6a
 1176 0236 50       		.byte	0x50
 1177 0237 01       		.uleb128 0x1
 1178 0238 AA020000 		.4byte	.LASF47
 1179 023c 7E       		.byte	0x7e
 1180 023d 0C       		.byte	0xc
 1181 023e 6A000000 		.4byte	0x6a
 1182 0242 54       		.byte	0x54
 1183 0243 01       		.uleb128 0x1
 1184 0244 3C030000 		.4byte	.LASF48
 1185 0248 7F       		.byte	0x7f
 1186 0249 0C       		.byte	0xc
 1187 024a 6A000000 		.4byte	0x6a
 1188 024e 58       		.byte	0x58
 1189 024f 01       		.uleb128 0x1
 1190 0250 CC040000 		.4byte	.LASF49
 1191 0254 80       		.byte	0x80
 1192 0255 03       		.byte	0x3
 1193 0256 6A000000 		.4byte	0x6a
 1194 025a 5C       		.byte	0x5c
 1195 025b 01       		.uleb128 0x1
 1196 025c E8000000 		.4byte	.LASF50
 1197 0260 81       		.byte	0x81
 1198 0261 0C       		.byte	0xc
 1199 0262 6A000000 		.4byte	0x6a
 1200 0266 60       		.byte	0x60
 1201 0267 01       		.uleb128 0x1
 1202 0268 0B020000 		.4byte	.LASF51
 1203 026c 82       		.byte	0x82
 1204 026d 0C       		.byte	0xc
 1205 026e 6A000000 		.4byte	0x6a
 1206 0272 64       		.byte	0x64
 1207 0273 01       		.uleb128 0x1
 1208 0274 F8040000 		.4byte	.LASF52
 1209 0278 83       		.byte	0x83
 1210 0279 03       		.byte	0x3
 1211 027a 6A000000 		.4byte	0x6a
 1212 027e 68       		.byte	0x68
 1213 027f 01       		.uleb128 0x1
 1214 0280 10000000 		.4byte	.LASF53
 1215 0284 84       		.byte	0x84
 1216 0285 03       		.byte	0x3
 1217 0286 6A000000 		.4byte	0x6a
 1218 028a 6C       		.byte	0x6c
 1219 028b 01       		.uleb128 0x1
 1220 028c B3040000 		.4byte	.LASF54
 1221 0290 85       		.byte	0x85
 1222 0291 0C       		.byte	0xc
 1223 0292 6A000000 		.4byte	0x6a
 1224 0296 70       		.byte	0x70
 1225 0297 0A       		.uleb128 0xa
 1226 0298 43535200 		.ascii	"CSR\000"
 1227 029c 86       		.byte	0x86
 1228 029d 6A000000 		.4byte	0x6a
 1229 02a1 74       		.byte	0x74
 1230 02a2 01       		.uleb128 0x1
 1231 02a3 2D020000 		.4byte	.LASF55
 1232 02a7 87       		.byte	0x87
 1233 02a8 03       		.byte	0x3
 1234 02a9 6A000000 		.4byte	0x6a
 1235 02ad 78       		.byte	0x78
 1236 02ae 01       		.uleb128 0x1
 1237 02af A3000000 		.4byte	.LASF56
 1238 02b3 88       		.byte	0x88
 1239 02b4 03       		.byte	0x3
 1240 02b5 6A000000 		.4byte	0x6a
 1241 02b9 7C       		.byte	0x7c
 1242 02ba 01       		.uleb128 0x1
 1243 02bb A4040000 		.4byte	.LASF57
 1244 02bf 89       		.byte	0x89
 1245 02c0 0C       		.byte	0xc
 1246 02c1 6A000000 		.4byte	0x6a
 1247 02c5 80       		.byte	0x80
 1248 02c6 01       		.uleb128 0x1
 1249 02c7 D9010000 		.4byte	.LASF58
 1250 02cb 8A       		.byte	0x8a
 1251 02cc 0C       		.byte	0xc
 1252 02cd 6A000000 		.4byte	0x6a
 1253 02d1 84       		.byte	0x84
 1254 02d2 01       		.uleb128 0x1
 1255 02d3 DC020000 		.4byte	.LASF59
 1256 02d7 8B       		.byte	0x8b
 1257 02d8 0C       		.byte	0xc
 1258 02d9 6A000000 		.4byte	0x6a
 1259 02dd 88       		.byte	0x88
 1260 02de 01       		.uleb128 0x1
 1261 02df 69000000 		.4byte	.LASF60
 1262 02e3 8C       		.byte	0x8c
 1263 02e4 0C       		.byte	0xc
 1264 02e5 6A000000 		.4byte	0x6a
 1265 02e9 8C       		.byte	0x8c
 1266 02ea 01       		.uleb128 0x1
 1267 02eb AA040000 		.4byte	.LASF61
 1268 02ef 8D       		.byte	0x8d
 1269 02f0 0C       		.byte	0xc
 1270 02f1 6A000000 		.4byte	0x6a
 1271 02f5 90       		.byte	0x90
 1272 02f6 01       		.uleb128 0x1
 1273 02f7 9A000000 		.4byte	.LASF62
 1274 02fb 8E       		.byte	0x8e
 1275 02fc 0C       		.byte	0xc
 1276 02fd 6A000000 		.4byte	0x6a
 1277 0301 94       		.byte	0x94
 1278 0302 00       		.byte	0
 1279 0303 11       		.uleb128 0x11
 1280 0304 33010000 		.4byte	0x133
 1281 0308 10       		.uleb128 0x10
 1282 0309 75020000 		.4byte	.LASF64
 1283 030d 28       		.byte	0x28
 1284 030e 92       		.byte	0x92
 1285 030f 8A030000 		.4byte	0x38a
 1286 0313 01       		.uleb128 0x1
 1287 0314 43000000 		.4byte	.LASF65
 1288 0318 93       		.byte	0x93
 1289 0319 0C       		.byte	0xc
 1290 031a 6A000000 		.4byte	0x6a
 1291 031e 00       		.byte	0
 1292 031f 01       		.uleb128 0x1
 1293 0320 1F000000 		.4byte	.LASF66
 1294 0324 94       		.byte	0x94
 1295 0325 0C       		.byte	0xc
 1296 0326 6A000000 		.4byte	0x6a
 1297 032a 04       		.byte	0x4
 1298 032b 01       		.uleb128 0x1
 1299 032c 2A010000 		.4byte	.LASF67
 1300 0330 95       		.byte	0x95
 1301 0331 0C       		.byte	0xc
 1302 0332 6A000000 		.4byte	0x6a
 1303 0336 08       		.byte	0x8
 1304 0337 01       		.uleb128 0x1
 1305 0338 05000000 		.4byte	.LASF68
 1306 033c 96       		.byte	0x96
 1307 033d 0C       		.byte	0xc
 1308 033e 6A000000 		.4byte	0x6a
 1309 0342 0C       		.byte	0xc
 1310 0343 0A       		.uleb128 0xa
 1311 0344 49445200 		.ascii	"IDR\000"
 1312 0348 97       		.byte	0x97
 1313 0349 6A000000 		.4byte	0x6a
 1314 034d 10       		.byte	0x10
 1315 034e 0A       		.uleb128 0xa
 1316 034f 4F445200 		.ascii	"ODR\000"
 1317 0353 98       		.byte	0x98
 1318 0354 6A000000 		.4byte	0x6a
 1319 0358 14       		.byte	0x14
 1320 0359 01       		.uleb128 0x1
 1321 035a 8B000000 		.4byte	.LASF69
 1322 035e 99       		.byte	0x99
 1323 035f 0C       		.byte	0xc
 1324 0360 6A000000 		.4byte	0x6a
 1325 0364 18       		.byte	0x18
 1326 0365 01       		.uleb128 0x1
 1327 0366 0B000000 		.4byte	.LASF70
 1328 036a 9A       		.byte	0x9a
 1329 036b 0C       		.byte	0xc
 1330 036c 6A000000 		.4byte	0x6a
 1331 0370 1C       		.byte	0x1c
 1332 0371 01       		.uleb128 0x1
 1333 0372 D7020000 		.4byte	.LASF71
 1334 0376 9B       		.byte	0x9b
 1335 0377 0C       		.byte	0xc
 1336 0378 6A000000 		.4byte	0x6a
 1337 037c 20       		.byte	0x20
 1338 037d 01       		.uleb128 0x1
 1339 037e D2020000 		.4byte	.LASF72
 1340 0382 9C       		.byte	0x9c
 1341 0383 0C       		.byte	0xc
 1342 0384 6A000000 		.4byte	0x6a
 1343 0388 24       		.byte	0x24
 1344 0389 00       		.byte	0
 1345 038a 11       		.uleb128 0x11
 1346 038b 08030000 		.4byte	0x308
 1347 038f 19       		.uleb128 0x19
 1348 0390 52434300 		.ascii	"RCC\000"
 1349 0394 03       		.byte	0x3
 1350 0395 3D02     		.2byte	0x23d
 1351 0397 26       		.byte	0x26
 1352 0398 03030000 		.4byte	0x303
 1353 039c 12       		.uleb128 0x12
 1354 039d CC020000 		.4byte	.LASF73
 1355 03a1 4402     		.2byte	0x244
 1356 03a3 8A030000 		.4byte	0x38a
 1357 03a7 12       		.uleb128 0x12
 1358 03a8 C6020000 		.4byte	.LASF74
 1359 03ac 4602     		.2byte	0x246
 1360 03ae 8A030000 		.4byte	0x38a
 1361 03b2 06       		.uleb128 0x6
 1362 03b3 19030000 		.4byte	.LASF76
 1363 03b7 94       		.byte	0x94
 1364 03b8 6A000000 		.4byte	0x6a
 1365 03bc 70020000 		.4byte	.LFB410
 1366 03c0 20000000 		.4byte	.LFE410-.LFB410
 1367 03c4 01       		.uleb128 0x1
 1368 03c5 9C       		.byte	0x9c
 1369 03c6 EF030000 		.4byte	0x3ef
 1370 03ca 03       		.uleb128 0x3
 1371 03cb DB040000 		.4byte	.LASF75
 1372 03cf 95       		.byte	0x95
 1373 03d0 6A000000 		.4byte	0x6a
 1374 03d4 0E000000 		.4byte	.LLST33
 1375 03d8 0C000000 		.4byte	.LVUS33
 1376 03dc 07       		.uleb128 0x7
 1377 03dd 82020000 		.4byte	.LVL53
 1378 03e1 2C040000 		.4byte	0x42c
 1379 03e5 0B       		.uleb128 0xb
 1380 03e6 86020000 		.4byte	.LVL54
 1381 03ea 2C040000 		.4byte	0x42c
 1382 03ee 00       		.byte	0
 1383 03ef 06       		.uleb128 0x6
 1384 03f0 52010000 		.4byte	.LASF77
 1385 03f4 8B       		.byte	0x8b
 1386 03f5 6A000000 		.4byte	0x6a
 1387 03f9 50020000 		.4byte	.LFB409
 1388 03fd 20000000 		.4byte	.LFE409-.LFB409
 1389 0401 01       		.uleb128 0x1
 1390 0402 9C       		.byte	0x9c
 1391 0403 2C040000 		.4byte	0x42c
 1392 0407 03       		.uleb128 0x3
 1393 0408 DB040000 		.4byte	.LASF75
 1394 040c 8C       		.byte	0x8c
 1395 040d 6A000000 		.4byte	0x6a
 1396 0411 18000000 		.4byte	.LLST32
 1397 0415 16000000 		.4byte	.LVUS32
 1398 0419 07       		.uleb128 0x7
 1399 041a 62020000 		.4byte	.LVL49
 1400 041e 69040000 		.4byte	0x469
 1401 0422 0B       		.uleb128 0xb
 1402 0423 66020000 		.4byte	.LVL50
 1403 0427 69040000 		.4byte	0x469
 1404 042b 00       		.byte	0
 1405 042c 06       		.uleb128 0x6
 1406 042d 07050000 		.4byte	.LASF78
 1407 0431 82       		.byte	0x82
 1408 0432 6A000000 		.4byte	0x6a
 1409 0436 2C020000 		.4byte	.LFB408
 1410 043a 24000000 		.4byte	.LFE408-.LFB408
 1411 043e 01       		.uleb128 0x1
 1412 043f 9C       		.byte	0x9c
 1413 0440 69040000 		.4byte	0x469
 1414 0444 03       		.uleb128 0x3
 1415 0445 DB040000 		.4byte	.LASF75
 1416 0449 83       		.byte	0x83
 1417 044a 6A000000 		.4byte	0x6a
 1418 044e 24000000 		.4byte	.LLST31
 1419 0452 20000000 		.4byte	.LVUS31
 1420 0456 07       		.uleb128 0x7
 1421 0457 3E020000 		.4byte	.LVL44
 1422 045b A6040000 		.4byte	0x4a6
 1423 045f 0B       		.uleb128 0xb
 1424 0460 42020000 		.4byte	.LVL45
 1425 0464 A6040000 		.4byte	0x4a6
 1426 0468 00       		.byte	0
 1427 0469 06       		.uleb128 0x6
 1428 046a 26000000 		.4byte	.LASF79
 1429 046e 79       		.byte	0x79
 1430 046f 6A000000 		.4byte	0x6a
 1431 0473 08020000 		.4byte	.LFB407
 1432 0477 24000000 		.4byte	.LFE407-.LFB407
 1433 047b 01       		.uleb128 0x1
 1434 047c 9C       		.byte	0x9c
 1435 047d A6040000 		.4byte	0x4a6
 1436 0481 03       		.uleb128 0x3
 1437 0482 DB040000 		.4byte	.LASF75
 1438 0486 7A       		.byte	0x7a
 1439 0487 6A000000 		.4byte	0x6a
 1440 048b 37000000 		.4byte	.LLST30
 1441 048f 33000000 		.4byte	.LVUS30
 1442 0493 07       		.uleb128 0x7
 1443 0494 1A020000 		.4byte	.LVL39
 1444 0498 A6040000 		.4byte	0x4a6
 1445 049c 0B       		.uleb128 0xb
 1446 049d 1E020000 		.4byte	.LVL40
 1447 04a1 A6040000 		.4byte	0x4a6
 1448 04a5 00       		.byte	0
 1449 04a6 06       		.uleb128 0x6
 1450 04a7 E0040000 		.4byte	.LASF80
 1451 04ab 70       		.byte	0x70
 1452 04ac 6A000000 		.4byte	0x6a
 1453 04b0 E4010000 		.4byte	.LFB406
 1454 04b4 24000000 		.4byte	.LFE406-.LFB406
 1455 04b8 01       		.uleb128 0x1
 1456 04b9 9C       		.byte	0x9c
 1457 04ba E3040000 		.4byte	0x4e3
 1458 04be 03       		.uleb128 0x3
 1459 04bf DB040000 		.4byte	.LASF75
 1460 04c3 71       		.byte	0x71
 1461 04c4 6A000000 		.4byte	0x6a
 1462 04c8 48000000 		.4byte	.LLST29
 1463 04cc 46000000 		.4byte	.LVUS29
 1464 04d0 07       		.uleb128 0x7
 1465 04d1 F6010000 		.4byte	.LVL34
 1466 04d5 E3040000 		.4byte	0x4e3
 1467 04d9 0B       		.uleb128 0xb
 1468 04da FA010000 		.4byte	.LVL35
 1469 04de E3040000 		.4byte	0x4e3
 1470 04e2 00       		.byte	0
 1471 04e3 06       		.uleb128 0x6
 1472 04e4 B8040000 		.4byte	.LASF81
 1473 04e8 61       		.byte	0x61
 1474 04e9 6A000000 		.4byte	0x6a
 1475 04ed B8010000 		.4byte	.LFB405
 1476 04f1 2C000000 		.4byte	.LFE405-.LFB405
 1477 04f5 01       		.uleb128 0x1
 1478 04f6 9C       		.byte	0x9c
 1479 04f7 21050000 		.4byte	0x521
 1480 04fb 05       		.uleb128 0x5
 1481 04fc 53575300 		.ascii	"SWS\000"
 1482 0500 62       		.byte	0x62
 1483 0501 06       		.byte	0x6
 1484 0502 CA000000 		.4byte	0xca
 1485 0506 54000000 		.4byte	.LLST28
 1486 050a 50000000 		.4byte	.LVUS28
 1487 050e 07       		.uleb128 0x7
 1488 050f D6010000 		.4byte	.LVL31
 1489 0513 92050000 		.4byte	0x592
 1490 0517 07       		.uleb128 0x7
 1491 0518 DA010000 		.4byte	.LVL32
 1492 051c 21050000 		.4byte	0x521
 1493 0520 00       		.byte	0
 1494 0521 06       		.uleb128 0x6
 1495 0522 5C000000 		.4byte	.LASF82
 1496 0526 53       		.byte	0x53
 1497 0527 6A000000 		.4byte	0x6a
 1498 052b 88010000 		.4byte	.LFB404
 1499 052f 30000000 		.4byte	.LFE404-.LFB404
 1500 0533 01       		.uleb128 0x1
 1501 0534 9C       		.byte	0x9c
 1502 0535 92050000 		.4byte	0x592
 1503 0539 03       		.uleb128 0x3
 1504 053a 7C010000 		.4byte	.LASF83
 1505 053e 54       		.byte	0x54
 1506 053f 6A000000 		.4byte	0x6a
 1507 0543 65000000 		.4byte	.LLST23
 1508 0547 63000000 		.4byte	.LVUS23
 1509 054b 05       		.uleb128 0x5
 1510 054c 4D00     		.ascii	"M\000"
 1511 054e 56       		.byte	0x56
 1512 054f 05       		.byte	0x5
 1513 0550 6A000000 		.4byte	0x6a
 1514 0554 6F000000 		.4byte	.LLST24
 1515 0558 6D000000 		.4byte	.LVUS24
 1516 055c 05       		.uleb128 0x5
 1517 055d 4E00     		.ascii	"N\000"
 1518 055f 57       		.byte	0x57
 1519 0560 05       		.byte	0x5
 1520 0561 6A000000 		.4byte	0x6a
 1521 0565 7E000000 		.4byte	.LLST25
 1522 0569 7C000000 		.4byte	.LVUS25
 1523 056d 05       		.uleb128 0x5
 1524 056e 5200     		.ascii	"R\000"
 1525 0570 58       		.byte	0x58
 1526 0571 05       		.byte	0x5
 1527 0572 6A000000 		.4byte	0x6a
 1528 0576 90000000 		.4byte	.LLST26
 1529 057a 8E000000 		.4byte	.LVUS26
 1530 057e 05       		.uleb128 0x5
 1531 057f 53524300 		.ascii	"SRC\000"
 1532 0583 59       		.byte	0x59
 1533 0584 0A       		.byte	0xa
 1534 0585 9B000000 		.4byte	0x9b
 1535 0589 A0000000 		.4byte	.LLST27
 1536 058d 9E000000 		.4byte	.LVUS27
 1537 0591 00       		.byte	0
 1538 0592 06       		.uleb128 0x6
 1539 0593 96010000 		.4byte	.LASF84
 1540 0597 45       		.byte	0x45
 1541 0598 6A000000 		.4byte	0x6a
 1542 059c 54010000 		.4byte	.LFB403
 1543 05a0 34000000 		.4byte	.LFE403-.LFB403
 1544 05a4 01       		.uleb128 0x1
 1545 05a5 9C       		.byte	0x9c
 1546 05a6 03060000 		.4byte	0x603
 1547 05aa 03       		.uleb128 0x3
 1548 05ab 7C010000 		.4byte	.LASF83
 1549 05af 46       		.byte	0x46
 1550 05b0 6A000000 		.4byte	0x6a
 1551 05b4 B2000000 		.4byte	.LLST18
 1552 05b8 AE000000 		.4byte	.LVUS18
 1553 05bc 05       		.uleb128 0x5
 1554 05bd 4D00     		.ascii	"M\000"
 1555 05bf 48       		.byte	0x48
 1556 05c0 05       		.byte	0x5
 1557 05c1 6A000000 		.4byte	0x6a
 1558 05c5 C9000000 		.4byte	.LLST19
 1559 05c9 C1000000 		.4byte	.LVUS19
 1560 05cd 05       		.uleb128 0x5
 1561 05ce 4E00     		.ascii	"N\000"
 1562 05d0 49       		.byte	0x49
 1563 05d1 05       		.byte	0x5
 1564 05d2 6A000000 		.4byte	0x6a
 1565 05d6 F9000000 		.4byte	.LLST20
 1566 05da F5000000 		.4byte	.LVUS20
 1567 05de 05       		.uleb128 0x5
 1568 05df 5000     		.ascii	"P\000"
 1569 05e1 4A       		.byte	0x4a
 1570 05e2 05       		.byte	0x5
 1571 05e3 6A000000 		.4byte	0x6a
 1572 05e7 1C010000 		.4byte	.LLST21
 1573 05eb 18010000 		.4byte	.LVUS21
 1574 05ef 05       		.uleb128 0x5
 1575 05f0 53524300 		.ascii	"SRC\000"
 1576 05f4 4B       		.byte	0x4b
 1577 05f5 0A       		.byte	0xa
 1578 05f6 9B000000 		.4byte	0x9b
 1579 05fa 43010000 		.4byte	.LLST22
 1580 05fe 3F010000 		.4byte	.LVUS22
 1581 0602 00       		.byte	0
 1582 0603 13       		.uleb128 0x13
 1583 0604 F2000000 		.4byte	.LASF102
 1584 0608 33       		.byte	0x33
 1585 0609 00010000 		.4byte	.LFB402
 1586 060d 54000000 		.4byte	.LFE402-.LFB402
 1587 0611 01       		.uleb128 0x1
 1588 0612 9C       		.byte	0x9c
 1589 0613 70060000 		.4byte	0x670
 1590 0617 1A       		.uleb128 0x1a
 1591 0618 56080000 		.4byte	0x856
 1592 061c 00010000 		.4byte	.LBI18
 1593 0620 02       		.byte	.LVU93
 1594 0621 00010000 		.4byte	.LBB18
 1595 0625 0E000000 		.4byte	.LBE18-.LBB18
 1596 0629 01       		.byte	0x1
 1597 062a 35       		.byte	0x35
 1598 062b 03       		.byte	0x3
 1599 062c 45060000 		.4byte	0x645
 1600 0630 14       		.uleb128 0x14
 1601 0631 64080000 		.4byte	0x864
 1602 0635 0A010000 		.4byte	.LBI20
 1603 0639 01       		.byte	.LVU96
 1604 063a 0A010000 		.4byte	.LBB20
 1605 063e 04000000 		.4byte	.LBE20-.LBB20
 1606 0642 9C02     		.2byte	0x29c
 1607 0644 00       		.byte	0
 1608 0645 1B       		.uleb128 0x1b
 1609 0646 5D080000 		.4byte	0x85d
 1610 064a 0E010000 		.4byte	.LBI22
 1611 064e 01       		.byte	.LVU99
 1612 064f 0E010000 		.4byte	.LBB22
 1613 0653 0C000000 		.4byte	.LBE22-.LBB22
 1614 0657 01       		.byte	0x1
 1615 0658 36       		.byte	0x36
 1616 0659 03       		.byte	0x3
 1617 065a 14       		.uleb128 0x14
 1618 065b 64080000 		.4byte	0x864
 1619 065f 16010000 		.4byte	.LBI24
 1620 0663 01       		.byte	.LVU102
 1621 0664 16010000 		.4byte	.LBB24
 1622 0668 04000000 		.4byte	.LBE24-.LBB24
 1623 066c 9A02     		.2byte	0x29a
 1624 066e 00       		.byte	0
 1625 066f 00       		.byte	0
 1626 0670 0D       		.uleb128 0xd
 1627 0671 F0020000 		.4byte	.LASF85
 1628 0675 29       		.byte	0x29
 1629 0676 B4000000 		.4byte	.LFB401
 1630 067a 4C000000 		.4byte	.LFE401-.LFB401
 1631 067e 01       		.uleb128 0x1
 1632 067f 9C       		.byte	0x9c
 1633 0680 19070000 		.4byte	0x719
 1634 0684 08       		.uleb128 0x8
 1635 0685 01020000 		.4byte	.LASF86
 1636 0689 29       		.byte	0x29
 1637 068a 16       		.byte	0x16
 1638 068b F8000000 		.4byte	0xf8
 1639 068f 62010000 		.4byte	.LLST10
 1640 0693 5E010000 		.4byte	.LVUS10
 1641 0697 08       		.uleb128 0x8
 1642 0698 DA000000 		.4byte	.LASF87
 1643 069c 29       		.byte	0x29
 1644 069d 24       		.byte	0x24
 1645 069e 6A000000 		.4byte	0x6a
 1646 06a2 7E010000 		.4byte	.LLST11
 1647 06a6 7A010000 		.4byte	.LVUS11
 1648 06aa 08       		.uleb128 0x8
 1649 06ab 06020000 		.4byte	.LASF88
 1650 06af 29       		.byte	0x29
 1651 06b0 31       		.byte	0x31
 1652 06b1 27010000 		.4byte	0x127
 1653 06b5 9A010000 		.4byte	.LLST12
 1654 06b9 96010000 		.4byte	.LVUS12
 1655 06bd 08       		.uleb128 0x8
 1656 06be 4D010000 		.4byte	.LASF89
 1657 06c2 29       		.byte	0x29
 1658 06c3 3F       		.byte	0x3f
 1659 06c4 6A000000 		.4byte	0x6a
 1660 06c8 B6010000 		.4byte	.LLST13
 1661 06cc B2010000 		.4byte	.LVUS13
 1662 06d0 03       		.uleb128 0x3
 1663 06d1 E4010000 		.4byte	.LASF90
 1664 06d5 2A       		.byte	0x2a
 1665 06d6 6A000000 		.4byte	0x6a
 1666 06da D0010000 		.4byte	.LLST14
 1667 06de CE010000 		.4byte	.LVUS14
 1668 06e2 03       		.uleb128 0x3
 1669 06e3 B2010000 		.4byte	.LASF91
 1670 06e7 2B       		.byte	0x2b
 1671 06e8 6A000000 		.4byte	0x6a
 1672 06ec DA010000 		.4byte	.LLST15
 1673 06f0 D8010000 		.4byte	.LVUS15
 1674 06f4 03       		.uleb128 0x3
 1675 06f5 C9000000 		.4byte	.LASF92
 1676 06f9 2C       		.byte	0x2c
 1677 06fa 6A000000 		.4byte	0x6a
 1678 06fe E4010000 		.4byte	.LLST16
 1679 0702 E2010000 		.4byte	.LVUS16
 1680 0706 03       		.uleb128 0x3
 1681 0707 3B000000 		.4byte	.LASF93
 1682 070b 2D       		.byte	0x2d
 1683 070c 6A000000 		.4byte	0x6a
 1684 0710 EE010000 		.4byte	.LLST17
 1685 0714 EC010000 		.4byte	.LVUS17
 1686 0718 00       		.byte	0
 1687 0719 0D       		.uleb128 0xd
 1688 071a 32010000 		.4byte	.LASF94
 1689 071e 1E       		.byte	0x1e
 1690 071f 6C000000 		.4byte	.LFB400
 1691 0723 48000000 		.4byte	.LFE400-.LFB400
 1692 0727 01       		.uleb128 0x1
 1693 0728 9C       		.byte	0x9c
 1694 0729 9D070000 		.4byte	0x79d
 1695 072d 08       		.uleb128 0x8
 1696 072e 0C010000 		.4byte	.LASF95
 1697 0732 1E       		.byte	0x1e
 1698 0733 2A       		.byte	0x2a
 1699 0734 6A000000 		.4byte	0x6a
 1700 0738 FC010000 		.4byte	.LLST4
 1701 073c F6010000 		.4byte	.LVUS4
 1702 0740 08       		.uleb128 0x8
 1703 0741 32030000 		.4byte	.LASF96
 1704 0745 1F       		.byte	0x1f
 1705 0746 10       		.byte	0x10
 1706 0747 6A000000 		.4byte	0x6a
 1707 074b 1E020000 		.4byte	.LLST5
 1708 074f 18020000 		.4byte	.LVUS5
 1709 0753 08       		.uleb128 0x8
 1710 0754 90000000 		.4byte	.LASF97
 1711 0758 20       		.byte	0x20
 1712 0759 10       		.byte	0x10
 1713 075a 6A000000 		.4byte	0x6a
 1714 075e 42020000 		.4byte	.LLST6
 1715 0762 3C020000 		.4byte	.LVUS6
 1716 0766 03       		.uleb128 0x3
 1717 0767 00000000 		.4byte	.LASF98
 1718 076b 21       		.byte	0x21
 1719 076c 6A000000 		.4byte	0x6a
 1720 0770 64020000 		.4byte	.LLST7
 1721 0774 62020000 		.4byte	.LVUS7
 1722 0778 03       		.uleb128 0x3
 1723 0779 1E010000 		.4byte	.LASF99
 1724 077d 22       		.byte	0x22
 1725 077e 6A000000 		.4byte	0x6a
 1726 0782 6D020000 		.4byte	.LLST8
 1727 0786 6B020000 		.4byte	.LVUS8
 1728 078a 03       		.uleb128 0x3
 1729 078b 24010000 		.4byte	.LASF100
 1730 078f 23       		.byte	0x23
 1731 0790 6A000000 		.4byte	0x6a
 1732 0794 77020000 		.4byte	.LLST9
 1733 0798 75020000 		.4byte	.LVUS9
 1734 079c 00       		.byte	0
 1735 079d 0D       		.uleb128 0xd
 1736 079e 00030000 		.4byte	.LASF101
 1737 07a2 19       		.byte	0x19
 1738 07a3 50000000 		.4byte	.LFB399
 1739 07a7 1C000000 		.4byte	.LFE399-.LFB399
 1740 07ab 01       		.uleb128 0x1
 1741 07ac 9C       		.byte	0x9c
 1742 07ad BF070000 		.4byte	0x7bf
 1743 07b1 0F       		.uleb128 0xf
 1744 07b2 53524300 		.ascii	"SRC\000"
 1745 07b6 19       		.byte	0x19
 1746 07b7 14       		.byte	0x14
 1747 07b8 CA000000 		.4byte	0xca
 1748 07bc 01       		.uleb128 0x1
 1749 07bd 50       		.byte	0x50
 1750 07be 00       		.byte	0
 1751 07bf 13       		.uleb128 0x13
 1752 07c0 E7020000 		.4byte	.LASF103
 1753 07c4 13       		.byte	0x13
 1754 07c5 3C000000 		.4byte	.LFB398
 1755 07c9 14000000 		.4byte	.LFE398-.LFB398
 1756 07cd 01       		.uleb128 0x1
 1757 07ce 9C       		.byte	0x9c
 1758 07cf E9070000 		.4byte	0x7e9
 1759 07d3 1C       		.uleb128 0x1c
 1760 07d4 64080000 		.4byte	0x864
 1761 07d8 46000000 		.4byte	.LBI16
 1762 07dc 01       		.byte	.LVU28
 1763 07dd 46000000 		.4byte	.LBB16
 1764 07e1 04000000 		.4byte	.LBE16-.LBB16
 1765 07e5 01       		.byte	0x1
 1766 07e6 16       		.byte	0x16
 1767 07e7 03       		.byte	0x3
 1768 07e8 00       		.byte	0
 1769 07e9 0D       		.uleb128 0xd
 1770 07ea 02010000 		.4byte	.LASF104
 1771 07ee 05       		.byte	0x5
 1772 07ef 00000000 		.4byte	.LFB397
 1773 07f3 3C000000 		.4byte	.LFE397-.LFB397
 1774 07f7 01       		.uleb128 0x1
 1775 07f8 9C       		.byte	0x9c
 1776 07f9 56080000 		.4byte	0x856
 1777 07fd 0F       		.uleb128 0xf
 1778 07fe 53524300 		.ascii	"SRC\000"
 1779 0802 05       		.byte	0x5
 1780 0803 17       		.byte	0x17
 1781 0804 9B000000 		.4byte	0x9b
 1782 0808 01       		.uleb128 0x1
 1783 0809 50       		.byte	0x50
 1784 080a 0F       		.uleb128 0xf
 1785 080b 4D00     		.ascii	"M\000"
 1786 080d 06       		.byte	0x6
 1787 080e 0C       		.byte	0xc
 1788 080f 49000000 		.4byte	0x49
 1789 0813 01       		.uleb128 0x1
 1790 0814 51       		.byte	0x51
 1791 0815 0E       		.uleb128 0xe
 1792 0816 4E00     		.ascii	"N\000"
 1793 0818 16       		.byte	0x16
 1794 0819 49000000 		.4byte	0x49
 1795 081d 83020000 		.4byte	.LLST0
 1796 0821 7F020000 		.4byte	.LVUS0
 1797 0825 0E       		.uleb128 0xe
 1798 0826 5000     		.ascii	"P\000"
 1799 0828 20       		.byte	0x20
 1800 0829 49000000 		.4byte	0x49
 1801 082d 9B020000 		.4byte	.LLST1
 1802 0831 97020000 		.4byte	.LVUS1
 1803 0835 0E       		.uleb128 0xe
 1804 0836 5100     		.ascii	"Q\000"
 1805 0838 2A       		.byte	0x2a
 1806 0839 49000000 		.4byte	0x49
 1807 083d B3020000 		.4byte	.LLST2
 1808 0841 AF020000 		.4byte	.LVUS2
 1809 0845 0E       		.uleb128 0xe
 1810 0846 5200     		.ascii	"R\000"
 1811 0848 34       		.byte	0x34
 1812 0849 49000000 		.4byte	0x49
 1813 084d C4020000 		.4byte	.LLST3
 1814 0851 C0020000 		.4byte	.LVUS3
 1815 0855 00       		.byte	0
 1816 0856 15       		.uleb128 0x15
 1817 0857 44020000 		.4byte	.LASF105
 1818 085b 9C02     		.2byte	0x29c
 1819 085d 15       		.uleb128 0x15
 1820 085e 51020000 		.4byte	.LASF106
 1821 0862 9A02     		.2byte	0x29a
 1822 0864 1D       		.uleb128 0x1d
 1823 0865 27020000 		.4byte	.LASF110
 1824 0869 02       		.byte	0x2
 1825 086a AA01     		.2byte	0x1aa
 1826 086c 35       		.byte	0x35
 1827 086d 03       		.byte	0x3
 1828 086e 00       		.byte	0
 1829              		.section	.debug_abbrev,"",%progbits
 1830              	.Ldebug_abbrev0:
 1831 0000 01       		.uleb128 0x1
 1832 0001 0D       		.uleb128 0xd
 1833 0002 00       		.byte	0
 1834 0003 03       		.uleb128 0x3
 1835 0004 0E       		.uleb128 0xe
 1836 0005 3A       		.uleb128 0x3a
 1837 0006 21       		.uleb128 0x21
 1838 0007 03       		.sleb128 3
 1839 0008 3B       		.uleb128 0x3b
 1840 0009 0B       		.uleb128 0xb
 1841 000a 39       		.uleb128 0x39
 1842 000b 0B       		.uleb128 0xb
 1843 000c 49       		.uleb128 0x49
 1844 000d 13       		.uleb128 0x13
 1845 000e 38       		.uleb128 0x38
 1846 000f 0B       		.uleb128 0xb
 1847 0010 00       		.byte	0
 1848 0011 00       		.byte	0
 1849 0012 02       		.uleb128 0x2
 1850 0013 28       		.uleb128 0x28
 1851 0014 00       		.byte	0
 1852 0015 03       		.uleb128 0x3
 1853 0016 0E       		.uleb128 0xe
 1854 0017 1C       		.uleb128 0x1c
 1855 0018 0B       		.uleb128 0xb
 1856 0019 00       		.byte	0
 1857 001a 00       		.byte	0
 1858 001b 03       		.uleb128 0x3
 1859 001c 34       		.uleb128 0x34
 1860 001d 00       		.byte	0
 1861 001e 03       		.uleb128 0x3
 1862 001f 0E       		.uleb128 0xe
 1863 0020 3A       		.uleb128 0x3a
 1864 0021 21       		.uleb128 0x21
 1865 0022 01       		.sleb128 1
 1866 0023 3B       		.uleb128 0x3b
 1867 0024 0B       		.uleb128 0xb
 1868 0025 39       		.uleb128 0x39
 1869 0026 21       		.uleb128 0x21
 1870 0027 0C       		.sleb128 12
 1871 0028 49       		.uleb128 0x49
 1872 0029 13       		.uleb128 0x13
 1873 002a 02       		.uleb128 0x2
 1874 002b 17       		.uleb128 0x17
 1875 002c B742     		.uleb128 0x2137
 1876 002e 17       		.uleb128 0x17
 1877 002f 00       		.byte	0
 1878 0030 00       		.byte	0
 1879 0031 04       		.uleb128 0x4
 1880 0032 24       		.uleb128 0x24
 1881 0033 00       		.byte	0
 1882 0034 0B       		.uleb128 0xb
 1883 0035 0B       		.uleb128 0xb
 1884 0036 3E       		.uleb128 0x3e
 1885 0037 0B       		.uleb128 0xb
 1886 0038 03       		.uleb128 0x3
 1887 0039 0E       		.uleb128 0xe
 1888 003a 00       		.byte	0
 1889 003b 00       		.byte	0
 1890 003c 05       		.uleb128 0x5
 1891 003d 34       		.uleb128 0x34
 1892 003e 00       		.byte	0
 1893 003f 03       		.uleb128 0x3
 1894 0040 08       		.uleb128 0x8
 1895 0041 3A       		.uleb128 0x3a
 1896 0042 21       		.uleb128 0x21
 1897 0043 01       		.sleb128 1
 1898 0044 3B       		.uleb128 0x3b
 1899 0045 0B       		.uleb128 0xb
 1900 0046 39       		.uleb128 0x39
 1901 0047 0B       		.uleb128 0xb
 1902 0048 49       		.uleb128 0x49
 1903 0049 13       		.uleb128 0x13
 1904 004a 02       		.uleb128 0x2
 1905 004b 17       		.uleb128 0x17
 1906 004c B742     		.uleb128 0x2137
 1907 004e 17       		.uleb128 0x17
 1908 004f 00       		.byte	0
 1909 0050 00       		.byte	0
 1910 0051 06       		.uleb128 0x6
 1911 0052 2E       		.uleb128 0x2e
 1912 0053 01       		.byte	0x1
 1913 0054 3F       		.uleb128 0x3f
 1914 0055 19       		.uleb128 0x19
 1915 0056 03       		.uleb128 0x3
 1916 0057 0E       		.uleb128 0xe
 1917 0058 3A       		.uleb128 0x3a
 1918 0059 21       		.uleb128 0x21
 1919 005a 01       		.sleb128 1
 1920 005b 3B       		.uleb128 0x3b
 1921 005c 0B       		.uleb128 0xb
 1922 005d 39       		.uleb128 0x39
 1923 005e 21       		.uleb128 0x21
 1924 005f 0A       		.sleb128 10
 1925 0060 49       		.uleb128 0x49
 1926 0061 13       		.uleb128 0x13
 1927 0062 11       		.uleb128 0x11
 1928 0063 01       		.uleb128 0x1
 1929 0064 12       		.uleb128 0x12
 1930 0065 06       		.uleb128 0x6
 1931 0066 40       		.uleb128 0x40
 1932 0067 18       		.uleb128 0x18
 1933 0068 7A       		.uleb128 0x7a
 1934 0069 19       		.uleb128 0x19
 1935 006a 01       		.uleb128 0x1
 1936 006b 13       		.uleb128 0x13
 1937 006c 00       		.byte	0
 1938 006d 00       		.byte	0
 1939 006e 07       		.uleb128 0x7
 1940 006f 48       		.uleb128 0x48
 1941 0070 00       		.byte	0
 1942 0071 7D       		.uleb128 0x7d
 1943 0072 01       		.uleb128 0x1
 1944 0073 8201     		.uleb128 0x82
 1945 0075 19       		.uleb128 0x19
 1946 0076 7F       		.uleb128 0x7f
 1947 0077 13       		.uleb128 0x13
 1948 0078 00       		.byte	0
 1949 0079 00       		.byte	0
 1950 007a 08       		.uleb128 0x8
 1951 007b 05       		.uleb128 0x5
 1952 007c 00       		.byte	0
 1953 007d 03       		.uleb128 0x3
 1954 007e 0E       		.uleb128 0xe
 1955 007f 3A       		.uleb128 0x3a
 1956 0080 21       		.uleb128 0x21
 1957 0081 01       		.sleb128 1
 1958 0082 3B       		.uleb128 0x3b
 1959 0083 0B       		.uleb128 0xb
 1960 0084 39       		.uleb128 0x39
 1961 0085 0B       		.uleb128 0xb
 1962 0086 49       		.uleb128 0x49
 1963 0087 13       		.uleb128 0x13
 1964 0088 02       		.uleb128 0x2
 1965 0089 17       		.uleb128 0x17
 1966 008a B742     		.uleb128 0x2137
 1967 008c 17       		.uleb128 0x17
 1968 008d 00       		.byte	0
 1969 008e 00       		.byte	0
 1970 008f 09       		.uleb128 0x9
 1971 0090 16       		.uleb128 0x16
 1972 0091 00       		.byte	0
 1973 0092 03       		.uleb128 0x3
 1974 0093 0E       		.uleb128 0xe
 1975 0094 3A       		.uleb128 0x3a
 1976 0095 0B       		.uleb128 0xb
 1977 0096 3B       		.uleb128 0x3b
 1978 0097 0B       		.uleb128 0xb
 1979 0098 39       		.uleb128 0x39
 1980 0099 0B       		.uleb128 0xb
 1981 009a 49       		.uleb128 0x49
 1982 009b 13       		.uleb128 0x13
 1983 009c 00       		.byte	0
 1984 009d 00       		.byte	0
 1985 009e 0A       		.uleb128 0xa
 1986 009f 0D       		.uleb128 0xd
 1987 00a0 00       		.byte	0
 1988 00a1 03       		.uleb128 0x3
 1989 00a2 08       		.uleb128 0x8
 1990 00a3 3A       		.uleb128 0x3a
 1991 00a4 21       		.uleb128 0x21
 1992 00a5 03       		.sleb128 3
 1993 00a6 3B       		.uleb128 0x3b
 1994 00a7 0B       		.uleb128 0xb
 1995 00a8 39       		.uleb128 0x39
 1996 00a9 21       		.uleb128 0x21
 1997 00aa 0C       		.sleb128 12
 1998 00ab 49       		.uleb128 0x49
 1999 00ac 13       		.uleb128 0x13
 2000 00ad 38       		.uleb128 0x38
 2001 00ae 0B       		.uleb128 0xb
 2002 00af 00       		.byte	0
 2003 00b0 00       		.byte	0
 2004 00b1 0B       		.uleb128 0xb
 2005 00b2 48       		.uleb128 0x48
 2006 00b3 00       		.byte	0
 2007 00b4 7D       		.uleb128 0x7d
 2008 00b5 01       		.uleb128 0x1
 2009 00b6 7F       		.uleb128 0x7f
 2010 00b7 13       		.uleb128 0x13
 2011 00b8 00       		.byte	0
 2012 00b9 00       		.byte	0
 2013 00ba 0C       		.uleb128 0xc
 2014 00bb 04       		.uleb128 0x4
 2015 00bc 01       		.byte	0x1
 2016 00bd 3E       		.uleb128 0x3e
 2017 00be 21       		.uleb128 0x21
 2018 00bf 07       		.sleb128 7
 2019 00c0 0B       		.uleb128 0xb
 2020 00c1 21       		.uleb128 0x21
 2021 00c2 01       		.sleb128 1
 2022 00c3 49       		.uleb128 0x49
 2023 00c4 13       		.uleb128 0x13
 2024 00c5 3A       		.uleb128 0x3a
 2025 00c6 21       		.uleb128 0x21
 2026 00c7 05       		.sleb128 5
 2027 00c8 3B       		.uleb128 0x3b
 2028 00c9 0B       		.uleb128 0xb
 2029 00ca 39       		.uleb128 0x39
 2030 00cb 21       		.uleb128 0x21
 2031 00cc 0E       		.sleb128 14
 2032 00cd 01       		.uleb128 0x1
 2033 00ce 13       		.uleb128 0x13
 2034 00cf 00       		.byte	0
 2035 00d0 00       		.byte	0
 2036 00d1 0D       		.uleb128 0xd
 2037 00d2 2E       		.uleb128 0x2e
 2038 00d3 01       		.byte	0x1
 2039 00d4 3F       		.uleb128 0x3f
 2040 00d5 19       		.uleb128 0x19
 2041 00d6 03       		.uleb128 0x3
 2042 00d7 0E       		.uleb128 0xe
 2043 00d8 3A       		.uleb128 0x3a
 2044 00d9 21       		.uleb128 0x21
 2045 00da 01       		.sleb128 1
 2046 00db 3B       		.uleb128 0x3b
 2047 00dc 0B       		.uleb128 0xb
 2048 00dd 39       		.uleb128 0x39
 2049 00de 21       		.uleb128 0x21
 2050 00df 06       		.sleb128 6
 2051 00e0 27       		.uleb128 0x27
 2052 00e1 19       		.uleb128 0x19
 2053 00e2 11       		.uleb128 0x11
 2054 00e3 01       		.uleb128 0x1
 2055 00e4 12       		.uleb128 0x12
 2056 00e5 06       		.uleb128 0x6
 2057 00e6 40       		.uleb128 0x40
 2058 00e7 18       		.uleb128 0x18
 2059 00e8 7A       		.uleb128 0x7a
 2060 00e9 19       		.uleb128 0x19
 2061 00ea 01       		.uleb128 0x1
 2062 00eb 13       		.uleb128 0x13
 2063 00ec 00       		.byte	0
 2064 00ed 00       		.byte	0
 2065 00ee 0E       		.uleb128 0xe
 2066 00ef 05       		.uleb128 0x5
 2067 00f0 00       		.byte	0
 2068 00f1 03       		.uleb128 0x3
 2069 00f2 08       		.uleb128 0x8
 2070 00f3 3A       		.uleb128 0x3a
 2071 00f4 21       		.uleb128 0x21
 2072 00f5 01       		.sleb128 1
 2073 00f6 3B       		.uleb128 0x3b
 2074 00f7 21       		.uleb128 0x21
 2075 00f8 06       		.sleb128 6
 2076 00f9 39       		.uleb128 0x39
 2077 00fa 0B       		.uleb128 0xb
 2078 00fb 49       		.uleb128 0x49
 2079 00fc 13       		.uleb128 0x13
 2080 00fd 02       		.uleb128 0x2
 2081 00fe 17       		.uleb128 0x17
 2082 00ff B742     		.uleb128 0x2137
 2083 0101 17       		.uleb128 0x17
 2084 0102 00       		.byte	0
 2085 0103 00       		.byte	0
 2086 0104 0F       		.uleb128 0xf
 2087 0105 05       		.uleb128 0x5
 2088 0106 00       		.byte	0
 2089 0107 03       		.uleb128 0x3
 2090 0108 08       		.uleb128 0x8
 2091 0109 3A       		.uleb128 0x3a
 2092 010a 21       		.uleb128 0x21
 2093 010b 01       		.sleb128 1
 2094 010c 3B       		.uleb128 0x3b
 2095 010d 0B       		.uleb128 0xb
 2096 010e 39       		.uleb128 0x39
 2097 010f 0B       		.uleb128 0xb
 2098 0110 49       		.uleb128 0x49
 2099 0111 13       		.uleb128 0x13
 2100 0112 02       		.uleb128 0x2
 2101 0113 18       		.uleb128 0x18
 2102 0114 00       		.byte	0
 2103 0115 00       		.byte	0
 2104 0116 10       		.uleb128 0x10
 2105 0117 13       		.uleb128 0x13
 2106 0118 01       		.byte	0x1
 2107 0119 03       		.uleb128 0x3
 2108 011a 0E       		.uleb128 0xe
 2109 011b 0B       		.uleb128 0xb
 2110 011c 0B       		.uleb128 0xb
 2111 011d 3A       		.uleb128 0x3a
 2112 011e 21       		.uleb128 0x21
 2113 011f 03       		.sleb128 3
 2114 0120 3B       		.uleb128 0x3b
 2115 0121 0B       		.uleb128 0xb
 2116 0122 39       		.uleb128 0x39
 2117 0123 21       		.uleb128 0x21
 2118 0124 08       		.sleb128 8
 2119 0125 01       		.uleb128 0x1
 2120 0126 13       		.uleb128 0x13
 2121 0127 00       		.byte	0
 2122 0128 00       		.byte	0
 2123 0129 11       		.uleb128 0x11
 2124 012a 35       		.uleb128 0x35
 2125 012b 00       		.byte	0
 2126 012c 49       		.uleb128 0x49
 2127 012d 13       		.uleb128 0x13
 2128 012e 00       		.byte	0
 2129 012f 00       		.byte	0
 2130 0130 12       		.uleb128 0x12
 2131 0131 34       		.uleb128 0x34
 2132 0132 00       		.byte	0
 2133 0133 03       		.uleb128 0x3
 2134 0134 0E       		.uleb128 0xe
 2135 0135 3A       		.uleb128 0x3a
 2136 0136 21       		.uleb128 0x21
 2137 0137 03       		.sleb128 3
 2138 0138 3B       		.uleb128 0x3b
 2139 0139 05       		.uleb128 0x5
 2140 013a 39       		.uleb128 0x39
 2141 013b 21       		.uleb128 0x21
 2142 013c 27       		.sleb128 39
 2143 013d 49       		.uleb128 0x49
 2144 013e 13       		.uleb128 0x13
 2145 013f 3F       		.uleb128 0x3f
 2146 0140 19       		.uleb128 0x19
 2147 0141 3C       		.uleb128 0x3c
 2148 0142 19       		.uleb128 0x19
 2149 0143 00       		.byte	0
 2150 0144 00       		.byte	0
 2151 0145 13       		.uleb128 0x13
 2152 0146 2E       		.uleb128 0x2e
 2153 0147 01       		.byte	0x1
 2154 0148 3F       		.uleb128 0x3f
 2155 0149 19       		.uleb128 0x19
 2156 014a 03       		.uleb128 0x3
 2157 014b 0E       		.uleb128 0xe
 2158 014c 3A       		.uleb128 0x3a
 2159 014d 21       		.uleb128 0x21
 2160 014e 01       		.sleb128 1
 2161 014f 3B       		.uleb128 0x3b
 2162 0150 0B       		.uleb128 0xb
 2163 0151 39       		.uleb128 0x39
 2164 0152 21       		.uleb128 0x21
 2165 0153 06       		.sleb128 6
 2166 0154 11       		.uleb128 0x11
 2167 0155 01       		.uleb128 0x1
 2168 0156 12       		.uleb128 0x12
 2169 0157 06       		.uleb128 0x6
 2170 0158 40       		.uleb128 0x40
 2171 0159 18       		.uleb128 0x18
 2172 015a 7A       		.uleb128 0x7a
 2173 015b 19       		.uleb128 0x19
 2174 015c 01       		.uleb128 0x1
 2175 015d 13       		.uleb128 0x13
 2176 015e 00       		.byte	0
 2177 015f 00       		.byte	0
 2178 0160 14       		.uleb128 0x14
 2179 0161 1D       		.uleb128 0x1d
 2180 0162 00       		.byte	0
 2181 0163 31       		.uleb128 0x31
 2182 0164 13       		.uleb128 0x13
 2183 0165 52       		.uleb128 0x52
 2184 0166 01       		.uleb128 0x1
 2185 0167 B842     		.uleb128 0x2138
 2186 0169 0B       		.uleb128 0xb
 2187 016a 11       		.uleb128 0x11
 2188 016b 01       		.uleb128 0x1
 2189 016c 12       		.uleb128 0x12
 2190 016d 06       		.uleb128 0x6
 2191 016e 58       		.uleb128 0x58
 2192 016f 21       		.uleb128 0x21
 2193 0170 03       		.sleb128 3
 2194 0171 59       		.uleb128 0x59
 2195 0172 05       		.uleb128 0x5
 2196 0173 57       		.uleb128 0x57
 2197 0174 21       		.uleb128 0x21
 2198 0175 01       		.sleb128 1
 2199 0176 00       		.byte	0
 2200 0177 00       		.byte	0
 2201 0178 15       		.uleb128 0x15
 2202 0179 2E       		.uleb128 0x2e
 2203 017a 00       		.byte	0
 2204 017b 03       		.uleb128 0x3
 2205 017c 0E       		.uleb128 0xe
 2206 017d 3A       		.uleb128 0x3a
 2207 017e 21       		.uleb128 0x21
 2208 017f 03       		.sleb128 3
 2209 0180 3B       		.uleb128 0x3b
 2210 0181 05       		.uleb128 0x5
 2211 0182 39       		.uleb128 0x39
 2212 0183 21       		.uleb128 0x21
 2213 0184 01       		.sleb128 1
 2214 0185 20       		.uleb128 0x20
 2215 0186 21       		.uleb128 0x21
 2216 0187 03       		.sleb128 3
 2217 0188 00       		.byte	0
 2218 0189 00       		.byte	0
 2219 018a 16       		.uleb128 0x16
 2220 018b 11       		.uleb128 0x11
 2221 018c 01       		.byte	0x1
 2222 018d 25       		.uleb128 0x25
 2223 018e 0E       		.uleb128 0xe
 2224 018f 13       		.uleb128 0x13
 2225 0190 0B       		.uleb128 0xb
 2226 0191 03       		.uleb128 0x3
 2227 0192 0E       		.uleb128 0xe
 2228 0193 1B       		.uleb128 0x1b
 2229 0194 0E       		.uleb128 0xe
 2230 0195 11       		.uleb128 0x11
 2231 0196 01       		.uleb128 0x1
 2232 0197 12       		.uleb128 0x12
 2233 0198 06       		.uleb128 0x6
 2234 0199 10       		.uleb128 0x10
 2235 019a 17       		.uleb128 0x17
 2236 019b 00       		.byte	0
 2237 019c 00       		.byte	0
 2238 019d 17       		.uleb128 0x17
 2239 019e 24       		.uleb128 0x24
 2240 019f 00       		.byte	0
 2241 01a0 0B       		.uleb128 0xb
 2242 01a1 0B       		.uleb128 0xb
 2243 01a2 3E       		.uleb128 0x3e
 2244 01a3 0B       		.uleb128 0xb
 2245 01a4 03       		.uleb128 0x3
 2246 01a5 08       		.uleb128 0x8
 2247 01a6 00       		.byte	0
 2248 01a7 00       		.byte	0
 2249 01a8 18       		.uleb128 0x18
 2250 01a9 16       		.uleb128 0x16
 2251 01aa 00       		.byte	0
 2252 01ab 03       		.uleb128 0x3
 2253 01ac 08       		.uleb128 0x8
 2254 01ad 3A       		.uleb128 0x3a
 2255 01ae 0B       		.uleb128 0xb
 2256 01af 3B       		.uleb128 0x3b
 2257 01b0 0B       		.uleb128 0xb
 2258 01b1 39       		.uleb128 0x39
 2259 01b2 0B       		.uleb128 0xb
 2260 01b3 49       		.uleb128 0x49
 2261 01b4 13       		.uleb128 0x13
 2262 01b5 00       		.byte	0
 2263 01b6 00       		.byte	0
 2264 01b7 19       		.uleb128 0x19
 2265 01b8 34       		.uleb128 0x34
 2266 01b9 00       		.byte	0
 2267 01ba 03       		.uleb128 0x3
 2268 01bb 08       		.uleb128 0x8
 2269 01bc 3A       		.uleb128 0x3a
 2270 01bd 0B       		.uleb128 0xb
 2271 01be 3B       		.uleb128 0x3b
 2272 01bf 05       		.uleb128 0x5
 2273 01c0 39       		.uleb128 0x39
 2274 01c1 0B       		.uleb128 0xb
 2275 01c2 49       		.uleb128 0x49
 2276 01c3 13       		.uleb128 0x13
 2277 01c4 3F       		.uleb128 0x3f
 2278 01c5 19       		.uleb128 0x19
 2279 01c6 3C       		.uleb128 0x3c
 2280 01c7 19       		.uleb128 0x19
 2281 01c8 00       		.byte	0
 2282 01c9 00       		.byte	0
 2283 01ca 1A       		.uleb128 0x1a
 2284 01cb 1D       		.uleb128 0x1d
 2285 01cc 01       		.byte	0x1
 2286 01cd 31       		.uleb128 0x31
 2287 01ce 13       		.uleb128 0x13
 2288 01cf 52       		.uleb128 0x52
 2289 01d0 01       		.uleb128 0x1
 2290 01d1 B842     		.uleb128 0x2138
 2291 01d3 0B       		.uleb128 0xb
 2292 01d4 11       		.uleb128 0x11
 2293 01d5 01       		.uleb128 0x1
 2294 01d6 12       		.uleb128 0x12
 2295 01d7 06       		.uleb128 0x6
 2296 01d8 58       		.uleb128 0x58
 2297 01d9 0B       		.uleb128 0xb
 2298 01da 59       		.uleb128 0x59
 2299 01db 0B       		.uleb128 0xb
 2300 01dc 57       		.uleb128 0x57
 2301 01dd 0B       		.uleb128 0xb
 2302 01de 01       		.uleb128 0x1
 2303 01df 13       		.uleb128 0x13
 2304 01e0 00       		.byte	0
 2305 01e1 00       		.byte	0
 2306 01e2 1B       		.uleb128 0x1b
 2307 01e3 1D       		.uleb128 0x1d
 2308 01e4 01       		.byte	0x1
 2309 01e5 31       		.uleb128 0x31
 2310 01e6 13       		.uleb128 0x13
 2311 01e7 52       		.uleb128 0x52
 2312 01e8 01       		.uleb128 0x1
 2313 01e9 B842     		.uleb128 0x2138
 2314 01eb 0B       		.uleb128 0xb
 2315 01ec 11       		.uleb128 0x11
 2316 01ed 01       		.uleb128 0x1
 2317 01ee 12       		.uleb128 0x12
 2318 01ef 06       		.uleb128 0x6
 2319 01f0 58       		.uleb128 0x58
 2320 01f1 0B       		.uleb128 0xb
 2321 01f2 59       		.uleb128 0x59
 2322 01f3 0B       		.uleb128 0xb
 2323 01f4 57       		.uleb128 0x57
 2324 01f5 0B       		.uleb128 0xb
 2325 01f6 00       		.byte	0
 2326 01f7 00       		.byte	0
 2327 01f8 1C       		.uleb128 0x1c
 2328 01f9 1D       		.uleb128 0x1d
 2329 01fa 00       		.byte	0
 2330 01fb 31       		.uleb128 0x31
 2331 01fc 13       		.uleb128 0x13
 2332 01fd 52       		.uleb128 0x52
 2333 01fe 01       		.uleb128 0x1
 2334 01ff B842     		.uleb128 0x2138
 2335 0201 0B       		.uleb128 0xb
 2336 0202 11       		.uleb128 0x11
 2337 0203 01       		.uleb128 0x1
 2338 0204 12       		.uleb128 0x12
 2339 0205 06       		.uleb128 0x6
 2340 0206 58       		.uleb128 0x58
 2341 0207 0B       		.uleb128 0xb
 2342 0208 59       		.uleb128 0x59
 2343 0209 0B       		.uleb128 0xb
 2344 020a 57       		.uleb128 0x57
 2345 020b 0B       		.uleb128 0xb
 2346 020c 00       		.byte	0
 2347 020d 00       		.byte	0
 2348 020e 1D       		.uleb128 0x1d
 2349 020f 2E       		.uleb128 0x2e
 2350 0210 00       		.byte	0
 2351 0211 03       		.uleb128 0x3
 2352 0212 0E       		.uleb128 0xe
 2353 0213 3A       		.uleb128 0x3a
 2354 0214 0B       		.uleb128 0xb
 2355 0215 3B       		.uleb128 0x3b
 2356 0216 05       		.uleb128 0x5
 2357 0217 39       		.uleb128 0x39
 2358 0218 0B       		.uleb128 0xb
 2359 0219 27       		.uleb128 0x27
 2360 021a 19       		.uleb128 0x19
 2361 021b 20       		.uleb128 0x20
 2362 021c 0B       		.uleb128 0xb
 2363 021d 00       		.byte	0
 2364 021e 00       		.byte	0
 2365 021f 00       		.byte	0
 2366              		.section	.debug_loclists,"",%progbits
 2367 0000 CD020000 		.4byte	.Ldebug_loc3-.Ldebug_loc2
 2368              	.Ldebug_loc2:
 2369 0004 0500     		.2byte	0x5
 2370 0006 04       		.byte	0x4
 2371 0007 00       		.byte	0
 2372 0008 00000000 		.4byte	0
 2373              	.Ldebug_loc0:
 2374              	.LVUS33:
 2375 000c 00       		.uleb128 .LVU231
 2376 000d 00       		.uleb128 .LVU233
 2377              	.LLST33:
 2378 000e 04       		.byte	0x4
 2379 000f F604     		.uleb128 .LVL51-.Ltext0
 2380 0011 F804     		.uleb128 .LVL52-.Ltext0
 2381 0013 01       		.uleb128 0x1
 2382 0014 53       		.byte	0x53
 2383 0015 00       		.byte	0
 2384              	.LVUS32:
 2385 0016 00       		.uleb128 .LVU218
 2386 0017 00       		.uleb128 .LVU220
 2387              	.LLST32:
 2388 0018 04       		.byte	0x4
 2389 0019 D604     		.uleb128 .LVL47-.Ltext0
 2390 001b D804     		.uleb128 .LVL48-.Ltext0
 2391 001d 01       		.uleb128 0x1
 2392 001e 53       		.byte	0x53
 2393 001f 00       		.byte	0
 2394              	.LVUS31:
 2395 0020 00       		.uleb128 .LVU204
 2396 0021 00       		.uleb128 .LVU208
 2397 0022 00       		.uleb128 .LVU209
 2398 0023 00       		.uleb128 .LVU212
 2399              	.LLST31:
 2400 0024 04       		.byte	0x4
 2401 0025 B204     		.uleb128 .LVL42-.Ltext0
 2402 0027 BA04     		.uleb128 .LVL43-.Ltext0
 2403 0029 01       		.uleb128 0x1
 2404 002a 54       		.byte	0x54
 2405 002b 04       		.byte	0x4
 2406 002c BE04     		.uleb128 .LVL44-.Ltext0
 2407 002e C604     		.uleb128 .LVL46-.Ltext0
 2408 0030 01       		.uleb128 0x1
 2409 0031 54       		.byte	0x54
 2410 0032 00       		.byte	0
 2411              	.LVUS30:
 2412 0033 00       		.uleb128 .LVU189
 2413 0034 00       		.uleb128 .LVU193
 2414 0035 00       		.uleb128 .LVU194
 2415 0036 00       		.uleb128 .LVU197
 2416              	.LLST30:
 2417 0037 04       		.byte	0x4
 2418 0038 8E04     		.uleb128 .LVL37-.Ltext0
 2419 003a 9604     		.uleb128 .LVL38-.Ltext0
 2420 003c 01       		.uleb128 0x1
 2421 003d 54       		.byte	0x54
 2422 003e 04       		.byte	0x4
 2423 003f 9A04     		.uleb128 .LVL39-.Ltext0
 2424 0041 A204     		.uleb128 .LVL41-.Ltext0
 2425 0043 01       		.uleb128 0x1
 2426 0044 54       		.byte	0x54
 2427 0045 00       		.byte	0
 2428              	.LVUS29:
 2429 0046 00       		.uleb128 .LVU174
 2430 0047 00       		.uleb128 .LVU182
 2431              	.LLST29:
 2432 0048 04       		.byte	0x4
 2433 0049 EA03     		.uleb128 .LVL33-.Ltext0
 2434 004b FE03     		.uleb128 .LVL36-.Ltext0
 2435 004d 01       		.uleb128 0x1
 2436 004e 51       		.byte	0x51
 2437 004f 00       		.byte	0
 2438              	.LVUS28:
 2439 0050 00       		.uleb128 .LVU162
 2440 0051 00       		.uleb128 .LVU167
 2441 0052 00       		.uleb128 .LVU167
 2442 0053 00       		.uleb128 .LVU169
 2443              	.LLST28:
 2444 0054 04       		.byte	0x4
 2445 0055 C003     		.uleb128 .LVL30-.Ltext0
 2446 0057 D503     		.uleb128 .LVL31-1-.Ltext0
 2447 0059 01       		.uleb128 0x1
 2448 005a 53       		.byte	0x53
 2449 005b 04       		.byte	0x4
 2450 005c D603     		.uleb128 .LVL31-.Ltext0
 2451 005e D903     		.uleb128 .LVL32-1-.Ltext0
 2452 0060 01       		.uleb128 0x1
 2453 0061 53       		.byte	0x53
 2454 0062 00       		.byte	0
 2455              	.LVUS23:
 2456 0063 00       		.uleb128 .LVU144
 2457 0064 00       		.uleb128 .LVU155
 2458              	.LLST23:
 2459 0065 04       		.byte	0x4
 2460 0066 8C03     		.uleb128 .LVL28-.Ltext0
 2461 0068 A603     		.uleb128 .LVL29-.Ltext0
 2462 006a 01       		.uleb128 0x1
 2463 006b 53       		.byte	0x53
 2464 006c 00       		.byte	0
 2465              	.LVUS24:
 2466 006d 01       		.uleb128 .LVU145
 2467 006e 00       		.uleb128 .LVU155
 2468              	.LLST24:
 2469 006f 04       		.byte	0x4
 2470 0070 8C03     		.uleb128 .LVL28-.Ltext0
 2471 0072 A603     		.uleb128 .LVL29-.Ltext0
 2472 0074 06       		.uleb128 0x6
 2473 0075 73       		.byte	0x73
 2474 0076 00       		.sleb128 0
 2475 0077 08       		.byte	0x8
 2476 0078 3F       		.byte	0x3f
 2477 0079 1A       		.byte	0x1a
 2478 007a 9F       		.byte	0x9f
 2479 007b 00       		.byte	0
 2480              	.LVUS25:
 2481 007c 01       		.uleb128 .LVU145
 2482 007d 00       		.uleb128 .LVU155
 2483              	.LLST25:
 2484 007e 04       		.byte	0x4
 2485 007f 8C03     		.uleb128 .LVL28-.Ltext0
 2486 0081 A603     		.uleb128 .LVL29-.Ltext0
 2487 0083 09       		.uleb128 0x9
 2488 0084 73       		.byte	0x73
 2489 0085 00       		.sleb128 0
 2490 0086 36       		.byte	0x36
 2491 0087 25       		.byte	0x25
 2492 0088 0A       		.byte	0xa
 2493 0089 FF01     		.2byte	0x1ff
 2494 008b 1A       		.byte	0x1a
 2495 008c 9F       		.byte	0x9f
 2496 008d 00       		.byte	0
 2497              	.LVUS26:
 2498 008e 01       		.uleb128 .LVU145
 2499 008f 00       		.uleb128 .LVU155
 2500              	.LLST26:
 2501 0090 04       		.byte	0x4
 2502 0091 8C03     		.uleb128 .LVL28-.Ltext0
 2503 0093 A603     		.uleb128 .LVL29-.Ltext0
 2504 0095 07       		.uleb128 0x7
 2505 0096 73       		.byte	0x73
 2506 0097 00       		.sleb128 0
 2507 0098 4C       		.byte	0x4c
 2508 0099 25       		.byte	0x25
 2509 009a 37       		.byte	0x37
 2510 009b 1A       		.byte	0x1a
 2511 009c 9F       		.byte	0x9f
 2512 009d 00       		.byte	0
 2513              	.LVUS27:
 2514 009e 02       		.uleb128 .LVU146
 2515 009f 00       		.uleb128 .LVU155
 2516              	.LLST27:
 2517 00a0 04       		.byte	0x4
 2518 00a1 8C03     		.uleb128 .LVL28-.Ltext0
 2519 00a3 A603     		.uleb128 .LVL29-.Ltext0
 2520 00a5 07       		.uleb128 0x7
 2521 00a6 73       		.byte	0x73
 2522 00a7 00       		.sleb128 0
 2523 00a8 46       		.byte	0x46
 2524 00a9 25       		.byte	0x25
 2525 00aa 31       		.byte	0x31
 2526 00ab 1A       		.byte	0x1a
 2527 00ac 9F       		.byte	0x9f
 2528 00ad 00       		.byte	0
 2529              	.LVUS18:
 2530 00ae 00       		.uleb128 .LVU126
 2531 00af 00       		.uleb128 .LVU135
 2532 00b0 00       		.uleb128 .LVU139
 2533 00b1 00       		.uleb128 0
 2534              	.LLST18:
 2535 00b2 04       		.byte	0x4
 2536 00b3 D802     		.uleb128 .LVL23-.Ltext0
 2537 00b5 EE02     		.uleb128 .LVL26-.Ltext0
 2538 00b7 01       		.uleb128 0x1
 2539 00b8 53       		.byte	0x53
 2540 00b9 04       		.byte	0x4
 2541 00ba FA02     		.uleb128 .LVL27-.Ltext0
 2542 00bc 8803     		.uleb128 .LFE403-.Ltext0
 2543 00be 01       		.uleb128 0x1
 2544 00bf 53       		.byte	0x53
 2545 00c0 00       		.byte	0
 2546              	.LVUS19:
 2547 00c1 01       		.uleb128 .LVU127
 2548 00c2 00       		.uleb128 .LVU132
 2549 00c3 00       		.uleb128 .LVU132
 2550 00c4 00       		.uleb128 .LVU134
 2551 00c5 00       		.uleb128 .LVU134
 2552 00c6 00       		.uleb128 .LVU135
 2553 00c7 00       		.uleb128 .LVU139
 2554 00c8 00       		.uleb128 0
 2555              	.LLST19:
 2556 00c9 04       		.byte	0x4
 2557 00ca D802     		.uleb128 .LVL23-.Ltext0
 2558 00cc E002     		.uleb128 .LVL24-.Ltext0
 2559 00ce 06       		.uleb128 0x6
 2560 00cf 73       		.byte	0x73
 2561 00d0 00       		.sleb128 0
 2562 00d1 08       		.byte	0x8
 2563 00d2 3F       		.byte	0x3f
 2564 00d3 1A       		.byte	0x1a
 2565 00d4 9F       		.byte	0x9f
 2566 00d5 04       		.byte	0x4
 2567 00d6 E002     		.uleb128 .LVL24-.Ltext0
 2568 00d8 EA02     		.uleb128 .LVL25-.Ltext0
 2569 00da 01       		.uleb128 0x1
 2570 00db 52       		.byte	0x52
 2571 00dc 04       		.byte	0x4
 2572 00dd EA02     		.uleb128 .LVL25-.Ltext0
 2573 00df EE02     		.uleb128 .LVL26-.Ltext0
 2574 00e1 06       		.uleb128 0x6
 2575 00e2 73       		.byte	0x73
 2576 00e3 00       		.sleb128 0
 2577 00e4 08       		.byte	0x8
 2578 00e5 3F       		.byte	0x3f
 2579 00e6 1A       		.byte	0x1a
 2580 00e7 9F       		.byte	0x9f
 2581 00e8 04       		.byte	0x4
 2582 00e9 FA02     		.uleb128 .LVL27-.Ltext0
 2583 00eb 8803     		.uleb128 .LFE403-.Ltext0
 2584 00ed 06       		.uleb128 0x6
 2585 00ee 73       		.byte	0x73
 2586 00ef 00       		.sleb128 0
 2587 00f0 08       		.byte	0x8
 2588 00f1 3F       		.byte	0x3f
 2589 00f2 1A       		.byte	0x1a
 2590 00f3 9F       		.byte	0x9f
 2591 00f4 00       		.byte	0
 2592              	.LVUS20:
 2593 00f5 01       		.uleb128 .LVU127
 2594 00f6 00       		.uleb128 .LVU135
 2595 00f7 00       		.uleb128 .LVU139
 2596 00f8 00       		.uleb128 0
 2597              	.LLST20:
 2598 00f9 04       		.byte	0x4
 2599 00fa D802     		.uleb128 .LVL23-.Ltext0
 2600 00fc EE02     		.uleb128 .LVL26-.Ltext0
 2601 00fe 09       		.uleb128 0x9
 2602 00ff 73       		.byte	0x73
 2603 0100 00       		.sleb128 0
 2604 0101 36       		.byte	0x36
 2605 0102 25       		.byte	0x25
 2606 0103 0A       		.byte	0xa
 2607 0104 FF01     		.2byte	0x1ff
 2608 0106 1A       		.byte	0x1a
 2609 0107 9F       		.byte	0x9f
 2610 0108 04       		.byte	0x4
 2611 0109 FA02     		.uleb128 .LVL27-.Ltext0
 2612 010b 8803     		.uleb128 .LFE403-.Ltext0
 2613 010d 09       		.uleb128 0x9
 2614 010e 73       		.byte	0x73
 2615 010f 00       		.sleb128 0
 2616 0110 36       		.byte	0x36
 2617 0111 25       		.byte	0x25
 2618 0112 0A       		.byte	0xa
 2619 0113 FF01     		.2byte	0x1ff
 2620 0115 1A       		.byte	0x1a
 2621 0116 9F       		.byte	0x9f
 2622 0117 00       		.byte	0
 2623              	.LVUS21:
 2624 0118 01       		.uleb128 .LVU127
 2625 0119 00       		.uleb128 .LVU135
 2626 011a 00       		.uleb128 .LVU139
 2627 011b 00       		.uleb128 0
 2628              	.LLST21:
 2629 011c 04       		.byte	0x4
 2630 011d D802     		.uleb128 .LVL23-.Ltext0
 2631 011f EE02     		.uleb128 .LVL26-.Ltext0
 2632 0121 0B       		.uleb128 0xb
 2633 0122 73       		.byte	0x73
 2634 0123 00       		.sleb128 0
 2635 0124 40       		.byte	0x40
 2636 0125 25       		.byte	0x25
 2637 0126 33       		.byte	0x33
 2638 0127 1A       		.byte	0x1a
 2639 0128 23       		.byte	0x23
 2640 0129 01       		.uleb128 0x1
 2641 012a 31       		.byte	0x31
 2642 012b 24       		.byte	0x24
 2643 012c 9F       		.byte	0x9f
 2644 012d 04       		.byte	0x4
 2645 012e FA02     		.uleb128 .LVL27-.Ltext0
 2646 0130 8803     		.uleb128 .LFE403-.Ltext0
 2647 0132 0B       		.uleb128 0xb
 2648 0133 73       		.byte	0x73
 2649 0134 00       		.sleb128 0
 2650 0135 40       		.byte	0x40
 2651 0136 25       		.byte	0x25
 2652 0137 33       		.byte	0x33
 2653 0138 1A       		.byte	0x1a
 2654 0139 23       		.byte	0x23
 2655 013a 01       		.uleb128 0x1
 2656 013b 31       		.byte	0x31
 2657 013c 24       		.byte	0x24
 2658 013d 9F       		.byte	0x9f
 2659 013e 00       		.byte	0
 2660              	.LVUS22:
 2661 013f 02       		.uleb128 .LVU128
 2662 0140 00       		.uleb128 .LVU135
 2663 0141 00       		.uleb128 .LVU139
 2664 0142 00       		.uleb128 0
 2665              	.LLST22:
 2666 0143 04       		.byte	0x4
 2667 0144 D802     		.uleb128 .LVL23-.Ltext0
 2668 0146 EE02     		.uleb128 .LVL26-.Ltext0
 2669 0148 07       		.uleb128 0x7
 2670 0149 73       		.byte	0x73
 2671 014a 00       		.sleb128 0
 2672 014b 46       		.byte	0x46
 2673 014c 25       		.byte	0x25
 2674 014d 31       		.byte	0x31
 2675 014e 1A       		.byte	0x1a
 2676 014f 9F       		.byte	0x9f
 2677 0150 04       		.byte	0x4
 2678 0151 FA02     		.uleb128 .LVL27-.Ltext0
 2679 0153 8803     		.uleb128 .LFE403-.Ltext0
 2680 0155 07       		.uleb128 0x7
 2681 0156 73       		.byte	0x73
 2682 0157 00       		.sleb128 0
 2683 0158 46       		.byte	0x46
 2684 0159 25       		.byte	0x25
 2685 015a 31       		.byte	0x31
 2686 015b 1A       		.byte	0x1a
 2687 015c 9F       		.byte	0x9f
 2688 015d 00       		.byte	0
 2689              	.LVUS10:
 2690 015e 00       		.uleb128 0
 2691 015f 00       		.uleb128 .LVU78
 2692 0160 00       		.uleb128 .LVU78
 2693 0161 00       		.uleb128 0
 2694              	.LLST10:
 2695 0162 04       		.byte	0x4
 2696 0163 B401     		.uleb128 .LVL17-.Ltext0
 2697 0165 D801     		.uleb128 .LVL20-.Ltext0
 2698 0167 01       		.uleb128 0x1
 2699 0168 50       		.byte	0x50
 2700 0169 04       		.byte	0x4
 2701 016a D801     		.uleb128 .LVL20-.Ltext0
 2702 016c 8002     		.uleb128 .LFE401-.Ltext0
 2703 016e 0A       		.uleb128 0xa
 2704 016f A3       		.byte	0xa3
 2705 0170 03       		.uleb128 0x3
 2706 0171 A5       		.byte	0xa5
 2707 0172 00       		.uleb128 0
 2708 0173 26       		.uleb128 0x26
 2709 0174 A8       		.byte	0xa8
 2710 0175 34       		.uleb128 0x34
 2711 0176 A8       		.byte	0xa8
 2712 0177 00       		.uleb128 0
 2713 0178 9F       		.byte	0x9f
 2714 0179 00       		.byte	0
 2715              	.LVUS11:
 2716 017a 00       		.uleb128 0
 2717 017b 00       		.uleb128 .LVU73
 2718 017c 00       		.uleb128 .LVU73
 2719 017d 00       		.uleb128 0
 2720              	.LLST11:
 2721 017e 04       		.byte	0x4
 2722 017f B401     		.uleb128 .LVL17-.Ltext0
 2723 0181 C401     		.uleb128 .LVL18-.Ltext0
 2724 0183 01       		.uleb128 0x1
 2725 0184 51       		.byte	0x51
 2726 0185 04       		.byte	0x4
 2727 0186 C401     		.uleb128 .LVL18-.Ltext0
 2728 0188 8002     		.uleb128 .LFE401-.Ltext0
 2729 018a 0A       		.uleb128 0xa
 2730 018b A3       		.byte	0xa3
 2731 018c 03       		.uleb128 0x3
 2732 018d A5       		.byte	0xa5
 2733 018e 01       		.uleb128 0x1
 2734 018f 26       		.uleb128 0x26
 2735 0190 A8       		.byte	0xa8
 2736 0191 2D       		.uleb128 0x2d
 2737 0192 A8       		.byte	0xa8
 2738 0193 00       		.uleb128 0
 2739 0194 9F       		.byte	0x9f
 2740 0195 00       		.byte	0
 2741              	.LVUS12:
 2742 0196 00       		.uleb128 0
 2743 0197 00       		.uleb128 .LVU74
 2744 0198 00       		.uleb128 .LVU74
 2745 0199 00       		.uleb128 0
 2746              	.LLST12:
 2747 019a 04       		.byte	0x4
 2748 019b B401     		.uleb128 .LVL17-.Ltext0
 2749 019d C801     		.uleb128 .LVL19-.Ltext0
 2750 019f 01       		.uleb128 0x1
 2751 01a0 52       		.byte	0x52
 2752 01a1 04       		.byte	0x4
 2753 01a2 C801     		.uleb128 .LVL19-.Ltext0
 2754 01a4 8002     		.uleb128 .LFE401-.Ltext0
 2755 01a6 0A       		.uleb128 0xa
 2756 01a7 A3       		.byte	0xa3
 2757 01a8 03       		.uleb128 0x3
 2758 01a9 A5       		.byte	0xa5
 2759 01aa 02       		.uleb128 0x2
 2760 01ab 26       		.uleb128 0x26
 2761 01ac A8       		.byte	0xa8
 2762 01ad 34       		.uleb128 0x34
 2763 01ae A8       		.byte	0xa8
 2764 01af 00       		.uleb128 0
 2765 01b0 9F       		.byte	0x9f
 2766 01b1 00       		.byte	0
 2767              	.LVUS13:
 2768 01b2 00       		.uleb128 0
 2769 01b3 00       		.uleb128 .LVU84
 2770 01b4 00       		.uleb128 .LVU84
 2771 01b5 00       		.uleb128 0
 2772              	.LLST13:
 2773 01b6 04       		.byte	0x4
 2774 01b7 B401     		.uleb128 .LVL17-.Ltext0
 2775 01b9 E201     		.uleb128 .LVL21-.Ltext0
 2776 01bb 01       		.uleb128 0x1
 2777 01bc 53       		.byte	0x53
 2778 01bd 04       		.byte	0x4
 2779 01be E201     		.uleb128 .LVL21-.Ltext0
 2780 01c0 8002     		.uleb128 .LFE401-.Ltext0
 2781 01c2 0A       		.uleb128 0xa
 2782 01c3 A3       		.byte	0xa3
 2783 01c4 03       		.uleb128 0x3
 2784 01c5 A5       		.byte	0xa5
 2785 01c6 03       		.uleb128 0x3
 2786 01c7 26       		.uleb128 0x26
 2787 01c8 A8       		.byte	0xa8
 2788 01c9 2D       		.uleb128 0x2d
 2789 01ca A8       		.byte	0xa8
 2790 01cb 00       		.uleb128 0
 2791 01cc 9F       		.byte	0x9f
 2792 01cd 00       		.byte	0
 2793              	.LVUS14:
 2794 01ce 00       		.uleb128 .LVU78
 2795 01cf 00       		.uleb128 0
 2796              	.LLST14:
 2797 01d0 04       		.byte	0x4
 2798 01d1 D801     		.uleb128 .LVL20-.Ltext0
 2799 01d3 8002     		.uleb128 .LFE401-.Ltext0
 2800 01d5 01       		.uleb128 0x1
 2801 01d6 50       		.byte	0x50
 2802 01d7 00       		.byte	0
 2803              	.LVUS15:
 2804 01d8 01       		.uleb128 .LVU79
 2805 01d9 00       		.uleb128 0
 2806              	.LLST15:
 2807 01da 04       		.byte	0x4
 2808 01db D801     		.uleb128 .LVL20-.Ltext0
 2809 01dd 8002     		.uleb128 .LFE401-.Ltext0
 2810 01df 01       		.uleb128 0x1
 2811 01e0 52       		.byte	0x52
 2812 01e1 00       		.byte	0
 2813              	.LVUS16:
 2814 01e2 02       		.uleb128 .LVU80
 2815 01e3 00       		.uleb128 0
 2816              	.LLST16:
 2817 01e4 04       		.byte	0x4
 2818 01e5 D801     		.uleb128 .LVL20-.Ltext0
 2819 01e7 8002     		.uleb128 .LFE401-.Ltext0
 2820 01e9 01       		.uleb128 0x1
 2821 01ea 51       		.byte	0x51
 2822 01eb 00       		.byte	0
 2823              	.LVUS17:
 2824 01ec 00       		.uleb128 .LVU87
 2825 01ed 00       		.uleb128 0
 2826              	.LLST17:
 2827 01ee 04       		.byte	0x4
 2828 01ef EE01     		.uleb128 .LVL22-.Ltext0
 2829 01f1 8002     		.uleb128 .LFE401-.Ltext0
 2830 01f3 01       		.uleb128 0x1
 2831 01f4 53       		.byte	0x53
 2832 01f5 00       		.byte	0
 2833              	.LVUS4:
 2834 01f6 00       		.uleb128 0
 2835 01f7 00       		.uleb128 .LVU47
 2836 01f8 00       		.uleb128 .LVU47
 2837 01f9 00       		.uleb128 .LVU48
 2838 01fa 00       		.uleb128 .LVU48
 2839 01fb 00       		.uleb128 0
 2840              	.LLST4:
 2841 01fc 04       		.byte	0x4
 2842 01fd 6C       		.uleb128 .LVL5-.Ltext0
 2843 01fe 72       		.uleb128 .LVL6-.Ltext0
 2844 01ff 01       		.uleb128 0x1
 2845 0200 50       		.byte	0x50
 2846 0201 04       		.byte	0x4
 2847 0202 72       		.uleb128 .LVL6-.Ltext0
 2848 0203 76       		.uleb128 .LVL7-.Ltext0
 2849 0204 03       		.uleb128 0x3
 2850 0205 70       		.byte	0x70
 2851 0206 01       		.sleb128 1
 2852 0207 9F       		.byte	0x9f
 2853 0208 04       		.byte	0x4
 2854 0209 76       		.uleb128 .LVL7-.Ltext0
 2855 020a B401     		.uleb128 .LFE400-.Ltext0
 2856 020c 0A       		.uleb128 0xa
 2857 020d A3       		.byte	0xa3
 2858 020e 03       		.uleb128 0x3
 2859 020f A5       		.byte	0xa5
 2860 0210 00       		.uleb128 0
 2861 0211 26       		.uleb128 0x26
 2862 0212 A8       		.byte	0xa8
 2863 0213 2D       		.uleb128 0x2d
 2864 0214 A8       		.byte	0xa8
 2865 0215 00       		.uleb128 0
 2866 0216 9F       		.byte	0x9f
 2867 0217 00       		.byte	0
 2868              	.LVUS5:
 2869 0218 00       		.uleb128 0
 2870 0219 00       		.uleb128 .LVU52
 2871 021a 00       		.uleb128 .LVU52
 2872 021b 00       		.uleb128 .LVU53
 2873 021c 00       		.uleb128 .LVU53
 2874 021d 00       		.uleb128 0
 2875              	.LLST5:
 2876 021e 04       		.byte	0x4
 2877 021f 6C       		.uleb128 .LVL5-.Ltext0
 2878 0220 7E       		.uleb128 .LVL9-.Ltext0
 2879 0221 01       		.uleb128 0x1
 2880 0222 51       		.byte	0x51
 2881 0223 04       		.byte	0x4
 2882 0224 7E       		.uleb128 .LVL9-.Ltext0
 2883 0225 8201     		.uleb128 .LVL10-.Ltext0
 2884 0227 03       		.uleb128 0x3
 2885 0228 71       		.byte	0x71
 2886 0229 01       		.sleb128 1
 2887 022a 9F       		.byte	0x9f
 2888 022b 04       		.byte	0x4
 2889 022c 8201     		.uleb128 .LVL10-.Ltext0
 2890 022e B401     		.uleb128 .LFE400-.Ltext0
 2891 0230 0A       		.uleb128 0xa
 2892 0231 A3       		.byte	0xa3
 2893 0232 03       		.uleb128 0x3
 2894 0233 A5       		.byte	0xa5
 2895 0234 01       		.uleb128 0x1
 2896 0235 26       		.uleb128 0x26
 2897 0236 A8       		.byte	0xa8
 2898 0237 2D       		.uleb128 0x2d
 2899 0238 A8       		.byte	0xa8
 2900 0239 00       		.uleb128 0
 2901 023a 9F       		.byte	0x9f
 2902 023b 00       		.byte	0
 2903              	.LVUS6:
 2904 023c 00       		.uleb128 0
 2905 023d 00       		.uleb128 .LVU57
 2906 023e 00       		.uleb128 .LVU57
 2907 023f 00       		.uleb128 .LVU58
 2908 0240 00       		.uleb128 .LVU58
 2909 0241 00       		.uleb128 0
 2910              	.LLST6:
 2911 0242 04       		.byte	0x4
 2912 0243 6C       		.uleb128 .LVL5-.Ltext0
 2913 0244 8A01     		.uleb128 .LVL12-.Ltext0
 2914 0246 01       		.uleb128 0x1
 2915 0247 52       		.byte	0x52
 2916 0248 04       		.byte	0x4
 2917 0249 8A01     		.uleb128 .LVL12-.Ltext0
 2918 024b 8E01     		.uleb128 .LVL13-.Ltext0
 2919 024d 03       		.uleb128 0x3
 2920 024e 72       		.byte	0x72
 2921 024f 01       		.sleb128 1
 2922 0250 9F       		.byte	0x9f
 2923 0251 04       		.byte	0x4
 2924 0252 8E01     		.uleb128 .LVL13-.Ltext0
 2925 0254 B401     		.uleb128 .LFE400-.Ltext0
 2926 0256 0A       		.uleb128 0xa
 2927 0257 A3       		.byte	0xa3
 2928 0258 03       		.uleb128 0x3
 2929 0259 A5       		.byte	0xa5
 2930 025a 02       		.uleb128 0x2
 2931 025b 26       		.uleb128 0x26
 2932 025c A8       		.byte	0xa8
 2933 025d 2D       		.uleb128 0x2d
 2934 025e A8       		.byte	0xa8
 2935 025f 00       		.uleb128 0
 2936 0260 9F       		.byte	0x9f
 2937 0261 00       		.byte	0
 2938              	.LVUS7:
 2939 0262 00       		.uleb128 .LVU49
 2940 0263 00       		.uleb128 0
 2941              	.LLST7:
 2942 0264 04       		.byte	0x4
 2943 0265 7A       		.uleb128 .LVL8-.Ltext0
 2944 0266 B401     		.uleb128 .LFE400-.Ltext0
 2945 0268 01       		.uleb128 0x1
 2946 0269 50       		.byte	0x50
 2947 026a 00       		.byte	0
 2948              	.LVUS8:
 2949 026b 00       		.uleb128 .LVU54
 2950 026c 00       		.uleb128 .LVU63
 2951              	.LLST8:
 2952 026d 04       		.byte	0x4
 2953 026e 8601     		.uleb128 .LVL11-.Ltext0
 2954 0270 A601     		.uleb128 .LVL15-.Ltext0
 2955 0272 01       		.uleb128 0x1
 2956 0273 51       		.byte	0x51
 2957 0274 00       		.byte	0
 2958              	.LVUS9:
 2959 0275 00       		.uleb128 .LVU59
 2960 0276 00       		.uleb128 .LVU64
 2961              	.LLST9:
 2962 0277 04       		.byte	0x4
 2963 0278 9201     		.uleb128 .LVL14-.Ltext0
 2964 027a AA01     		.uleb128 .LVL16-.Ltext0
 2965 027c 01       		.uleb128 0x1
 2966 027d 52       		.byte	0x52
 2967 027e 00       		.byte	0
 2968              	.LVUS0:
 2969 027f 00       		.uleb128 0
 2970 0280 00       		.uleb128 .LVU16
 2971 0281 00       		.uleb128 .LVU16
 2972 0282 00       		.uleb128 0
 2973              	.LLST0:
 2974 0283 04       		.byte	0x4
 2975 0284 00       		.uleb128 .LVL0-.Ltext0
 2976 0285 28       		.uleb128 .LVL2-.Ltext0
 2977 0286 01       		.uleb128 0x1
 2978 0287 52       		.byte	0x52
 2979 0288 04       		.byte	0x4
 2980 0289 28       		.uleb128 .LVL2-.Ltext0
 2981 028a 3C       		.uleb128 .LFE397-.Ltext0
 2982 028b 0A       		.uleb128 0xa
 2983 028c A3       		.byte	0xa3
 2984 028d 03       		.uleb128 0x3
 2985 028e A5       		.byte	0xa5
 2986 028f 02       		.uleb128 0x2
 2987 0290 26       		.uleb128 0x26
 2988 0291 A8       		.byte	0xa8
 2989 0292 2D       		.uleb128 0x2d
 2990 0293 A8       		.byte	0xa8
 2991 0294 00       		.uleb128 0
 2992 0295 9F       		.byte	0x9f
 2993 0296 00       		.byte	0
 2994              	.LVUS1:
 2995 0297 00       		.uleb128 0
 2996 0298 00       		.uleb128 .LVU8
 2997 0299 00       		.uleb128 .LVU8
 2998 029a 00       		.uleb128 0
 2999              	.LLST1:
 3000 029b 04       		.byte	0x4
 3001 029c 00       		.uleb128 .LVL0-.Ltext0
 3002 029d 12       		.uleb128 .LVL1-.Ltext0
 3003 029e 01       		.uleb128 0x1
 3004 029f 53       		.byte	0x53
 3005 02a0 04       		.byte	0x4
 3006 02a1 12       		.uleb128 .LVL1-.Ltext0
 3007 02a2 3C       		.uleb128 .LFE397-.Ltext0
 3008 02a3 0A       		.uleb128 0xa
 3009 02a4 A3       		.byte	0xa3
 3010 02a5 03       		.uleb128 0x3
 3011 02a6 A5       		.byte	0xa5
 3012 02a7 03       		.uleb128 0x3
 3013 02a8 26       		.uleb128 0x26
 3014 02a9 A8       		.byte	0xa8
 3015 02aa 2D       		.uleb128 0x2d
 3016 02ab A8       		.byte	0xa8
 3017 02ac 00       		.uleb128 0
 3018 02ad 9F       		.byte	0x9f
 3019 02ae 00       		.byte	0
 3020              	.LVUS2:
 3021 02af 00       		.uleb128 0
 3022 02b0 00       		.uleb128 .LVU22
 3023 02b1 00       		.uleb128 .LVU22
 3024 02b2 00       		.uleb128 0
 3025              	.LLST2:
 3026 02b3 04       		.byte	0x4
 3027 02b4 00       		.uleb128 .LVL0-.Ltext0
 3028 02b5 36       		.uleb128 .LVL3-.Ltext0
 3029 02b6 02       		.uleb128 0x2
 3030 02b7 91       		.byte	0x91
 3031 02b8 00       		.sleb128 0
 3032 02b9 04       		.byte	0x4
 3033 02ba 36       		.uleb128 .LVL3-.Ltext0
 3034 02bb 3C       		.uleb128 .LFE397-.Ltext0
 3035 02bc 02       		.uleb128 0x2
 3036 02bd 7D       		.byte	0x7d
 3037 02be 00       		.sleb128 0
 3038 02bf 00       		.byte	0
 3039              	.LVUS3:
 3040 02c0 00       		.uleb128 0
 3041 02c1 00       		.uleb128 .LVU22
 3042 02c2 00       		.uleb128 .LVU22
 3043 02c3 00       		.uleb128 0
 3044              	.LLST3:
 3045 02c4 04       		.byte	0x4
 3046 02c5 00       		.uleb128 .LVL0-.Ltext0
 3047 02c6 36       		.uleb128 .LVL3-.Ltext0
 3048 02c7 02       		.uleb128 0x2
 3049 02c8 91       		.byte	0x91
 3050 02c9 04       		.sleb128 4
 3051 02ca 04       		.byte	0x4
 3052 02cb 36       		.uleb128 .LVL3-.Ltext0
 3053 02cc 3C       		.uleb128 .LFE397-.Ltext0
 3054 02cd 02       		.uleb128 0x2
 3055 02ce 7D       		.byte	0x7d
 3056 02cf 04       		.sleb128 4
 3057 02d0 00       		.byte	0
 3058              	.Ldebug_loc3:
 3059              		.section	.debug_aranges,"",%progbits
 3060 0000 1C000000 		.4byte	0x1c
 3061 0004 0200     		.2byte	0x2
 3062 0006 00000000 		.4byte	.Ldebug_info0
 3063 000a 04       		.byte	0x4
 3064 000b 00       		.byte	0
 3065 000c 0000     		.2byte	0
 3066 000e 0000     		.2byte	0
 3067 0010 00000000 		.4byte	.Ltext0
 3068 0014 90020000 		.4byte	.Letext0-.Ltext0
 3069 0018 00000000 		.4byte	0
 3070 001c 00000000 		.4byte	0
 3071              		.section	.debug_line,"",%progbits
 3072              	.Ldebug_line0:
 3073 0000 85040000 		.section	.debug_str,"MS",%progbits,1
 3073      03008300 
 3073      00000201 
 3073      FB0E0D00 
 3073      01010101 
 3074              	.LASF98:
 3075 0000 48505245 		.ascii	"HPRE\000"
 3075      00
 3076              	.LASF68:
 3077 0005 50555044 		.ascii	"PUPDR\000"
 3077      5200
 3078              	.LASF70:
 3079 000b 4C434B52 		.ascii	"LCKR\000"
 3079      00
 3080              	.LASF53:
 3081 0010 5F726573 		.ascii	"_reserved_0x6c\000"
 3081      65727665 
 3081      645F3078 
 3081      366300
 3082              	.LASF66:
 3083 001f 4F545950 		.ascii	"OTYPER\000"
 3083      455200
 3084              	.LASF79:
 3085 0026 6765745F 		.ascii	"get_APB1CLK\000"
 3085      41504231 
 3085      434C4B00 
 3086              	.LASF25:
 3087 0032 4D434F32 		.ascii	"MCO2_HSE\000"
 3087      5F485345 
 3087      00
 3088              	.LASF93:
 3089 003b 4D434F32 		.ascii	"MCO2PRE\000"
 3089      50524500 
 3090              	.LASF65:
 3091 0043 4D4F4445 		.ascii	"MODER\000"
 3091      5200
 3092              	.LASF21:
 3093 0049 4D434F31 		.ascii	"MCO1_PLL\000"
 3093      5F504C4C 
 3093      00
 3094              	.LASF46:
 3095 0052 41484231 		.ascii	"AHB1LPENR\000"
 3095      4C50454E 
 3095      5200
 3096              	.LASF82:
 3097 005c 6765745F 		.ascii	"get_PLL_RCLK\000"
 3097      504C4C5F 
 3097      52434C4B 
 3097      00
 3098              	.LASF60:
 3099 0069 44434B43 		.ascii	"DCKCFGR\000"
 3099      46475200 
 3100              	.LASF6:
 3101 0071 6C6F6E67 		.ascii	"long long int\000"
 3101      206C6F6E 
 3101      6720696E 
 3101      7400
 3102              	.LASF3:
 3103 007f 7369676E 		.ascii	"signed char\000"
 3103      65642063 
 3103      68617200 
 3104              	.LASF69:
 3105 008b 42535252 		.ascii	"BSRR\000"
 3105      00
 3106              	.LASF97:
 3107 0090 50505245 		.ascii	"PPRE2_exp\000"
 3107      325F6578 
 3107      7000
 3108              	.LASF62:
 3109 009a 44434B43 		.ascii	"DCKCFGR2\000"
 3109      46475232 
 3109      00
 3110              	.LASF56:
 3111 00a3 5F726573 		.ascii	"_reserved_0x7c\000"
 3111      65727665 
 3111      645F3078 
 3111      376300
 3112              	.LASF0:
 3113 00b2 6C6F6E67 		.ascii	"long long unsigned int\000"
 3113      206C6F6E 
 3113      6720756E 
 3113      7369676E 
 3113      65642069 
 3114              	.LASF92:
 3115 00c9 4D434F31 		.ascii	"MCO1PRE\000"
 3115      50524500 
 3116              	.LASF5:
 3117 00d1 6C6F6E67 		.ascii	"long int\000"
 3117      20696E74 
 3117      00
 3118              	.LASF87:
 3119 00da 44495631 		.ascii	"DIV1\000"
 3119      00
 3120              	.LASF35:
 3121 00df 41504232 		.ascii	"APB2RSTR\000"
 3121      52535452 
 3121      00
 3122              	.LASF50:
 3123 00e8 41504231 		.ascii	"APB1LPENR\000"
 3123      4C50454E 
 3123      5200
 3124              	.LASF102:
 3125 00f2 656E6162 		.ascii	"enable_MCO_GPIO\000"
 3125      6C655F4D 
 3125      434F5F47 
 3125      50494F00 
 3126              	.LASF104:
 3127 0102 73746172 		.ascii	"start_PLL\000"
 3127      745F504C 
 3127      4C00
 3128              	.LASF95:
 3129 010c 48505245 		.ascii	"HPRE__exp\000"
 3129      5F5F6578 
 3129      7000
 3130              	.LASF28:
 3131 0116 504C4C43 		.ascii	"PLLCFGR\000"
 3131      46475200 
 3132              	.LASF99:
 3133 011e 50505245 		.ascii	"PPRE1\000"
 3133      3100
 3134              	.LASF100:
 3135 0124 50505245 		.ascii	"PPRE2\000"
 3135      3200
 3136              	.LASF67:
 3137 012a 4F535045 		.ascii	"OSPEEDR\000"
 3137      45445200 
 3138              	.LASF94:
 3139 0132 7365745F 		.ascii	"set_bus_clock_dividers_exp\000"
 3139      6275735F 
 3139      636C6F63 
 3139      6B5F6469 
 3139      76696465 
 3140              	.LASF89:
 3141 014d 44495632 		.ascii	"DIV2\000"
 3141      00
 3142              	.LASF77:
 3143 0152 6765745F 		.ascii	"get_APB1TIMCLK\000"
 3143      41504231 
 3143      54494D43 
 3143      4C4B00
 3144              	.LASF1:
 3145 0161 756E7369 		.ascii	"unsigned int\000"
 3145      676E6564 
 3145      20696E74 
 3145      00
 3146              	.LASF15:
 3147 016e 53575F48 		.ascii	"SW_HSE\000"
 3147      534500
 3148              	.LASF14:
 3149 0175 53575F48 		.ascii	"SW_HSI\000"
 3149      534900
 3150              	.LASF83:
 3151 017c 706C6C63 		.ascii	"pllcfgr\000"
 3151      66677200 
 3152              	.LASF10:
 3153 0184 6C6F6E67 		.ascii	"long unsigned int\000"
 3153      20756E73 
 3153      69676E65 
 3153      6420696E 
 3153      7400
 3154              	.LASF84:
 3155 0196 6765745F 		.ascii	"get_PLL_PCLK\000"
 3155      504C4C5F 
 3155      50434C4B 
 3155      00
 3156              	.LASF33:
 3157 01a3 5F726573 		.ascii	"_reserved_0x1c\000"
 3157      65727665 
 3157      645F3078 
 3157      316300
 3158              	.LASF91:
 3159 01b2 4D434F32 		.ascii	"MCO2\000"
 3159      00
 3160              	.LASF41:
 3161 01b7 5F726573 		.ascii	"_reserved_0x3c\000"
 3161      65727665 
 3161      645F3078 
 3161      336300
 3162              	.LASF7:
 3163 01c6 73686F72 		.ascii	"short unsigned int\000"
 3163      7420756E 
 3163      7369676E 
 3163      65642069 
 3163      6E7400
 3164              	.LASF58:
 3165 01d9 504C4C49 		.ascii	"PLLI2SCFGR\000"
 3165      32534346 
 3165      475200
 3166              	.LASF90:
 3167 01e4 4D434F31 		.ascii	"MCO1\000"
 3167      00
 3168              	.LASF32:
 3169 01e9 41484233 		.ascii	"AHB3RSTR\000"
 3169      52535452 
 3169      00
 3170              	.LASF36:
 3171 01f2 5F726573 		.ascii	"_reserved_0x28\000"
 3171      65727665 
 3171      645F3078 
 3171      323800
 3172              	.LASF86:
 3173 0201 53524331 		.ascii	"SRC1\000"
 3173      00
 3174              	.LASF88:
 3175 0206 53524332 		.ascii	"SRC2\000"
 3175      00
 3176              	.LASF51:
 3177 020b 41504232 		.ascii	"APB2LPENR\000"
 3177      4C50454E 
 3177      5200
 3178              	.LASF20:
 3179 0215 4D434F31 		.ascii	"MCO1_HSE\000"
 3179      5F485345 
 3179      00
 3180              	.LASF18:
 3181 021e 4D434F31 		.ascii	"MCO1_HSI\000"
 3181      5F485349 
 3181      00
 3182              	.LASF110:
 3183 0227 5F5F4453 		.ascii	"__DSB\000"
 3183      4200
 3184              	.LASF55:
 3185 022d 5F726573 		.ascii	"_reserved_0x78\000"
 3185      65727665 
 3185      645F3078 
 3185      373800
 3186              	.LASF27:
 3187 023c 4D434F32 		.ascii	"MCO2SRC\000"
 3187      53524300 
 3188              	.LASF105:
 3189 0244 656E6162 		.ascii	"enable_GPIOA\000"
 3189      6C655F47 
 3189      50494F41 
 3189      00
 3190              	.LASF106:
 3191 0251 656E6162 		.ascii	"enable_GPIOC\000"
 3191      6C655F47 
 3191      50494F43 
 3191      00
 3192              	.LASF8:
 3193 025e 696E7433 		.ascii	"int32_t\000"
 3193      325F7400 
 3194              	.LASF37:
 3195 0266 5F726573 		.ascii	"_reserved_0x2c\000"
 3195      65727665 
 3195      645F3078 
 3195      326300
 3196              	.LASF64:
 3197 0275 4750494F 		.ascii	"GPIO_registers\000"
 3197      5F726567 
 3197      69737465 
 3197      727300
 3198              	.LASF12:
 3199 0284 504C4C53 		.ascii	"PLLSRC_HSE\000"
 3199      52435F48 
 3199      534500
 3200              	.LASF11:
 3201 028f 504C4C53 		.ascii	"PLLSRC_HSI\000"
 3201      52435F48 
 3201      534900
 3202              	.LASF108:
 3203 029a 7372632F 		.ascii	"src/sys/clock.c\000"
 3203      7379732F 
 3203      636C6F63 
 3203      6B2E6300 
 3204              	.LASF47:
 3205 02aa 41484232 		.ascii	"AHB2LPENR\000"
 3205      4C50454E 
 3205      5200
 3206              	.LASF34:
 3207 02b4 41504231 		.ascii	"APB1RSTR\000"
 3207      52535452 
 3207      00
 3208              	.LASF24:
 3209 02bd 4D434F32 		.ascii	"MCO2_I2S\000"
 3209      5F493253 
 3209      00
 3210              	.LASF74:
 3211 02c6 4750494F 		.ascii	"GPIOA\000"
 3211      4100
 3212              	.LASF73:
 3213 02cc 4750494F 		.ascii	"GPIOC\000"
 3213      4300
 3214              	.LASF72:
 3215 02d2 41465248 		.ascii	"AFRH\000"
 3215      00
 3216              	.LASF71:
 3217 02d7 4146524C 		.ascii	"AFRL\000"
 3217      00
 3218              	.LASF59:
 3219 02dc 504C4C53 		.ascii	"PLLSAICFGR\000"
 3219      41494346 
 3219      475200
 3220              	.LASF103:
 3221 02e7 73746F70 		.ascii	"stop_PLL\000"
 3221      5F504C4C 
 3221      00
 3222              	.LASF85:
 3223 02f0 7365745F 		.ascii	"set_MCO\000"
 3223      4D434F00 
 3224              	.LASF22:
 3225 02f8 4D434F31 		.ascii	"MCO1SRC\000"
 3225      53524300 
 3226              	.LASF101:
 3227 0300 7365745F 		.ascii	"set_SYSCLK\000"
 3227      53595343 
 3227      4C4B00
 3228              	.LASF2:
 3229 030b 756E7369 		.ascii	"unsigned char\000"
 3229      676E6564 
 3229      20636861 
 3229      7200
 3230              	.LASF76:
 3231 0319 6765745F 		.ascii	"get_APB2TIMCLK\000"
 3231      41504232 
 3231      54494D43 
 3231      4C4B00
 3232              	.LASF4:
 3233 0328 73686F72 		.ascii	"short int\000"
 3233      7420696E 
 3233      7400
 3234              	.LASF96:
 3235 0332 50505245 		.ascii	"PPRE1_exp\000"
 3235      315F6578 
 3235      7000
 3236              	.LASF48:
 3237 033c 41484233 		.ascii	"AHB3LPENR\000"
 3237      4C50454E 
 3237      5200
 3238              	.LASF44:
 3239 0346 5F726573 		.ascii	"_reserved_0x48\000"
 3239      65727665 
 3239      645F3078 
 3239      343800
 3240              	.LASF43:
 3241 0355 41504232 		.ascii	"APB2ENR\000"
 3241      454E5200 
 3242              	.LASF40:
 3243 035d 41484233 		.ascii	"AHB3ENR\000"
 3243      454E5200 
 3244              	.LASF26:
 3245 0365 4D434F32 		.ascii	"MCO2_PLL\000"
 3245      5F504C4C 
 3245      00
 3246              	.LASF19:
 3247 036e 4D434F31 		.ascii	"MCO1_LSE\000"
 3247      5F4C5345 
 3247      00
 3248              	.LASF9:
 3249 0377 75696E74 		.ascii	"uint32_t\000"
 3249      33325F74 
 3249      00
 3250              	.LASF107:
 3251 0380 474E5520 		.ascii	"GNU C99 13.2.1 20231009 -mtune=cortex-m4 -mthumb -m"
 3251      43393920 
 3251      31332E32 
 3251      2E312032 
 3251      30323331 
 3252 03b3 666C6F61 		.ascii	"float-abi=hard -mfpu=fpv4-sp-d16 -march=armv7e-m+fp"
 3252      742D6162 
 3252      693D6861 
 3252      7264202D 
 3252      6D667075 
 3253 03e6 202D6720 		.ascii	" -g -O0 -Os -std=gnu99 -fsingle-precision-constant\000"
 3253      2D4F3020 
 3253      2D4F7320 
 3253      2D737464 
 3253      3D676E75 
 3254              	.LASF16:
 3255 0419 53575F50 		.ascii	"SW_PLL_P\000"
 3255      4C4C5F50 
 3255      00
 3256              	.LASF17:
 3257 0422 53575F50 		.ascii	"SW_PLL_R\000"
 3257      4C4C5F52 
 3257      00
 3258              	.LASF45:
 3259 042b 5F726573 		.ascii	"_reserved_0x4c\000"
 3259      65727665 
 3259      645F3078 
 3259      346300
 3260              	.LASF31:
 3261 043a 41484232 		.ascii	"AHB2RSTR\000"
 3261      52535452 
 3261      00
 3262              	.LASF42:
 3263 0443 41504231 		.ascii	"APB1ENR\000"
 3263      454E5200 
 3264              	.LASF39:
 3265 044b 41484232 		.ascii	"AHB2ENR\000"
 3265      454E5200 
 3266              	.LASF30:
 3267 0453 41484231 		.ascii	"AHB1RSTR\000"
 3267      52535452 
 3267      00
 3268              	.LASF109:
 3269 045c 2F686F6D 		.ascii	"/home/xoum/Documents/IESE3/C/TP7/TP7_potentiom\303\250"
 3269      652F786F 
 3269      756D2F44 
 3269      6F63756D 
 3269      656E7473 
 3270 048c 7472655F 		.ascii	"tre_plus_led (copier 1)\000"
 3270      706C7573 
 3270      5F6C6564 
 3270      2028636F 
 3270      70696572 
 3271              	.LASF57:
 3272 04a4 53534347 		.ascii	"SSCGR\000"
 3272      5200
 3273              	.LASF61:
 3274 04aa 434B4741 		.ascii	"CKGATENR\000"
 3274      54454E52 
 3274      00
 3275              	.LASF54:
 3276 04b3 42444352 		.ascii	"BDCR\000"
 3276      00
 3277              	.LASF81:
 3278 04b8 6765745F 		.ascii	"get_SYSCLK\000"
 3278      53595343 
 3278      4C4B00
 3279              	.LASF23:
 3280 04c3 4D434F32 		.ascii	"MCO2_SYS\000"
 3280      5F535953 
 3280      00
 3281              	.LASF49:
 3282 04cc 5F726573 		.ascii	"_reserved_0x5c\000"
 3282      65727665 
 3282      645F3078 
 3282      356300
 3283              	.LASF75:
 3284 04db 63666772 		.ascii	"cfgr\000"
 3284      00
 3285              	.LASF80:
 3286 04e0 6765745F 		.ascii	"get_AHBCLK\000"
 3286      41484243 
 3286      4C4B00
 3287              	.LASF38:
 3288 04eb 41484231 		.ascii	"AHB1ENR\000"
 3288      454E5200 
 3289              	.LASF29:
 3290 04f3 43464752 		.ascii	"CFGR\000"
 3290      00
 3291              	.LASF52:
 3292 04f8 5F726573 		.ascii	"_reserved_0x68\000"
 3292      65727665 
 3292      645F3078 
 3292      363800
 3293              	.LASF78:
 3294 0507 6765745F 		.ascii	"get_APB2CLK\000"
 3294      41504232 
 3294      434C4B00 
 3295              	.LASF13:
 3296 0513 504C4C53 		.ascii	"PLLSRC\000"
 3296      524300
 3297              	.LASF63:
 3298 051a 5243435F 		.ascii	"RCC_registers\000"
 3298      72656769 
 3298      73746572 
 3298      7300
 3299              		.ident	"GCC: (15:13.2.rel1-2) 13.2.1 20231009"
DEFINED SYMBOLS
                            *ABS*:00000000 clock.c
     /tmp/ccrbVt1e.s:19     .text:00000000 $t
     /tmp/ccrbVt1e.s:25     .text:00000000 start_PLL
     /tmp/ccrbVt1e.s:86     .text:00000038 $d
     /tmp/ccrbVt1e.s:90     .text:0000003c $t
     /tmp/ccrbVt1e.s:96     .text:0000003c stop_PLL
     /tmp/ccrbVt1e.s:130    .text:0000004c $d
     /tmp/ccrbVt1e.s:134    .text:00000050 $t
     /tmp/ccrbVt1e.s:140    .text:00000050 set_SYSCLK
     /tmp/ccrbVt1e.s:171    .text:00000068 $d
     /tmp/ccrbVt1e.s:175    .text:0000006c $t
     /tmp/ccrbVt1e.s:181    .text:0000006c set_bus_clock_dividers_exp
     /tmp/ccrbVt1e.s:253    .text:000000b0 $d
     /tmp/ccrbVt1e.s:257    .text:000000b4 $t
     /tmp/ccrbVt1e.s:263    .text:000000b4 set_MCO
     /tmp/ccrbVt1e.s:331    .text:000000fc $d
     /tmp/ccrbVt1e.s:335    .text:00000100 $t
     /tmp/ccrbVt1e.s:341    .text:00000100 enable_MCO_GPIO
     /tmp/ccrbVt1e.s:439    .text:00000148 $d
     /tmp/ccrbVt1e.s:445    .text:00000154 $t
     /tmp/ccrbVt1e.s:451    .text:00000154 get_PLL_PCLK
     /tmp/ccrbVt1e.s:500    .text:00000180 $d
     /tmp/ccrbVt1e.s:505    .text:00000188 $t
     /tmp/ccrbVt1e.s:511    .text:00000188 get_PLL_RCLK
     /tmp/ccrbVt1e.s:553    .text:000001b0 $d
     /tmp/ccrbVt1e.s:558    .text:000001b8 $t
     /tmp/ccrbVt1e.s:564    .text:000001b8 get_SYSCLK
     /tmp/ccrbVt1e.s:604    .text:000001dc $d
     /tmp/ccrbVt1e.s:609    .text:000001e4 $t
     /tmp/ccrbVt1e.s:615    .text:000001e4 get_AHBCLK
     /tmp/ccrbVt1e.s:662    .text:00000204 $d
     /tmp/ccrbVt1e.s:666    .text:00000208 $t
     /tmp/ccrbVt1e.s:672    .text:00000208 get_APB1CLK
     /tmp/ccrbVt1e.s:721    .text:00000228 $d
     /tmp/ccrbVt1e.s:725    .text:0000022c $t
     /tmp/ccrbVt1e.s:731    .text:0000022c get_APB2CLK
     /tmp/ccrbVt1e.s:780    .text:0000024c $d
     /tmp/ccrbVt1e.s:784    .text:00000250 $t
     /tmp/ccrbVt1e.s:790    .text:00000250 get_APB1TIMCLK
     /tmp/ccrbVt1e.s:834    .text:0000026c $d
     /tmp/ccrbVt1e.s:838    .text:00000270 $t
     /tmp/ccrbVt1e.s:844    .text:00000270 get_APB2TIMCLK
     /tmp/ccrbVt1e.s:888    .text:0000028c $d

UNDEFINED SYMBOLS
RCC
GPIOA
GPIOC
